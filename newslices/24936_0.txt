printf("%s %s [%s]:\n",(VAR1?"Encoder" : "Decoder"),VAR2 -> VAR3,(VAR2 -> VAR4?VAR2 -> VAR4 : ""));
char VAR3[16];
FUN1(VAR3,sizeof(VAR3),"%d", *VAR5);
FUN2(VAR2 -> VAR6,1 | 2);
if ((VAR7 -> VAR8) == VAR8 && ((VAR1?FUN3(VAR7) : FUN4(VAR7)))) {
FUN5(VAR7 = (FUN6(VAR7))){
if ((VAR7 -> VAR8) == VAR8 && ((VAR1?FUN3(VAR7) : FUN4(VAR7)))) {
return VAR7;
return ((void *)0);
FUN5(VAR9 = FUN7(VAR10 -> VAR8,VAR9,VAR1)){
FUN8(VAR9);
*(VAR11++) = 0;
FUN9(VAR11,0);
FUN9(VAR11,1);
static void FUN9(const char *VAR3,int VAR1)
VAR9 = ((VAR1?FUN10(VAR3) : FUN11(VAR3)));
FUN8(VAR9);
static void FUN8(const CLASS1 *VAR2)
int VAR1 = FUN3(VAR2);
const int *VAR5 = VAR2 -> VAR12;
FUN1(VAR3,sizeof(VAR3),"%d", *VAR5);
VAR5++;
FUN1(VAR3,sizeof(VAR3),"%d", *VAR5);
FUN8(VAR9);
FUN5(VAR9 = FUN7(VAR10 -> VAR8,VAR9,VAR1)){
int FUN12(void *VAR13,const char *VAR14,const char *VAR15)
VAR16 = FUN13((VAR15?VAR15 : ""));
VAR11 = strchr(VAR16,'=');
FUN9(VAR11,1);
static const CLASS1 *FUN7(enum VAR17 VAR8,const CLASS1 *VAR7,int VAR1)
FUN5(VAR7 = (FUN6(VAR7))){
if ((VAR7 -> VAR8) == VAR8 && ((VAR1?FUN3(VAR7) : FUN4(VAR7)))) {
return VAR7;
FUN5(VAR9 = FUN7(VAR10 -> VAR8,VAR9,VAR1)){
FUN8(VAR9);
FUN2(VAR18,VAR19);
FUN8(VAR9);
