char VAR1[100];
scanf("%99s", VAR1);
VAR2 = FUN1(VAR1);
char * FUN1(VAR3)
register char *VAR3;
static char VAR4[VAR5 + 1];
VAR3++;
VAR6 = VAR7 = &VAR4[sizeof(VAR4) - 1];
VAR8 = VAR9 = VAR4;
VAR10 = VAR8;
VAR11 = VAR12 = VAR3;
VAR11++;
FUN2 ((VAR13 = *VAR11++) != '<')
FUN2 ((VAR13 = *VAR11++) != '\')
printf("VAR13 = %VAR13\n", VAR13);
FUN3(VAR14);
FUN3('');
FUN3(VAR13);
if ((VAR13 = *VAR11++) == '\')
VAR11--;
FUN3(VAR13);
VAR6--;
VAR6++;
VAR6--;
FUN3(' ');
FUN3(VAR13);
VAR6++;
VAR8--;
FUN3(VAR13);
FUN3(*VAR11);
VAR11++;
VAR9 = VAR8;
VAR8 = VAR9;
FUN3('"');
VAR11++;
VAR12 = VAR11;
for (VAR15 = VAR12; VAR15 < VAR11; )
VAR13 = *VAR15++;
FUN3('\\');
FUN3(VAR13);
FUN3(VAR13);
VAR8--;
FUN3('"');
FUN2 ((VAR13 = *VAR11++) != ':')
FUN3(VAR13);
VAR11++;
FUN3(*VAR11);
FUN3(VAR13);
if (strchr(VAR16, VAR13) != VAR17)
VAR6--;
VAR8 = VAR9;
FUN3('"');
for (VAR15 = VAR12; VAR15 < VAR11; )
VAR13 = *VAR15++;
FUN3('\\');
FUN3(VAR13);
FUN3(VAR13);
VAR8--;
FUN3('"');
FUN2 ((VAR13 = *VAR11++) != '<')
FUN3(VAR13);
VAR6++;
VAR8--;
FUN3(VAR13);
FUN3(' ');
#VAR18 FUN3(VAR13)                   \
do                          \
{                           \
printf ("VAR8-VAR10 = %d   VAR6-VAR10=%d\n", (VAR8-VAR10), (VAR6-VAR10)); \
if (VAR19)               \
*VAR8++ = (VAR13);                \
else                        \
goto VAR20;               \
} FUN2 (0)
