const unsigned char *VAR1 = VAR2->VAR3 + 16;
const unsigned char *VAR4;
if (VAR5 || VAR6 || (VAR7 != VAR2->VAR8->VAR9) || (VAR10 != VAR2->VAR8->VAR11))
memcpy(VAR2->VAR12.VAR13[0], VAR2->VAR14.VAR13[0],VAR2->VAR8->VAR11 * VAR2->VAR12.VAR15[0]);
if (VAR2->VAR16 >= 0)
VAR4 = VAR1;
VAR17 = *VAR4++;
if (VAR17 & 0x80)
FUN1(VAR4, VAR2->VAR18, VAR2->VAR19);
VAR17 &= 0x7F;
void (*VAR20) (char *) = VAR21;
VAR20(VAR4)
void VAR21(char * VAR4)
VAR4 = VAR2->VAR18;
switch (VAR17)
case 1:
for (VAR22 = 0; VAR22 < VAR10; VAR22++)
do
VAR23 = *VAR4++;
if (VAR23 & 0x80)
VAR23 = (VAR23 & 0x7F) + 1;
if (VAR24 + VAR23 > VAR7)
return;
memcpy(&VAR25[VAR24], VAR4, VAR23);
VAR4 += VAR23;
if (VAR24 + VAR23 + 1 > VAR7)
return;
memcpy(&VAR25[VAR24], &VAR26[VAR24], VAR23 + 1);
case 2:
for (VAR22 = 0; VAR22 < VAR10; VAR22++)
memcpy(VAR25, VAR4, VAR7);
VAR4 += VAR7;
case 3:
for (VAR22 = 0; VAR22 < VAR10; VAR22++)
do
VAR23 = *VAR4++;
if (VAR23 & 0x80)
VAR23 = (VAR23 & 0x7F) + 1;
if (*VAR4++ == 0xFF)
VAR23 = FUN2(VAR4, &VAR25[VAR24], VAR23, VAR7 - VAR24);
else
memcpy(&VAR25[VAR24], VAR4, VAR23);
VAR4 += VAR23;
VAR24 += VAR23;
else
if (VAR24 + VAR23 + 1 > VAR7)
return;
memcpy(&VAR25[VAR24], &VAR26[VAR24], VAR23 + 1);
