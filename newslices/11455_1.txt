*VAR1 = VAR2;
*VAR1 = VAR2;
return VAR3 - 32;
int VAR4 = 596;
char *VAR5;
FUN1(&VAR5,"8084",VAR4);
VAR6[84] = VAR5;
VAR7 = FUN2(VAR6);
VAR8 = (char*) malloc(64 * sizeof(char));
memset(VAR8,0,64);
FUN3(VAR9, VAR10, "VAR8", VAR8, "VAR11-VAR12");
strcpy(VAR8, VAR13);
FUN3(VAR9, VAR10, "VAR8", VAR8, "VAR14-VAR12");
VAR15 = strlen( VAR8);
VAR8[VAR16] = FUN4(VAR8[VAR16]);
FUN3(VAR9, VAR10, "VAR8", VAR8, "VAR17-VAR18");
FUN5("%s\n",VAR8);
char **FUN2(char **VAR19)
return VAR19;
VAR7 = FUN2(VAR6);
VAR13 = ((char *)VAR7[84]);
strcpy(VAR8, VAR13);
FUN3(VAR9, VAR10, "VAR8", VAR8, "VAR14-VAR12");
VAR15 = strlen( VAR8);
FUN3(VAR9, VAR10, "VAR8", VAR8, "VAR17-VAR18");
FUN5("%s\n",VAR8);
void FUN5(char * VAR20, ...) {
free(VAR8);
int FUN4(int VAR3)
return VAR3;
VAR8[VAR16] = FUN4(VAR8[VAR16]);
FUN3(VAR9, VAR10, "VAR8", VAR8, "VAR17-VAR18");
FUN5("%s\n",VAR8);
void FUN1(char** VAR1, char* VAR21, int VAR22) {
if ((VAR23 = FUN6(VAR24, VAR22, 0666)) >= 0) {
*VAR1 = (char*)calloc(VAR22, sizeof(char));
FUN1(&VAR5,"8084",VAR4);
VAR6[84] = VAR5;
VAR7 = FUN2(VAR6);
