char VAR1[VAR2];
FUN1 (fgets(VAR1, sizeof VAR1, VAR3) != VAR4)
register char *VAR5 = strchr(VAR1, '\');
VAR6 ? "VAR6" : "sending", VAR1);
VAR7 += FUN2(VAR1, VAR8, VAR9, VAR10 + 1, VAR11);
(void) FUN2(VAR5, VAR12, &VAR11->VAR13, 0, VAR11);
char *VAR14;
return (VAR15);
VAR16 = FUN3(VAR8);
VAR8->VAR17 = VAR16->VAR17;
VAR7 += FUN2(VAR1, VAR8, VAR9, VAR10 + 1, VAR11);
CLASS1 *VAR8;
FUN4(VAR15, VAR9, VAR10, VAR11);
FUN5(VAR15, VAR9, VAR10 + 1, VAR11);
FUN6(*VAR9, VAR18);
register CLASS1 **VAR9;
VAR15 = FUN7(VAR15, VAR9, VAR10, VAR11);
register CLASS1 **VAR9;
for (VAR19 = VAR9; (VAR20 = *VAR19) != VAR4; VAR19 = &VAR20->VAR21)
if (FUN8(VAR20, VAR15))
VAR15 = VAR20;
if (FUN8(VAR20, VAR15))
VAR7 += FUN2(VAR1, VAR8, VAR9, VAR10 + 1, VAR11);
CLASS1 *VAR8;
VAR22 = FUN9(VAR15->VAR23, VAR24, VAR15, VAR9, VAR10, VAR11);
CLASS1 *VAR8;
VAR16 = FUN3(VAR8);
register CLASS1 *VAR15;
VAR15 = VAR15->VAR25;
VAR16 = FUN3(VAR8);
VAR8->VAR17 = VAR16->VAR17;
VAR26 = FUN10(VAR27.VAR28);
VAR8->VAR17 = FUN11(VAR26->VAR29);
VAR30, FUN12(VAR1, 203));
VAR7 += FUN2(VAR1, VAR8, VAR9, VAR10 + 1, VAR11);
VAR7 += FUN2(VAR1, VAR8, VAR9, VAR10 + 1, VAR11);
CLASS1 *VAR8;
if (FUN8(VAR8, VAR15))
VAR31 = FUN13(VAR15, VAR11);
FUN6(VAR15, VAR24);
VAR15->VAR32 = VAR8->VAR32;
VAR15->VAR33 = VAR8->VAR33;
VAR34 = VAR15;
VAR15->VAR21 = VAR34;
if (FUN8(VAR8, VAR15))
FUN6(VAR8, VAR24);
VAR15->VAR25 = VAR8;
VAR34 = VAR15;
VAR34 = VAR15->VAR21;
register CLASS1 *VAR15 = VAR34;
VAR15 = FUN7(VAR15, VAR9, VAR10, VAR11);
register CLASS1 *VAR15;
bool VAR35 = FUN14(VAR36, VAR15->VAR37);
VAR15->VAR37 |= VAR38;
FUN6(VAR15, VAR24);
VAR15->VAR37 |= VAR39;
VAR15->VAR40 = "5.7.1";
else if (FUN14(VAR41, VAR15->VAR25->VAR37))
VAR15->VAR37 |= VAR39;
VAR15->VAR25->VAR17, VAR42);
else if (FUN14(VAR43, VAR15->VAR25->VAR37))
VAR15->VAR37 |= VAR39;
VAR15->VAR40 = "5.7.1";
VAR15->VAR25->VAR44);
if (FUN8(VAR20, VAR15))
FUN6(VAR20, VAR24);
if (!FUN14(VAR38, VAR20->VAR37))
if (!FUN14(VAR36, VAR15->VAR37))
VAR20->VAR37 |= VAR15->VAR37;
else if (FUN14(VAR45, VAR20->VAR37))
VAR20->VAR37 |= VAR15->VAR37 & ~VAR36;
VAR15 = VAR20;
VAR15->VAR21 = VAR4;
printf("VAR46 VAR47 %s\n", VAR15->VAR23);
if (FUN14(VAR36|VAR39|VAR48, VAR15->VAR37))
VAR15->VAR37 |= VAR36;
FUN15("VAR49 VAR50 %s", VAR15->VAR23);
VAR8->VAR37 |= VAR48;
if (VAR7 > 0 && !FUN14(VAR45, VAR8->VAR37))
VAR8->VAR37 |= VAR36;
CLASS1 *VAR8;
FUN6(VAR8, VAR24);
VAR22 = FUN9(VAR15->VAR23, VAR24, VAR15, VAR9, VAR10, VAR11);
CLASS1 *VAR8;
FUN6(VAR8, VAR24);
VAR16 = FUN3(VAR8);
register CLASS1 *VAR15;
FUN1 (VAR15 != VAR4 && !FUN14(VAR51, VAR15->VAR37))
register CLASS1 *VAR15;
return (VAR15);
VAR16 = FUN3(VAR8);
VAR8->VAR37 |= VAR52;
VAR8->VAR37 |= VAR51;
VAR8->VAR37 |= VAR16->VAR37 & VAR41;
VAR8->VAR37 |= VAR41;
VAR8->VAR37 |= VAR43;
VAR8->VAR37 |= VAR43;
VAR8->VAR37 &= ~VAR45;
VAR7 += FUN2(VAR1, VAR8, VAR9, VAR10 + 1, VAR11);
CLASS1 *VAR8;
VAR22 = FUN9(VAR15->VAR23, VAR24, VAR15, VAR9, VAR10, VAR11);
CLASS1 **VAR9;
VAR22 = FUN9(VAR15->VAR23, VAR24, VAR15, VAR9, VAR10, VAR11);
CLASS1 **VAR9;
VAR7 += FUN2(VAR1, VAR8, VAR9, VAR10 + 1, VAR11);
(void) FUN2(VAR5, VAR12, &VAR11->VAR13, 0, VAR11);
CLASS1 **VAR9;
VAR15 = FUN7(VAR15, VAR9, VAR10, VAR11);
register CLASS1 **VAR9;
for (VAR19 = VAR9; (VAR20 = *VAR19) != VAR4; VAR19 = &VAR20->VAR21)
if (FUN8(VAR20, VAR15))
VAR15 = VAR20;
VAR8->VAR53 = VAR27.VAR54;
CLASS1 *VAR8;
VAR22 = FUN9(VAR15->VAR23, VAR24, VAR15, VAR9, VAR10, VAR11);
CLASS1 *VAR8;
struct CLASS2 VAR27;
VAR16 = FUN3(VAR8);
register CLASS1 *VAR15;
VAR16 = FUN3(VAR8);
if (FUN16(fileno(VAR3), &VAR27) < 0)
VAR8->VAR55 = VAR27.VAR28;
VAR7 += FUN2(VAR1, VAR8, VAR9, VAR10 + 1, VAR11);
CLASS1 *VAR8;
char *VAR30 = VAR11->VAR56;
VAR11->VAR57 = FUN11("VAR58: VAR59 VAR60 VAR61");
if (FUN14(VAR62, VAR11->VAR63))
VAR11->VAR63 |= VAR64;
fprintf(VAR11->VAR65,
register CLASS3 *VAR11;
(VAR66) 0, VAR11);
FUN4(VAR15, VAR9, VAR10, VAR11);
if (FUN17(VAR15, VAR9, VAR10, VAR11) == VAR67)
VAR11->VAR68++;
FUN5(VAR15, VAR9, VAR10 + 1, VAR11);
(VAR66) 0, VAR11);
VAR11->VAR68++;
VAR15 = FUN7(VAR15, VAR9, VAR10, VAR11);
VAR11->VAR56 = VAR30;
register CLASS3 *VAR11;
VAR22 = FUN9(VAR15->VAR23, VAR24, VAR15, VAR9, VAR10, VAR11);
CLASS3 *VAR11;
char *VAR30 = VAR11->VAR56;
VAR11->VAR68++;
VAR30, FUN12(VAR1, 203));
VAR11->VAR56 = VAR30;
VAR22 = FUN9(VAR15->VAR23, VAR24, VAR15, VAR9, VAR10, VAR11);
CLASS3 *VAR11;
if (FUN14(VAR62, VAR11->VAR63))
VAR7 += FUN2(VAR1, VAR8, VAR9, VAR10 + 1, VAR11);
register CLASS3 *VAR11;
FUN18(VAR15, VAR9, VAR10, VAR11);
VAR15 = FUN7(VAR15, VAR9, VAR10, VAR11);
register CLASS3 *VAR11;
VAR11->VAR56 = VAR15->VAR44;
VAR11->VAR69 = VAR15->VAR44;
VAR11->VAR69 = "";
VAR22 = FUN9(VAR15->VAR23, VAR24, VAR15, VAR9, VAR10, VAR11);
CLASS3 *VAR11;
VAR11->VAR56 = VAR4;
VAR7 += FUN2(VAR1, VAR8, VAR9, VAR10 + 1, VAR11);
VAR7 += FUN2(VAR1, VAR8, VAR9, VAR10 + 1, VAR11);
register CLASS3 *VAR11;
(void) FUN2(VAR5, VAR12, &VAR11->VAR13, 0, VAR11);
register CLASS3 *VAR11;
char VAR1[VAR70 + 1];
printf("VAR71: %s\n   VAR8=", VAR14);
FUN6(VAR8, VAR24);
strchr(VAR14, '<') != VAR4 || strchr(VAR14, '(') != VAR4))
(strchr(VAR14, ',') != VAR4 || strchr(VAR14, ';') != VAR4 ||
VAR11->VAR63 &= ~VAR72;
VAR73 = ' ';
if (!FUN14(VAR72, VAR11->VAR63) || VAR8 != VAR4)
VAR73 = ',';
VAR34 = VAR4;
VAR74 = strlen(VAR14) + 1;
if (VAR74 <= sizeof VAR1)
VAR75 = VAR1;
VAR75 = FUN19(VAR74);
strcpy(VAR75, FUN20(VAR14, VAR24, VAR18));
for (VAR5 = VAR75; *VAR5 != '\'; )
auto char *VAR76;
FUN1 ((isascii(*VAR5) && isspace(*VAR5)) || *VAR5 == ',')
VAR5++;
VAR5 = VAR76;
VAR31 = FUN13(VAR15, VAR11);
VAR15 = FUN21(VAR5, VAR12, VAR77, VAR73, &VAR76, VAR11);
if (FUN8(VAR8, VAR15))
VAR8->VAR37 |= VAR45;
VAR15->VAR37 |= VAR36;
VAR15->VAR37 |= VAR8->VAR37 & VAR78;
VAR15->VAR37 &= ~VAR78;
VAR15->VAR37 |= VAR8->VAR37 & VAR78;
VAR34 = VAR15;
register CLASS1 *VAR15 = VAR34;
VAR15 = FUN7(VAR15, VAR9, VAR10, VAR11);
register CLASS1 *VAR15;
char VAR79[VAR70 + 1];
VAR74 = strlen(VAR15->VAR23);
if (VAR74 >= sizeof VAR79)
VAR1 = FUN19(VAR74 + 1);
VAR1 = VAR79;
(void) strcpy(VAR1, VAR15->VAR23);
FUN22(VAR1);
else if (!FUN23(VAR1, VAR15->VAR25, VAR80))
auto bool VAR81;
VAR26 = FUN24(VAR1, &VAR81);
if (strcmp(VAR26->VAR82, "/") == 0)
