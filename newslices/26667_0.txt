VAR1 = FUN1(VAR2);
VAR3 = fopen(VAR1,"rb");
if (VAR3 != 0) {
fseek(VAR3,0L,2);
VAR4 = ftell(VAR3);
rewind(VAR3);
*VAR5 = ((char *)(malloc(sizeof(char ) * (VAR4 + 1))));
if (*VAR5 != 0) {
VAR6 = fread(*VAR5,1,VAR4,VAR3);
if (VAR3 != 0) {
fclose(VAR3);
FUN2(&VAR7,"NONIMMIGRANT_QUINCUNXES");
if (VAR7 != 0) {;
VAR8 = ((int )(strlen(VAR7)));
VAR9 = ((char *)(malloc(VAR8 + 1)));
if (VAR9 == 0) {
memset(VAR9,0,VAR8 + 1);
memcpy(VAR9,VAR7,VAR8);
if (VAR7 != 0)
free(((char *)VAR7));
VAR10 = &VAR9;
FUN3(VAR10);
void FUN4(char **VAR11)
FUN3(VAR10);
VAR12 = ((char *)( *VAR11));
VAR13 = ((int )(strlen(VAR12)));
for (; VAR13 >= 0; (--VAR14 , --VAR13)) {
VAR15.VAR16[VAR14] = VAR12[VAR13];
FUN5(VAR17, VAR18, "VAR15.VAR16", VAR15.VAR16, "VAR19-VAR20");
VAR15.VAR16[VAR21] = FUN6(VAR15.VAR16[VAR21]);
FUN5(VAR17, VAR18, "VAR15.VAR16", VAR15.VAR16, "VAR22-VAR20");
if ( *VAR11 != 0)
free(((char *)( *VAR11)));
int FUN6(int VAR23)
if (VAR23 >= 97 && VAR23 <= 122) {
return VAR23 - 32;
return VAR23;
VAR15.VAR16[VAR21] = FUN6(VAR15.VAR16[VAR21]);
FUN7("%VAR23",VAR15.FUN8(VAR15.VAR16[VAR21]));
void FUN7(char * VAR24, ...) {
FUN7("%VAR23",VAR15.FUN8(VAR15.VAR16[VAR21]));
