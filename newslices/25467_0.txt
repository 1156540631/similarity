return VAR1[VAR2 -> VAR3];
int VAR4 = 1;
CLASS1 *VAR5;
VAR6 = VAR4;
VAR5 = (FUN1(sizeof(( *VAR5)) * VAR6));
char *VAR7 = strchr(VAR8,',');
*(VAR7++) = 0;
if (VAR9 -> VAR10 > (2147483647 - VAR6) || !(VAR5 = (FUN2(VAR5,(VAR6 += VAR9 -> VAR10 - 1),sizeof(( *VAR5)))))) {
CLASS2 *VAR11 = VAR9 -> VAR12[VAR13];
VAR5[VAR14++] = FUN3(VAR11 -> VAR15,VAR11 -> VAR16,VAR17 -> VAR16) + VAR18;
VAR8 = VAR7;
char *VAR7 = strchr(VAR8,',');
if (!memcmp(VAR8,"VAR12",8)) {
VAR18 = (VAR8[8]?FUN4("force_key_frames",(VAR8 + 8),1) : 0);
VAR5[VAR14++] = FUN3(VAR11 -> VAR15,VAR11 -> VAR16,VAR17 -> VAR16) + VAR18;
FUN5(VAR5,VAR6,sizeof(( *VAR5)),VAR19);
VAR2 -> VAR20 = VAR5;
VAR1[VAR13 + VAR21 -> VAR22] -> VAR15 = FUN6();
VAR2 = VAR23[VAR24];
VAR25 = FUN7(VAR2);
return ((void *)0);
for (VAR24 = 0; VAR24 < VAR26; VAR24++) {
VAR25 = FUN7(VAR2);
VAR2 -> VAR27 -> VAR28 = VAR25 -> VAR27 -> VAR28;
if (VAR29 < 0 && FUN8(VAR25 -> VAR27 -> VAR30) >= FUN8(VAR25 -> VAR27 -> VAR31) && 0.5 / FUN8(VAR25 -> VAR27 -> VAR30) > FUN8(VAR25 -> VAR27 -> VAR16) && 0.5 / FUN8(VAR25 -> VAR27 -> VAR30) > FUN8(VAR32 -> VAR16) && FUN8(VAR25 -> VAR27 -> VAR16) < 1.0 / 500 && FUN8(VAR32 -> VAR16) < 1.0 / 500 || VAR29 == 2) {
VAR2 -> VAR27 -> VAR31 = VAR25 -> VAR27 -> VAR31;
VAR2 -> VAR33 = FUN9(VAR34 -> VAR35);
FUN10(VAR36,sizeof(VAR36),"FUN11 (VAR34 %s) VAR37 VAR38 for VAR39 VAR40 #%d:%d",FUN12(VAR2 -> VAR27 -> VAR34 -> VAR35),VAR2 -> VAR41,VAR2 -> VAR14);
VAR2 -> VAR42 = 1;
VAR2 -> VAR43 = FUN13(VAR2 -> VAR44 -> VAR44);
VAR2 -> VAR43 = VAR25 -> VAR45;
int VAR46 = FUN14(VAR2 -> VAR43,VAR2 -> VAR33 -> VAR47);
VAR2 -> VAR43 = VAR2 -> VAR33 -> VAR47[VAR46];
VAR34 -> VAR48 = FUN15(VAR2 -> VAR44 -> VAR44 -> VAR49[0]);
VAR34 -> VAR16 = FUN16(VAR2 -> VAR43);
VAR34 -> VAR50 = VAR2 -> VAR44 -> VAR44 -> VAR49[0] -> VAR51;
VAR34 -> VAR52 = VAR2 -> VAR44 -> VAR44 -> VAR49[0] -> VAR53;
VAR34 -> VAR54 = VAR2 -> VAR27 -> VAR54 = (VAR2 -> VAR55?FUN17((VAR2 -> VAR55 * (VAR34 -> VAR52) / (VAR34 -> VAR50)),255) : VAR2 -> VAR44 -> VAR44 -> VAR49[0] -> VAR54);
if (!strncmp((VAR2 -> VAR56),"VAR57:",5)) {
FUN18(VAR2 -> VAR56,VAR2,VAR2 -> VAR27 -> VAR34);
char VAR58[1024];
FUN10(VAR58,sizeof(VAR58),"%s-%d.log",(VAR2 -> VAR59?VAR2 -> VAR59 : "ffmpeg2pass"),VAR24);
static void FUN18(char *VAR60,CLASS3 *VAR2,CLASS4 *VAR17)
VAR8 = VAR60;
char *VAR7 = strchr(VAR8,',');
if (!memcmp(VAR8,"VAR12",8)) {
VAR18 = (VAR8[8]?FUN4("force_key_frames",(VAR8 + 8),1) : 0);
VAR5[VAR14++] = FUN3(VAR11 -> VAR15,VAR11 -> VAR16,VAR17 -> VAR16) + VAR18;
if (VAR9 -> VAR10 > (2147483647 - VAR6) || !(VAR5 = (FUN2(VAR5,(VAR6 += VAR9 -> VAR10 - 1),sizeof(( *VAR5)))))) {
FUN5(VAR5,VAR6,sizeof(( *VAR5)),VAR19);
VAR2 -> VAR20 = VAR5;
FUN18(VAR2 -> VAR56,VAR2,VAR2 -> VAR27 -> VAR34);
VAR61 = FUN19(VAR25,VAR2);
FUN18(VAR2 -> VAR56,VAR2,VAR2 -> VAR27 -> VAR34);
FUN10(VAR58,sizeof(VAR58),"%s-%d.log",(VAR2 -> VAR59?VAR2 -> VAR59 : "ffmpeg2pass"),VAR24);
static void FUN18(char *VAR60,CLASS3 *VAR2,CLASS4 *VAR17)
FUN18(VAR2 -> VAR56,VAR2,VAR2 -> VAR27 -> VAR34);
FUN10(VAR58,sizeof(VAR58),"%s-%d.log",(VAR2 -> VAR59?VAR2 -> VAR59 : "ffmpeg2pass"),VAR24);
static CLASS5 *FUN7(CLASS3 *VAR2)
VAR25 = FUN7(VAR2);
FUN10(VAR58,sizeof(VAR58),"%s-%d.log",(VAR2 -> VAR59?VAR2 -> VAR59 : "ffmpeg2pass"),VAR24);
