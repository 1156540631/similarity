*VAR1 = VAR2;
*VAR1 = (char*)calloc(VAR3, sizeof(char));
*VAR1 = VAR2;
return VAR4 - 32;
int VAR5 = 596;
char *VAR6;
FUN1(&VAR6,"3876",VAR5);
VAR7 = ((int )(strlen(VAR6)));
VAR8 = ((char *)(malloc(VAR7 + 1)));
memset(VAR8,0,VAR7 + 1);
memcpy(VAR8,VAR6,VAR7);
VAR9 = &VAR8;
FUN2(VAR9);
VAR10[64 - 1] = '\';
FUN3(VAR11, VAR12, "VAR10", VAR10, "VAR13-VAR14");
FUN3(VAR11, VAR12, "VAR10", VAR10, "VAR15-VAR14");
VAR10[VAR16] = FUN4(VAR10[VAR16]);
FUN5("%s\n",&(VAR10[VAR17+1]));
free(VAR10);
void FUN6(char **VAR18)
VAR19 = ((char *)( *VAR18));
VAR20 = ((int )(strlen(VAR19)));
VAR10[VAR17] = VAR19[VAR20];
FUN3(VAR11, VAR12, "VAR10", VAR10, "VAR15-VAR14");
free(VAR10);
void FUN1(char** VAR1, char* VAR21, int VAR3) {
if ((VAR22 = FUN7(VAR23, VAR3, 0666)) >= 0) {
*VAR1 = (char*)calloc(VAR3, sizeof(char));
FUN1(&VAR6,"3876",VAR5);
VAR7 = ((int )(strlen(VAR6)));
memcpy(VAR8,VAR6,VAR7);
VAR9 = &VAR8;
FUN2(VAR9);
int FUN4(int VAR4)
return VAR4;
VAR10[VAR16] = FUN4(VAR10[VAR16]);
free(VAR10);
void FUN5(char * VAR24, ...) {
FUN5("%s\n",&(VAR10[VAR17+1]));
free(VAR10);
