VAR1, FUN1(VAR2, 203));
VAR3 += FUN2(VAR2, VAR4, VAR5, VAR6 + 1, VAR7);
VAR7->VAR8 = VAR1;
VAR9 = FUN3(VAR10->VAR11, VAR12, VAR10, VAR5, VAR6, VAR7);
CLASS1 *VAR7;
VAR3 += FUN2(VAR2, VAR4, VAR5, VAR6 + 1, VAR7);
register CLASS1 *VAR7;
VAR3 += FUN2(VAR2, VAR4, VAR5, VAR6 + 1, VAR7);
register CLASS1 *VAR7;
VAR10 = FUN4(VAR13, VAR14, VAR15, VAR16, &VAR17, VAR7);
VAR18 = VAR10;
register CLASS2 *VAR10 = VAR18;
VAR10 = FUN5(VAR10, VAR5, VAR6, VAR7);
register CLASS2 *VAR10;
VAR19 = strlen(VAR10->VAR11);
VAR2 = FUN6(VAR19 + 1);
(void) strcpy(VAR2, VAR10->VAR11);
FUN7(VAR2);
VAR20 = FUN8(VAR2, &VAR21);
VAR10->VAR11 = FUN9(VAR20->VAR22);
(void) strcpy(VAR2, VAR20->VAR22);
(void) FUN2(VAR13, VAR14, &VAR7->VAR23, 0, VAR7);
char *VAR24;
VAR4->VAR25 = VAR26.VAR27;
VAR4->VAR28 = VAR29->VAR28;
VAR20 = FUN10(VAR26.VAR30);
VAR4->VAR28 = FUN9(VAR20->VAR22);
VAR3 += FUN2(VAR2, VAR4, VAR5, VAR6 + 1, VAR7);
CLASS2 *VAR4;
FUN11(VAR4, VAR12);
FUN11(VAR10, VAR12);
VAR10->VAR31 = VAR4->VAR31;
VAR10->VAR32 = VAR4->VAR32;
VAR18 = VAR10;
VAR10->VAR33 = VAR18;
if (FUN12(VAR4, VAR10))
FUN11(VAR4, VAR12);
VAR10->VAR34 = VAR4;
VAR18 = VAR10;
VAR18 = VAR10->VAR33;
register CLASS2 *VAR10 = VAR18;
FUN13(VAR10, VAR5, VAR6 + 1, VAR7);
FUN14(VAR10, VAR5, VAR6, VAR7);
FUN11(*VAR5, VAR35);
register CLASS2 **VAR5;
VAR10 = FUN5(VAR10, VAR5, VAR6, VAR7);
register CLASS2 *VAR10;
register CLASS2 **VAR5;
bool VAR36 = FUN15(VAR37, VAR10->VAR38);
FUN11(VAR10, VAR12);
VAR10->VAR38 |= VAR39;
VAR10->VAR40 = "5.7.1";
else if (FUN15(VAR41, VAR10->VAR34->VAR38))
VAR10->VAR38 |= VAR39;
VAR10->VAR40 = "5.7.1";
VAR10->VAR34->VAR28, VAR42);
else if (FUN15(VAR43, VAR10->VAR34->VAR38))
VAR10->VAR38 |= VAR39;
VAR10->VAR40 = "5.7.1";
for (VAR44 = VAR5; (VAR45 = *VAR44) != VAR46; VAR44 = &VAR45->VAR33)
if (FUN12(VAR45, VAR10))
VAR10 = VAR45;
if (FUN12(VAR45, VAR10))
FUN11(VAR45, VAR12);
if (!FUN15(VAR47, VAR45->VAR38))
if (!FUN15(VAR37, VAR10->VAR38))
else if (FUN15(VAR48, VAR45->VAR38))
VAR45->VAR38 |= VAR10->VAR38 & ~VAR37;
VAR10 = VAR45;
printf("VAR49 VAR50 %s\n", VAR10->VAR11);
if (FUN15(VAR37|VAR39|VAR51, VAR10->VAR38))
VAR10->VAR38 |= VAR37;
FUN16("VAR52 VAR53 %s", VAR10->VAR11);
VAR4->VAR38 |= VAR51;
if (VAR3 > 0 && !FUN15(VAR48, VAR4->VAR38))
VAR4->VAR38 |= VAR37;
CLASS2 *VAR4;
FUN11(VAR4, VAR12);
VAR9 = FUN3(VAR10->VAR11, VAR12, VAR10, VAR5, VAR6, VAR7);
CLASS2 *VAR4;
char VAR2[VAR54];
FUN11(VAR4, VAR12);
VAR29 = FUN17(VAR4);
FUN18 (fgets(VAR2, sizeof VAR2, VAR55) != VAR46)
register char *VAR13 = strchr(VAR2, '\');
VAR56 ? "VAR56" : "sending", VAR2);
VAR3 += FUN2(VAR2, VAR4, VAR5, VAR6 + 1, VAR7);
register CLASS2 *VAR10;
FUN18 (VAR10 != VAR46 && !FUN15(VAR57, VAR10->VAR38))
register CLASS2 *VAR10;
FUN18 (VAR10 != VAR46 && !FUN15(VAR57, VAR10->VAR38))
VAR10 = VAR10->VAR34;
return (VAR10);
VAR29 = FUN17(VAR4);
VAR4->VAR38 |= VAR58;
VAR4->VAR38 |= VAR57;
VAR4->VAR38 |= VAR29->VAR38 & VAR41;
VAR4->VAR38 |= VAR41;
VAR4->VAR38 |= VAR41;
VAR4->VAR38 |= VAR43;
VAR4->VAR38 |= VAR43;
VAR4->VAR38 &= ~VAR48;
VAR3 += FUN2(VAR2, VAR4, VAR5, VAR6 + 1, VAR7);
CLASS2 *VAR4;
VAR9 = FUN3(VAR10->VAR11, VAR12, VAR10, VAR5, VAR6, VAR7);
CLASS2 **VAR5;
VAR9 = FUN3(VAR10->VAR11, VAR12, VAR10, VAR5, VAR6, VAR7);
CLASS2 **VAR5;
VAR3 += FUN2(VAR2, VAR4, VAR5, VAR6 + 1, VAR7);
(void) FUN2(VAR13, VAR14, &VAR7->VAR23, 0, VAR7);
CLASS2 **VAR5;
FUN11(VAR4, VAR12);
if (FUN12(VAR4, VAR10))
FUN11(VAR4, VAR12);
FUN19(VAR10, VAR5, VAR6, VAR7);
if (FUN20(VAR10, VAR5, VAR6, VAR7) == VAR59)
FUN13(VAR10, VAR5, VAR6 + 1, VAR7);
FUN14(VAR10, VAR5, VAR6, VAR7);
FUN11(*VAR5, VAR35);
register CLASS2 **VAR5;
VAR10 = FUN5(VAR10, VAR5, VAR6, VAR7);
register CLASS2 **VAR5;
for (VAR44 = VAR5; (VAR45 = *VAR44) != VAR46; VAR44 = &VAR45->VAR33)
if (FUN12(VAR45, VAR10))
VAR10 = VAR45;
if (FUN12(VAR45, VAR10))
VAR10 = VAR45;
VAR9 = FUN3(VAR10->VAR11, VAR12, VAR10, VAR5, VAR6, VAR7);
CLASS2 *VAR4;
struct CLASS3 VAR26;
VAR29 = FUN17(VAR4);
register CLASS2 *VAR10;
VAR29 = FUN17(VAR4);
if (FUN21(fileno(VAR55), &VAR26) < 0)
VAR4->VAR60 = VAR26.VAR30;
VAR3 += FUN2(VAR2, VAR4, VAR5, VAR6 + 1, VAR7);
(void) FUN2(VAR13, VAR14, &VAR7->VAR23, 0, VAR7);
CLASS2 *VAR4;
VAR7->VAR61 = FUN9("VAR62: VAR63 VAR64 VAR65");
register CLASS1 *VAR7;
(VAR66) 0, VAR7);
FUN19(VAR10, VAR5, VAR6, VAR7);
if (FUN20(VAR10, VAR5, VAR6, VAR7) == VAR59)
VAR7->VAR67++;
FUN13(VAR10, VAR5, VAR6 + 1, VAR7);
(VAR66) 0, VAR7);
FUN14(VAR10, VAR5, VAR6, VAR7);
VAR7->VAR67++;
VAR10 = FUN5(VAR10, VAR5, VAR6, VAR7);
register CLASS1 *VAR7;
char *VAR1 = VAR7->VAR8;
VAR7->VAR61 = FUN9("VAR62: VAR63 VAR64 VAR65");
if (FUN15(VAR68, VAR7->VAR69))
VAR7->VAR69 |= VAR70;
fprintf(VAR7->VAR71,
register CLASS1 *VAR7;
(VAR66) 0, VAR7);
FUN19(VAR10, VAR5, VAR6, VAR7);
if (FUN20(VAR10, VAR5, VAR6, VAR7) == VAR59)
VAR7->VAR67++;
FUN13(VAR10, VAR5, VAR6 + 1, VAR7);
(VAR66) 0, VAR7);
FUN14(VAR10, VAR5, VAR6, VAR7);
VAR7->VAR67++;
VAR10 = FUN5(VAR10, VAR5, VAR6, VAR7);
VAR7->VAR8 = VAR1;
register CLASS1 *VAR7;
VAR3 += FUN2(VAR2, VAR4, VAR5, VAR6 + 1, VAR7);
CLASS1 *VAR7;
VAR9 = FUN3(VAR10->VAR11, VAR12, VAR10, VAR5, VAR6, VAR7);
CLASS1 *VAR7;
char *VAR1 = VAR7->VAR8;
VAR7->VAR67++;
VAR3 += FUN2(VAR2, VAR4, VAR5, VAR6 + 1, VAR7);
VAR7->VAR8 = VAR1;
VAR9 = FUN3(VAR10->VAR11, VAR12, VAR10, VAR5, VAR6, VAR7);
CLASS1 *VAR7;
if (FUN15(VAR68, VAR7->VAR69))
VAR3 += FUN2(VAR2, VAR4, VAR5, VAR6 + 1, VAR7);
register CLASS1 *VAR7;
VAR7->VAR8 = VAR10->VAR72;
VAR7->VAR73 = VAR10->VAR72;
VAR7->VAR73 = "";
VAR9 = FUN3(VAR10->VAR11, VAR12, VAR10, VAR5, VAR6, VAR7);
CLASS1 *VAR7;
VAR7->VAR8 = VAR46;
VAR3 += FUN2(VAR2, VAR4, VAR5, VAR6 + 1, VAR7);
register CLASS1 *VAR7;
(void) FUN2(VAR13, VAR14, &VAR7->VAR23, 0, VAR7);
register CLASS1 *VAR7;
char VAR2[VAR74 + 1];
printf("VAR75: %s\n   VAR4=", VAR24);
FUN11(VAR4, VAR12);
strchr(VAR24, '<') != VAR46 || strchr(VAR24, '(') != VAR46))
(strchr(VAR24, ',') != VAR46 || strchr(VAR24, ';') != VAR46 ||
VAR7->VAR69 &= ~VAR76;
VAR16 = ' ';
if (!FUN15(VAR76, VAR7->VAR69) || VAR4 != VAR46)
VAR16 = ',';
VAR18 = VAR46;
VAR19 = strlen(VAR24) + 1;
if (VAR19 <= sizeof VAR2)
VAR77 = VAR2;
VAR77 = FUN6(VAR19);
strcpy(VAR77, FUN22(VAR24, VAR12, VAR35));
for (VAR13 = VAR77; *VAR13 != '\'; )
VAR3 += FUN2(VAR2, VAR4, VAR5, VAR6 + 1, VAR7);
auto char *VAR17;
FUN18 ((isascii(*VAR13) && isspace(*VAR13)) || *VAR13 == ',')
VAR13++;
VAR13 = VAR17;
VAR78 = FUN23(VAR10, VAR7);
VAR10 = FUN4(VAR13, VAR14, VAR15, VAR16, &VAR17, VAR7);
if (FUN12(VAR4, VAR10))
VAR4->VAR38 |= VAR48;
VAR10->VAR38 |= VAR37;
VAR10->VAR38 |= VAR4->VAR38 & VAR79;
VAR10->VAR38 &= ~VAR79;
VAR10->VAR38 |= VAR4->VAR38 & VAR79;
VAR18 = VAR10;
register CLASS2 *VAR10 = VAR18;
VAR10 = FUN5(VAR10, VAR5, VAR6, VAR7);
register CLASS2 *VAR10;
char VAR80[VAR74 + 1];
VAR19 = strlen(VAR10->VAR11);
if (VAR19 >= sizeof VAR80)
VAR2 = FUN6(VAR19 + 1);
VAR2 = VAR80;
(void) strcpy(VAR2, VAR10->VAR11);
FUN7(VAR2);
else if (!FUN24(VAR2, VAR10->VAR34, VAR81))
auto bool VAR21;
VAR20 = FUN8(VAR2, &VAR21);
VAR10->VAR11 = FUN9(VAR20->VAR22);
VAR20->VAR22);
(void) strcpy(VAR2, VAR20->VAR22);
