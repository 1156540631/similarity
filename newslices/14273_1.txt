int VAR1 = 0, VAR2 = VAR3->VAR2, VAR4 = VAR3->VAR4, VAR5, VAR6;
int VAR7 = 0, VAR8 = 0, VAR9 = VAR10->VAR11;
int VAR12 = VAR3->VAR4  - 1,
VAR13 = VAR3->VAR2 - 1;
FUN1 (VAR8 < VAR13)
if (memcmp(VAR14 + VAR8*VAR15, VAR16 + VAR8*VAR17, VAR4))
break;
VAR8++;
FUN1 (VAR13 > VAR8)
if (memcmp(VAR14 + VAR13*VAR15, VAR16 + VAR13*VAR17, VAR4))
break;
VAR13--;
VAR2 = VAR13 + 1 - VAR8;
VAR4 = VAR12 + 1 - VAR7;
FUN2(VAR3, VAR18,"%dx%d VAR19 VAR20 FUN3 (%d;%d) [VAR21:%dx%d]\n",
VAR4, VAR2, VAR7, VAR8, VAR3->VAR4, VAR3->VAR2);
FUN4(VAR22, VAR7);
FUN4(VAR22, VAR8);
FUN4(VAR22, VAR4);
FUN4(VAR22, VAR2);
if (VAR23 && VAR9 < 0)
VAR9 = FUN5(VAR16 + VAR8*VAR17 + VAR7,
VAR17, VAR4, VAR2);
FUN6(VAR10->VAR24, VAR10->VAR16, 2 * VAR4 * VAR2,
VAR25 = VAR16 + VAR8*VAR17 + VAR7;
if (VAR23)
for (VAR6 = 0; VAR6 < VAR2; VAR6++)
memcpy(VAR10->VAR26, VAR25, VAR4);
VAR1 += FUN7(VAR10->VAR24, VAR10->VAR26, VAR4);
VAR25 += VAR17;
else
for (VAR6 = 0; VAR6 < VAR2; VAR6++)
VAR1 += FUN7(VAR10->VAR24, VAR25, VAR4);
VAR25 += VAR17;
return 0;
static VAR27 int FUN8(CLASS1 *VAR3)
VAR10->VAR24 = FUN9(VAR28);
VAR10->VAR16 = FUN10(VAR3->VAR4*VAR3->VAR2*2);
VAR10->VAR26 = FUN10(VAR3->VAR4);
if (!VAR10->VAR26 || !VAR10->VAR16 || !VAR10->VAR24)
return FUN11(VAR29);
static int FUN12(CLASS1 *VAR3)
CLASS2 *VAR10 = VAR3->VAR30;
FUN13(&VAR10->VAR24);
FUN13(&VAR10->VAR16);
FUN14(&VAR10->VAR31);
FUN13(&VAR10->VAR26);
return 0;
