FUN1 (*VAR1)(VAR2 &) = VAR3;
static void *FUN2(void *)
if (!VAR4.FUN3("/system/VAR5/VAR6.VAR7")) {
bool FUN3(const char *VAR8)
VAR9 = open(VAR8, VAR10);
if (FUN4(VAR9, &VAR11) == -1 || VAR11.VAR12 < sizeof(VAR13)) {
VAR14 = (char *)FUN5(VAR15, VAR11.VAR12, VAR16, VAR17, VAR9, 0);
if (!VAR4.FUN3("/system/VAR5/VAR6.VAR7")) {
VAR18 VAR19, VAR20, VAR21;
FUN6 ((VAR22 = VAR4.FUN7(VAR22))) {
VAR22 = (CLASS1 *)(VAR14 + FUN8(VAR23->VAR24));
!VAR22->FUN9())
if (((char *)VAR22 + VAR22->FUN10()) > VAR25 ||
return VAR22;
FUN6 ((VAR22 = VAR4.FUN7(VAR22))) {
VAR26.FUN11(VAR27->FUN12(), VAR22->FUN13());
return FUN8(VAR28);
VAR26.FUN11(VAR27->FUN12(), VAR22->FUN13());
const char *VAR29 = VAR26.FUN14();
VAR30 = strstr(VAR29, "\n");
VAR2 VAR31;
sscanf(VAR29, "%d %d %d", &VAR19, &VAR20, &VAR21) == 3) {
} else if (VAR31.FUN15(VAR29)) {
for (VAR32 VAR33 = 0; VAR33 < VAR34.FUN16(); VAR33++) {
VAR2 &VAR31 = VAR34[VAR33];
VAR31.VAR35.FUN17();
FUN1 &VAR36 = VAR1(VAR31);
FUN1 VAR3(VAR2 &VAR31)
return VAR31.VAR35.FUN18();
FUN1 &VAR36 = VAR1(VAR31);
strcpy(VAR36.VAR8, VAR37.FUN14());
