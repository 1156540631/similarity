static CLASS1 *FUN1(CLASS2 *VAR1)
VAR2[VAR3++] = FUN2(VAR4 -> VAR5,VAR4 -> VAR6,VAR7 -> VAR6) + VAR8;
char VAR9[1024];
VAR1 = VAR10[VAR11];
VAR12 = FUN1(VAR1);
VAR1 -> VAR13 -> VAR14 = VAR12 -> VAR13 -> VAR14;
if (!VAR15 -> VAR16 -> VAR17 || (FUN3(VAR15 -> VAR16 -> VAR17,VAR18 -> VAR17)) == (VAR19 -> VAR20) || !FUN4(VAR15 -> VAR16 -> VAR17,VAR18 -> VAR20,&VAR17)) {
if (!strcmp(VAR15 -> VAR16 -> VAR21,"avi")) {
if (VAR22 < 0 && FUN5(VAR12 -> VAR13 -> VAR23) >= FUN5(VAR12 -> VAR13 -> VAR24) && 0.5 / FUN5(VAR12 -> VAR13 -> VAR23) > FUN5(VAR12 -> VAR13 -> VAR6) && 0.5 / FUN5(VAR12 -> VAR13 -> VAR23) > FUN5(VAR18 -> VAR6) && FUN5(VAR12 -> VAR13 -> VAR6) < 1.0 / 500 && FUN5(VAR18 -> VAR6) < 1.0 / 500 || VAR22 == 2) {
if (!(VAR15 -> VAR16 -> VAR25 & 0002000) && strcmp(VAR15 -> VAR16 -> VAR21,"mov") && strcmp(VAR15 -> VAR16 -> VAR21,"mp4") && strcmp(VAR15 -> VAR16 -> VAR21,"3gp") && strcmp(VAR15 -> VAR16 -> VAR21,"3g2") && strcmp(VAR15 -> VAR16 -> VAR21,"psp") && strcmp(VAR15 -> VAR16 -> VAR21,"ipod") && strcmp(VAR15 -> VAR16 -> VAR21,"f4v")) {
VAR1 -> VAR13 -> VAR24 = VAR12 -> VAR13 -> VAR24;
VAR1 -> VAR26 = FUN6(VAR19 -> VAR20);
FUN7(VAR9,sizeof(VAR9),"FUN8 (VAR19 %s) VAR27 VAR28 for VAR29 VAR30 #%FUN21:%FUN21",FUN9(VAR1 -> VAR13 -> VAR19 -> VAR20),VAR1 -> VAR31,VAR1 -> VAR3);
int VAR32 = FUN10(VAR1 -> VAR33,VAR1 -> VAR26 -> VAR34);
VAR1 -> VAR33 = VAR1 -> VAR26 -> VAR34[VAR32];
VAR19 -> VAR35 = FUN11(VAR1 -> VAR36 -> VAR36 -> VAR37[0]);
VAR1 -> VAR33 = FUN12(VAR1 -> VAR36 -> VAR36);
VAR19 -> VAR38 = VAR1 -> VAR36 -> VAR36 -> VAR37[0] -> VAR39;
VAR19 -> VAR40 = VAR1 -> VAR36 -> VAR36 -> VAR37[0] -> VAR41;
VAR19 -> VAR42 = VAR1 -> VAR13 -> VAR42 = (VAR1 -> VAR43?FUN13((VAR1 -> VAR43 * (VAR19 -> VAR40) / (VAR19 -> VAR38)),255) : VAR1 -> VAR36 -> VAR36 -> VAR37[0] -> VAR42);
FUN14(VAR1 -> VAR44,VAR1,VAR1 -> VAR13 -> VAR19);
if (!strcmp(VAR1 -> VAR26 -> VAR21,"libx264")) {
VAR1 = VAR10[VAR11];
CLASS3 *VAR45 = ((void *)0);
if (VAR12 = FUN1(VAR1)) {
VAR1 -> VAR13 -> VAR19 -> VAR46 = (FUN15((VAR45 -> VAR47 + 1)));
memcpy((VAR1 -> VAR13 -> VAR19 -> VAR46),(VAR45 -> VAR46),(VAR45 -> VAR47));
VAR1 -> VAR13 -> VAR19 -> VAR47 = VAR45 -> VAR47;
if ((VAR48 = FUN16(VAR1 -> VAR13 -> VAR19,VAR19,&VAR1 -> VAR49)) < 0) {
if (VAR12 = FUN1(VAR1)) {
FUN7(VAR9,sizeof(VAR9),"VAR50 VAR51 VAR52 VAR53 for VAR29 VAR30 #%FUN21:%FUN21 - VAR54 VAR55 VAR56 VAR57 VAR58 VAR59, VAR60, VAR38 VAR61 VAR40",VAR1 -> VAR31,VAR1 -> VAR3);
FUN17(VAR1 -> VAR36 -> VAR36,(VAR1 -> VAR13 -> VAR19 -> VAR62));
FUN18((VAR1 -> VAR13 -> VAR19),&VAR1 -> VAR49);
if (VAR12 = FUN1(VAR1)) {
for (VAR11 = 0; VAR11 < VAR63; VAR11++) {
VAR15 = VAR64[VAR11] -> VAR65;
VAR15 -> VAR66 = VAR67;
if ((VAR48 = FUN19(VAR15,&VAR64[VAR11] -> VAR49)) < 0) {
if (FUN20(VAR48,VAR68,sizeof(VAR68)) < 0) {
VAR69 = (strerror(-VAR48));
FUN7(VAR9,sizeof(VAR9),"VAR70 VAR27 write VAR71 for VAR29 VAR72 #%FUN21 (VAR55 VAR19 VAR56 ?): %s",VAR11,VAR69);
if (strcmp(VAR15 -> VAR16 -> VAR21,"rtp")) {
if ((VAR48 = FUN19(VAR15,&VAR64[VAR11] -> VAR49)) < 0) {
char VAR68[128];
const char *VAR69 = VAR68;
if (FUN20(VAR48,VAR68,sizeof(VAR68)) < 0) {
VAR69 = (strerror(-VAR48));
FUN7(VAR9,sizeof(VAR9),"VAR70 VAR27 write VAR71 for VAR29 VAR72 #%FUN21 (VAR55 VAR19 VAR56 ?): %s",VAR11,VAR69);
static CLASS1 *FUN1(CLASS2 *VAR1)
if (VAR12 = FUN1(VAR1)) {
static CLASS1 *FUN1(CLASS2 *VAR1)
if (VAR12 = FUN1(VAR1)) {
static CLASS1 *FUN1(CLASS2 *VAR1)
if (VAR12 = FUN1(VAR1)) {
static CLASS1 *FUN1(CLASS2 *VAR1)
if (VAR12 = FUN1(VAR1)) {
FUN7(VAR9,sizeof(VAR9),"VAR50 VAR51 VAR52 VAR53 for VAR29 VAR30 #%FUN21:%FUN21 - VAR54 VAR55 VAR56 VAR57 VAR58 VAR59, VAR60, VAR38 VAR61 VAR40",VAR1 -> VAR31,VAR1 -> VAR3);
FUN7(VAR9,sizeof(VAR9),"VAR70 VAR27 write VAR71 for VAR29 VAR72 #%FUN21 (VAR55 VAR19 VAR56 ?): %s",VAR11,VAR69);
static void FUN14(char *VAR73,CLASS2 *VAR1,CLASS3 *VAR7)
FUN14(VAR1 -> VAR44,VAR1,VAR1 -> VAR13 -> VAR19);
if (VAR12 = FUN1(VAR1)) {
