return FUN1(VAR1);
return sizeof(VAR2) + FUN2(VAR3) +
const char *VAR4;
(VAR2 *)(VAR4 + FUN1(VAR5->VAR6));
const VAR2 * VAR7 =
if (((char *)VAR7 + VAR7->FUN3()) > (char *)VAR8)
FUN2(VAR9) + FUN4();
if (((char *)VAR7 + VAR7->FUN3()) > (char *)VAR8)
return VAR10;
return VAR7;
VAR11 = VAR12.FUN5(VAR5);
VAR13.FUN6(VAR11->FUN7(), VAR5->FUN4());
return VAR7 + FUN2(VAR3) + FUN2(VAR9);
return sizeof(VAR14) + FUN2(VAR3) +
FUN2(VAR9) + FUN2(VAR15);
VAR5 = (VAR14 *)((char *)VAR16 + VAR16->FUN3());
VAR5 = (VAR14 *)(VAR4 + FUN1(VAR8->VAR17));
!VAR5->FUN8())
if (((char *)VAR5 + VAR5->FUN3()) > VAR18 ||
return VAR10;
return VAR5;
FUN9 ((VAR5 = VAR12.FUN10(VAR5))) {
VAR13.FUN6(VAR11->FUN7(), VAR5->FUN4());
return FUN1(VAR19);
return VAR7;
VAR11 = VAR12.FUN5(VAR5);
VAR13.FUN6(VAR11->FUN7(), VAR5->FUN4());
VAR20 VAR21 = FUN11(VAR22,
VAR10, VAR10, VAR10);
VAR23 VAR24 = FUN12(VAR21);
if (FUN13(FUN14(VAR21))) {
FUN15(VAR21, &VAR25, VAR26);
FUN16(VAR21, 1, VAR27,
FUN16(VAR21, 1, VAR28, 1);
FUN17(VAR21, VAR24);
VAR29 = (VAR30 == FUN18(VAR21, VAR24, &VAR31));
VAR32 = FUN19(VAR21, VAR24);
VAR33 = FUN20(VAR21, VAR24);
VAR34 = 4;
VAR34 = 3;
VAR34 = 2;
VAR35 VAR13;
VAR13.FUN6(VAR11->FUN7(), VAR5->FUN4());
const char *VAR36 = VAR13.FUN21();
VAR37<VAR38> VAR39;
VAR40 = strstr(VAR36, "\n");
} FUN9 (VAR40 && *(VAR36 = VAR40 + 1));
VAR40 = strstr(VAR36, "\n");
VAR38 VAR41;
sscanf(VAR36, "%d %d %d", &VAR32, &VAR33, &VAR42) == 3) {
} else if (sscanf(VAR36, "VAR43 %d %d %s",
&VAR41.VAR44, &VAR41.VAR45, VAR41.VAR46)) {
VAR39.FUN22(VAR41);
for (VAR47 VAR48 = 0; VAR48 < VAR39.FUN23(); VAR48++) {
for (VAR47 VAR48 = 0; VAR48 < VAR39.FUN23(); VAR48++) {
VAR38 &VAR41 = VAR39[VAR48];
VAR49 &VAR50 = VAR41.VAR51[VAR52];
VAR50.FUN24(VAR53);
VAR54 = (char *)malloc(VAR32 * (VAR33 + 1) * VAR34);
