VAR1 FUN1(char *VAR2,VAR1 VAR3,unsigned int VAR4)
VAR5 = FUN2(VAR2,VAR3,(((VAR4 & 0xff) >= 48 && (VAR4 & 0xff) <= '' || (VAR4 & 0xff) >= '' && (VAR4 & 0xff) <= '' || (VAR4 & 0xff) >= '' && (VAR4 & 0xff) <= '' || ((VAR4 & 0xff) == '.' || (VAR4 & 0xff) == 32 || (VAR4 & 0xff) == '-' || (VAR4 & 0xff) == '')?"%c" : "[%d]")),VAR4 & 0xff);
VAR2 += VAR5;
VAR4 >>= 8;
const char *VAR6 = ((void *)0);
char VAR7[32];
FUN1(VAR7,sizeof(VAR7),VAR8 -> VAR4);
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2)," (%s / 0x%04X)",VAR7,VAR8 -> VAR4);
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2),", %s",FUN3(VAR8 -> VAR9));
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2)," (%d VAR10)",VAR8 -> VAR11);
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2),", VAR12=%d-%d",VAR8 -> VAR13,VAR8 -> VAR14);
return ((void *)0);
VAR6 = FUN4(VAR15,VAR8 -> VAR6);
return ((void *)0);
VAR2[0] ^= '' ^ '';
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2)," (%s)",VAR6);
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2)," (%s / 0x%04X)",VAR7,VAR8 -> VAR4);
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2),", %s",FUN3(VAR8 -> VAR9));
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2),", %dx%d",VAR8 -> VAR16,VAR8 -> VAR17);
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2)," [VAR18 %d:%d VAR19 %d:%d]",VAR8 -> VAR20 . VAR21,VAR8 -> VAR20 . VAR22,VAR23 . VAR21,VAR23 . VAR22);
int VAR24 = (FUN5(VAR8 -> VAR25 . VAR21,VAR8 -> VAR25 . VAR22));
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2),", %d/%d",VAR8 -> VAR25 . VAR21 / VAR24,VAR8 -> VAR25 . VAR22 / VAR24);
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2),", VAR12=%d-%d",VAR8 -> VAR13,VAR8 -> VAR14);
void FUN6(char *VAR2,int VAR3,CLASS1 *VAR8,int VAR26)
FUN2(VAR2,VAR3,"%s: %s%s",(VAR27?VAR27 : "unknown"),VAR28,(VAR8 -> VAR29?" (VAR30)" : ""));
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2),", VAR12=%d-%d",VAR8 -> VAR13,VAR8 -> VAR14);
