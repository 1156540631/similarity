VAR1 = FUN1(VAR2);
register CLASS1 *VAR3;
return (VAR3);
VAR2->VAR4 = VAR5.VAR6;
VAR2->VAR7 = VAR1->VAR7;
VAR8 += FUN2(VAR9, VAR2, VAR10, VAR11 + 1, VAR12);
(void) FUN2(VAR13, VAR14, &VAR12->VAR15, 0, VAR12);
CLASS1 *VAR2;
VAR16 = FUN3(VAR3->VAR17, VAR18, VAR3, VAR10, VAR11, VAR12);
CLASS1 **VAR10;
VAR16 = FUN3(VAR3->VAR17, VAR18, VAR3, VAR10, VAR11, VAR12);
CLASS1 **VAR10;
VAR8 += FUN2(VAR9, VAR2, VAR10, VAR11 + 1, VAR12);
(void) FUN2(VAR13, VAR14, &VAR12->VAR15, 0, VAR12);
CLASS1 **VAR10;
char *VAR19 = VAR12->VAR20;
VAR12->VAR21 = FUN4("VAR22: VAR23 VAR24 VAR25");
VAR12->VAR26++;
VAR12->VAR26++;
fprintf(VAR12->VAR27,
register CLASS2 *VAR12;
VAR3 = FUN5(VAR3, VAR10, VAR11, VAR12);
VAR12->VAR20 = VAR19;
register CLASS2 *VAR12;
if (FUN6(VAR28, VAR12->VAR29))
VAR12->VAR29 |= VAR30;
register CLASS2 *VAR12;
(VAR31) 0, VAR12);
FUN7(VAR3, VAR10, VAR11, VAR12);
if (FUN8(VAR3, VAR10, VAR11, VAR12) == VAR32)
FUN9(VAR3, VAR10, VAR11 + 1, VAR12);
(VAR31) 0, VAR12);
FUN10(VAR3, VAR10, VAR11, VAR12);
VAR3 = FUN5(VAR3, VAR10, VAR11, VAR12);
register CLASS2 *VAR12;
VAR12->VAR20 = VAR3->VAR33;
VAR12->VAR34 = VAR3->VAR33;
VAR12->VAR34 = "";
VAR12->VAR26++;
CLASS2 *VAR12;
char *VAR19 = VAR12->VAR20;
VAR19, FUN11(VAR9, 203));
VAR12->VAR20 = VAR19;
VAR16 = FUN3(VAR3->VAR17, VAR18, VAR3, VAR10, VAR11, VAR12);
CLASS2 *VAR12;
if (FUN6(VAR28, VAR12->VAR29))
VAR12->VAR20 = VAR35;
VAR8 += FUN2(VAR9, VAR2, VAR10, VAR11 + 1, VAR12);
register CLASS2 *VAR12;
(void) FUN2(VAR13, VAR14, &VAR12->VAR15, 0, VAR12);
register CLASS2 *VAR12;
char VAR9[VAR36 + 1];
FUN12(VAR2, VAR18);
strchr(VAR37, '<') != VAR35 || strchr(VAR37, '(') != VAR35))
(strchr(VAR37, ',') != VAR35 || strchr(VAR37, ';') != VAR35 ||
VAR12->VAR29 &= ~VAR38;
VAR3 = VAR3->VAR39;
return (VAR3);
VAR1 = FUN1(VAR2);
VAR2->VAR7 = VAR1->VAR7;
VAR8 += FUN2(VAR9, VAR2, VAR10, VAR11 + 1, VAR12);
VAR40 = ' ';
if (!FUN6(VAR38, VAR12->VAR29) || VAR2 != VAR35)
VAR40 = ',';
VAR41 = VAR35;
VAR42 = strlen(VAR37) + 1;
if (VAR42 <= sizeof VAR9)
VAR43 = VAR9;
VAR43 = FUN13(VAR42);
strcpy(VAR43, FUN14(VAR37, VAR18, VAR44));
for (VAR13 = VAR43; *VAR13 != '\'; )
auto char *VAR45;
FUN15 ((isascii(*VAR13) && isspace(*VAR13)) || *VAR13 == ',')
VAR13++;
VAR13 = VAR45;
VAR46 = FUN16(VAR3, VAR12);
VAR3 = FUN17(VAR13, VAR14, VAR47, VAR40, &VAR45, VAR12);
if (FUN18(VAR2, VAR3))
VAR46 = FUN16(VAR3, VAR12);
FUN12(VAR3, VAR18);
VAR3->VAR48 = VAR2->VAR48;
VAR41 = VAR3;
VAR3->VAR49 = VAR41;
if (FUN18(VAR2, VAR3))
FUN12(VAR2, VAR18);
VAR3->VAR39 = VAR2;
if (FUN18(VAR2, VAR3))
VAR2->VAR50 |= VAR51;
VAR3->VAR50 |= VAR52;
VAR3->VAR53 = VAR2->VAR53;
VAR3->VAR50 &= ~VAR54;
VAR3->VAR50 |= VAR2->VAR50 & VAR54;
VAR41 = VAR3;
VAR41 = VAR3->VAR49;
register CLASS1 *VAR3 = VAR41;
FUN7(VAR3, VAR10, VAR11, VAR12);
if (FUN8(VAR3, VAR10, VAR11, VAR12) == VAR32)
FUN9(VAR3, VAR10, VAR11 + 1, VAR12);
FUN10(VAR3, VAR10, VAR11, VAR12);
FUN12(*VAR10, VAR44);
register CLASS1 **VAR10;
VAR3 = FUN5(VAR3, VAR10, VAR11, VAR12);
register CLASS1 *VAR3;
register CLASS1 **VAR10;
bool VAR55 = FUN6(VAR52, VAR3->VAR50);
VAR3->VAR50 |= VAR56;
FUN12(VAR3, VAR18);
VAR42 = strlen(VAR3->VAR17);
(void) strcpy(VAR9, VAR3->VAR17);
VAR3->VAR50 |= VAR57;
VAR3->VAR58 = "5.7.1";
else if (FUN6(VAR59, VAR3->VAR39->VAR50))
VAR3->VAR50 |= VAR57;
VAR3->VAR58 = "5.7.1";
VAR3->VAR39->VAR7, VAR60);
else if (FUN6(VAR61, VAR3->VAR39->VAR50))
VAR3->VAR50 |= VAR57;
VAR3->VAR58 = "5.7.1";
VAR3->VAR39->VAR33);
for (VAR62 = VAR10; (VAR63 = *VAR62) != VAR35; VAR62 = &VAR63->VAR49)
if (FUN18(VAR63, VAR3))
VAR3 = VAR63;
if (FUN18(VAR63, VAR3))
FUN12(VAR63, VAR18);
if (!FUN6(VAR56, VAR63->VAR50))
if (!FUN6(VAR52, VAR3->VAR50))
VAR63->VAR50 |= VAR3->VAR50;
else if (FUN6(VAR51, VAR63->VAR50))
VAR63->VAR50 |= VAR3->VAR50 & ~VAR52;
VAR3 = VAR63;
VAR3->VAR49 = VAR35;
printf("VAR64 VAR65 %s\n", VAR3->VAR17);
if (FUN6(VAR52|VAR57|VAR66, VAR3->VAR50))
VAR3->VAR50 |= VAR52;
VAR2->VAR67 = VAR5.VAR68;
VAR2->VAR7 = VAR1->VAR7;
VAR69 = FUN19(VAR5.VAR6);
VAR2->VAR7 = FUN4(VAR69->VAR70);
CLASS1 *VAR2;
FUN12(VAR2, VAR18);
VAR16 = FUN3(VAR3->VAR17, VAR18, VAR3, VAR10, VAR11, VAR12);
CLASS1 *VAR2;
FUN12(VAR2, VAR18);
VAR1 = FUN1(VAR2);
register CLASS1 *VAR3;
FUN15 (VAR3 != VAR35 && !FUN6(VAR71, VAR3->VAR50))
register CLASS1 *VAR3;
return (VAR3);
VAR1 = FUN1(VAR2);
VAR2->VAR50 |= VAR72;
VAR2->VAR50 |= VAR71;
VAR2->VAR50 |= VAR1->VAR50 & VAR59;
VAR2->VAR50 |= VAR59;
VAR2->VAR50 |= VAR59;
VAR2->VAR50 |= VAR61;
VAR2->VAR50 |= VAR66;
VAR2->VAR50 |= VAR61;
VAR2->VAR50 &= ~VAR51;
VAR8 += FUN2(VAR9, VAR2, VAR10, VAR11 + 1, VAR12);
if (VAR8 > 0 && !FUN6(VAR51, VAR2->VAR50))
VAR2->VAR50 |= VAR52;
CLASS1 *VAR2;
VAR16 = FUN3(VAR3->VAR17, VAR18, VAR3, VAR10, VAR11, VAR12);
CLASS1 *VAR2;
VAR1 = FUN1(VAR2);
register CLASS1 *VAR3;
VAR1 = FUN1(VAR2);
CLASS1 *VAR2;
VAR16 = FUN3(VAR3->VAR17, VAR18, VAR3, VAR10, VAR11, VAR12);
FUN20("VAR73 VAR74 %s", VAR3->VAR17);
VAR16 = FUN3(VAR3->VAR17, VAR18, VAR3, VAR10, VAR11, VAR12);
char *VAR75;
CLASS3 *volatile VAR76 = VAR35;
char VAR9[VAR77];
printf("FUN3(%s)\n", VAR75);
VAR78 = FUN21(VAR75, VAR79, VAR80, VAR81, VAR82, VAR83, VAR35);
VAR76 = fopen(VAR75, "r");
if (FUN22(fileno(VAR76), &VAR5) < 0)
VAR84 = FUN23(fileno(VAR76));
FUN15 (fgets(VAR9, sizeof VAR9, VAR76) != VAR35)
register char *VAR13 = strchr(VAR9, '\');
VAR85 ? "VAR85" : "sending", VAR9);
VAR8 += FUN2(VAR9, VAR2, VAR10, VAR11 + 1, VAR12);
register char **VAR86;
FUN15 ((VAR13 = *VAR86++) != VAR35)
(void) FUN2(VAR13, VAR14, &VAR12->VAR15, 0, VAR12);
char *VAR37;
printf("VAR87: %s\n   VAR2=", VAR37);
