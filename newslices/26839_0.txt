static char VAR1[VAR2 + 1];
VAR3++;
VAR4 = VAR5 = &VAR1[sizeof(VAR1) - 1];
VAR6 = VAR7 = VAR1;
VAR8 = VAR6;
VAR9 = VAR10 = VAR3;
FUN1 ((VAR11 = *VAR9++) != '<')
FUN1 ((VAR11 = *VAR9++) != '\')
FUN2('"');
FUN2(VAR11);
VAR4++;
FUN2(VAR11);
FUN2(' ');
FUN2(VAR12);
FUN2('');
FUN2(VAR11);
if ((VAR11 = *VAR9++) == '\')
VAR9++;
VAR9--;
FUN2(VAR11);
VAR4--;
VAR4++;
VAR4--;
FUN2(' ');
FUN2(VAR11);
VAR4++;
FUN2(VAR11);
FUN2(*VAR9);
VAR9++;
VAR6 = VAR7;
FUN2('"');
VAR9++;
for (VAR13 = VAR10; VAR13 < VAR9; )
VAR11 = *VAR13++;
FUN2('\\');
FUN2(VAR11);
FUN2(VAR11);
VAR6--;
FUN2('"');
FUN1 ((VAR11 = *VAR9++) != ':')
FUN2(VAR11);
VAR9++;
FUN2(*VAR9);
VAR7 = VAR6;
FUN2(VAR11);
VAR4--;
VAR6 = VAR7;
FUN2('"');
FUN2('\\');
FUN2(VAR11);
FUN2(VAR11);
#VAR14 FUN2(VAR11)                   \
do                          \
{                           \
printf ("VAR6-VAR8 = %d   VAR4-VAR8=%d\n", (VAR6-VAR8), (VAR4-VAR8)); \
if (VAR15)               \
*VAR6++ = (VAR11);                \
else                        \
goto VAR16;               \
} FUN1 (0)
