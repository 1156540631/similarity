static void FUN1(char *VAR1,CLASS1 *VAR2,CLASS2 *VAR3)
int VAR4 = 1;
CLASS3 *VAR5;
VAR6 = VAR4;
VAR5 = (FUN2(sizeof(( *VAR5)) * VAR6));
VAR7 = VAR1;
char *VAR8 = strchr(VAR7,',');
*(VAR8++) = 0;
if (!memcmp(VAR7,"VAR13",8)) {
if (VAR9 -> VAR10 > (2147483647 - VAR6) || !(VAR5 = (FUN3(VAR5,(VAR6 += VAR9 -> VAR10 - 1),sizeof(( *VAR5)))))) {
VAR11 = (VAR7[8]?FUN4("force_key_frames",(VAR7 + 8),1) : 0);
CLASS4 *VAR12 = VAR9 -> VAR13[VAR14];
VAR5[VAR15++] = FUN5(VAR12 -> VAR16,VAR12 -> VAR17,VAR3 -> VAR17) + VAR11;
if (VAR9 -> VAR10 > (2147483647 - VAR6) || !(VAR5 = (FUN3(VAR5,(VAR6 += VAR9 -> VAR10 - 1),sizeof(( *VAR5)))))) {
VAR7 = VAR8;
char *VAR8 = strchr(VAR7,',');
if (!memcmp(VAR7,"VAR13",8)) {
VAR11 = (VAR7[8]?FUN4("force_key_frames",(VAR7 + 8),1) : 0);
VAR5[VAR15++] = FUN5(VAR12 -> VAR16,VAR12 -> VAR17,VAR3 -> VAR17) + VAR11;
FUN6(VAR5,VAR6,sizeof(( *VAR5)),VAR18);
VAR2 -> VAR19 = VAR5;
VAR20[VAR14 + VAR21 -> VAR22] -> VAR16 = FUN7();
for (VAR23 = 0; VAR23 < VAR24; VAR23++) {
VAR2 = VAR25[VAR23];
VAR26 = FUN8(VAR2);
return VAR20[VAR2 -> VAR27];
return ((void *)0);
VAR26 = FUN8(VAR2);
VAR2 -> VAR28 -> VAR29 = VAR26 -> VAR28 -> VAR29;
if (VAR30 < 0 && FUN9(VAR26 -> VAR28 -> VAR31) >= FUN9(VAR26 -> VAR28 -> VAR32) && 0.5 / FUN9(VAR26 -> VAR28 -> VAR31) > FUN9(VAR26 -> VAR28 -> VAR17) && 0.5 / FUN9(VAR26 -> VAR28 -> VAR31) > FUN9(VAR33 -> VAR17) && FUN9(VAR26 -> VAR28 -> VAR17) < 1.0 / 500 && FUN9(VAR33 -> VAR17) < 1.0 / 500 || VAR30 == 2) {
VAR2 -> VAR28 -> VAR32 = VAR26 -> VAR28 -> VAR32;
VAR2 -> VAR34 = FUN10(VAR35 -> VAR36);
FUN11(VAR37,sizeof(VAR37),"FUN12 (VAR35 %s) VAR38 VAR39 for VAR40 VAR41 #%d:%d",FUN13(VAR2 -> VAR28 -> VAR35 -> VAR36),VAR2 -> VAR42,VAR2 -> VAR15);
VAR2 -> VAR43 = 1;
VAR2 -> VAR44 = FUN14(VAR2 -> VAR45 -> VAR45);
VAR2 -> VAR44 = VAR26 -> VAR46;
int VAR47 = FUN15(VAR2 -> VAR44,VAR2 -> VAR34 -> VAR48);
VAR2 -> VAR44 = VAR2 -> VAR34 -> VAR48[VAR47];
VAR35 -> VAR49 = FUN16(VAR2 -> VAR45 -> VAR45 -> VAR50[0]);
VAR35 -> VAR17 = FUN17(VAR2 -> VAR44);
VAR35 -> VAR51 = VAR2 -> VAR45 -> VAR45 -> VAR50[0] -> VAR52;
VAR35 -> VAR53 = VAR2 -> VAR45 -> VAR45 -> VAR50[0] -> VAR54;
VAR35 -> VAR55 = VAR2 -> VAR28 -> VAR55 = (VAR2 -> VAR56?FUN18((VAR2 -> VAR56 * (VAR35 -> VAR53) / (VAR35 -> VAR51)),255) : VAR2 -> VAR45 -> VAR45 -> VAR50[0] -> VAR55);
if (!strncmp((VAR2 -> VAR57),"VAR58:",5)) {
FUN1(VAR2 -> VAR57,VAR2,VAR2 -> VAR28 -> VAR35);
VAR59 = FUN19(VAR26,VAR2);
FUN1(VAR2 -> VAR57,VAR2,VAR2 -> VAR28 -> VAR35);
char VAR60[1024];
FUN11(VAR60,sizeof(VAR60),"%s-%d.log",(VAR2 -> VAR61?VAR2 -> VAR61 : "ffmpeg2pass"),VAR23);
static void FUN1(char *VAR1,CLASS1 *VAR2,CLASS2 *VAR3)
FUN1(VAR2 -> VAR57,VAR2,VAR2 -> VAR28 -> VAR35);
static void FUN1(char *VAR1,CLASS1 *VAR2,CLASS2 *VAR3)
FUN1(VAR2 -> VAR57,VAR2,VAR2 -> VAR28 -> VAR35);
static void FUN1(char *VAR1,CLASS1 *VAR2,CLASS2 *VAR3)
FUN1(VAR2 -> VAR57,VAR2,VAR2 -> VAR28 -> VAR35);
FUN11(VAR60,sizeof(VAR60),"%s-%d.log",(VAR2 -> VAR61?VAR2 -> VAR61 : "ffmpeg2pass"),VAR23);
static CLASS5 *FUN8(CLASS1 *VAR2)
VAR26 = FUN8(VAR2);
FUN11(VAR60,sizeof(VAR60),"%s-%d.log",(VAR2 -> VAR61?VAR2 -> VAR61 : "ffmpeg2pass"),VAR23);
