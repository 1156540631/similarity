int VAR1;
int VAR2 = 0, VAR3 = VAR4->VAR3, VAR5 = VAR4->VAR5, VAR6, VAR7;
int VAR8 = 0, VAR9 = 0, VAR10 = VAR11->VAR12;
int VAR13 = VAR4->VAR5  - 1,
VAR14 = VAR4->VAR3 - 1;
FUN1 (VAR9 < VAR14)
if (memcmp(VAR15 + VAR9*VAR16, VAR17 + VAR9*VAR18, VAR5))
break;
VAR9++;
FUN1 (VAR14 > VAR9)
if (memcmp(VAR15 + VAR14*VAR16, VAR17 + VAR14*VAR18, VAR5))
break;
VAR14--;
VAR3 = VAR14 + 1 - VAR9;
VAR5 = VAR13 + 1 - VAR8;
FUN2(VAR4, VAR19,"%dx%d VAR20 VAR21 FUN3 (%d;%d) [VAR22:%dx%d]\n",
VAR5, VAR3, VAR8, VAR9, VAR4->VAR5, VAR4->VAR3);
FUN4(VAR23, VAR8);
FUN4(VAR23, VAR9);
FUN4(VAR23, VAR5);
FUN4(VAR23, VAR3);
if (VAR24 && VAR10 < 0)
VAR10 = FUN5(VAR17 + VAR9*VAR18 + VAR8,
VAR18, VAR5, VAR3);
FUN6(VAR11->VAR25, VAR11->VAR17, VAR11->VAR1,
12, VAR26, VAR27);
VAR28 = VAR17 + VAR9*VAR18 + VAR8;
if (VAR24)
for (VAR7 = 0; VAR7 < VAR3; VAR7++)
memcpy(VAR11->VAR29, VAR28, VAR5);
VAR2 += FUN7(VAR11->VAR25, VAR11->VAR29, VAR5);
VAR28 += VAR18;
else
for (VAR7 = 0; VAR7 < VAR3; VAR7++)
VAR2 += FUN7(VAR11->VAR25, VAR28, VAR5);
VAR28 += VAR18;
return 0;
static VAR30 int FUN8(CLASS1 *VAR4)
VAR11->VAR25 = FUN9(VAR31);
VAR11->VAR1 = VAR4->VAR5*VAR4->VAR3*2 + 1000;
VAR11->VAR17 = FUN10(VAR11->VAR1);
VAR11->VAR29 = FUN10(VAR4->VAR5);
if (!VAR11->VAR29 || !VAR11->VAR17 || !VAR11->VAR25)
return FUN11(VAR32);
static int FUN12(CLASS1 *VAR4)
CLASS2 *VAR11 = VAR4->VAR33;
FUN13(&VAR11->VAR25);
FUN13(&VAR11->VAR17);
VAR11->VAR1 = 0;
FUN14(&VAR11->VAR34);
FUN13(&VAR11->VAR29);
return 0;
