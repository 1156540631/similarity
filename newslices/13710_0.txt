VAR1 VAR2;
VAR1 VAR3, VAR4;
VAR5 VAR6 = VAR7;
VAR8 = VAR9->FUN1(VAR10, VAR11, &VAR2);
if (FUN2(VAR8)) return VAR8;
VAR12 = VAR2 + VAR13;
char *VAR14 = (char *) FUN3(VAR12 + 1);
if (!VAR14)
return VAR15;
for (VAR3 = 0, VAR4 = 0; VAR3 < VAR11;)
VAR2 = VAR12 - VAR4;
FUN4(VAR2 >= 0, "VAR16 VAR17 VAR18 write");
VAR8 = VAR9->FUN5(&VAR10[VAR3], &VAR19, &VAR14[VAR4], &VAR2);
VAR3 += VAR19 ? VAR19 : 1;
VAR4 += VAR2;
VAR14[VAR4] = '\';
VAR8 = VAR9->FUN6(&VAR14[VAR4], &VAR2);
if (FUN7(VAR8))
VAR4 += VAR2;
VAR14[VAR4] = '\';
VAR8 = FUN8(VAR20, &VAR14, &VAR12, &VAR4, VAR2);
VAR21::FUN8(VAR22 VAR23, char **VAR24, VAR1 *VAR12, VAR1 *VAR25, VAR1 VAR26)
char VAR27[256];
VAR5 VAR8 = FUN9(VAR23, VAR27, 256);
if (FUN7(VAR8))
VAR1 VAR28 = (VAR1) FUN10(VAR27);
if ((VAR28 + VAR26) >= (*VAR12 - *VAR25))
VAR1 VAR29 = VAR28 + VAR13;
VAR30 = FUN11(VAR30);
static char * FUN11(const char * VAR30)
char *VAR30 = (char *) FUN12(*VAR24, *VAR12 + VAR29 + 1);
return VAR30;
VAR30 = FUN11(VAR30);
if (VAR30)
*VAR12 += VAR29;
*VAR24 = VAR30;
else
*VAR24 = VAR31;
*VAR12 =0;
return VAR15;
memcpy((*VAR24 + *VAR25), VAR27, VAR28);
