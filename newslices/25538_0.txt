FUN1(VAR1);
if (CLASS1* VAR2 = VAR3->FUN2(VAR1))
return VAR2->FUN3();
return VAR4;
bool VAR5 = FUN4(this);
if (!VAR6 && FUN5(VAR1, VAR7.FUN6(), VAR5))
FUN1(FUN7(VAR4, VAR1, VAR4));
if (CLASS1* VAR8 = VAR3->FUN2(VAR1, VAR5))
return VAR8->FUN3();
return VAR4;
return VAR9.FUN8();
VAR10 VAR11;
VAR12 = FUN9();
if (VAR12.FUN10() > 0) {
VAR11 += VAR12;
VAR12 = FUN11(FUN12());
if (VAR12.FUN10() > 0) {
if (VAR11.FUN10() > 0)
VAR11 += "; ";
VAR11 += "VAR13=";
VAR11 += VAR12;
VAR12 = FUN11(VAR14);
strncpy(VAR15, VAR11.FUN13().FUN14(), FUN10 - 1);
void VAR16::FUN15(char* VAR15, unsigned FUN10) const
if (VAR11.FUN10() > 0)
VAR11 += "; ";
VAR11 += "class=";
VAR11 += VAR12;
strncpy(VAR15, VAR11.FUN13().FUN14(), FUN10 - 1);
const VAR17& VAR16::FUN11(const FUN7& VAR1) const
if (CLASS1* VAR2 = VAR3->FUN2(VAR1))
return VAR2->FUN3();
VAR12 = FUN11(FUN12());
if (VAR12.FUN10() > 0) {
VAR11 += VAR12;
VAR12 = FUN11(VAR14);
if (VAR12.FUN10() > 0) {
VAR11 += VAR12;
strncpy(VAR15, VAR11.FUN13().FUN14(), FUN10 - 1);
const VAR17& VAR16::FUN11(const VAR10& VAR1) const
if (!VAR6 && FUN5(VAR1, VAR7.FUN6(), VAR5))
if (CLASS1* VAR8 = VAR3->FUN2(VAR1, VAR5))
return VAR8->FUN3();
VAR12 = FUN11(FUN12());
if (VAR12.FUN10() > 0) {
VAR11 += VAR12;
strncpy(VAR15, VAR11.FUN13().FUN14(), FUN10 - 1);
