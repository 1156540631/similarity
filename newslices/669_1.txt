static int FUN1(CLASS1 *VAR1, void *VAR2,
const CLASS2 *VAR3 = VAR4->VAR2;
int VAR5 = 128;
VAR6 = FUN2(&VAR3[0]);
VAR7  = FUN2(&VAR3[2]);
VAR3 += 4;
VAR8->VAR9.VAR10 = VAR6;
if ((VAR11 = VAR1->FUN3(VAR1, &VAR8->VAR9)) < 0) {
VAR12     = VAR8->VAR9.VAR2[0];
VAR13 = *VAR3 & 0x3F;
case 0:  VAR14 = 4;                              break;
case 2:  VAR14 = (VAR13 & 0x20) ? 1 : VAR13 + 1; break;
default: VAR14 = VAR13 + 1;                      break;
VAR15 = *VAR3++;
VAR5 = FUN4(VAR5);
*VAR12++ = VAR5;
VAR5 += ((VAR15 >> 2) & 0x3) - 2;
VAR5 = FUN4(VAR5);
*VAR12++ = VAR5;
VAR5 += ((VAR15 >> 4) & 0x3) - 2;
VAR5 = FUN4(VAR5);
*VAR12++ = VAR5;
VAR5 +=  (VAR15 >> 6)        - 2;
VAR5 = FUN4(VAR5);
*VAR12++ = VAR5;
VAR15 = *VAR3++;
VAR13 = *VAR3 & 0x3F;
case 0:  VAR14 = 4;                              break;
case 1:  VAR14 = 2;                              break;
case 2:  VAR14 = (VAR13 & 0x20) ? 1 : VAR13 + 1; break;
default: VAR14 = VAR13 + 1;                      break;
VAR15 = *VAR3++;
VAR5 += ( VAR15       & 0x3) - 2;
VAR5 = FUN4(VAR5);
*VAR12++ = VAR5;
VAR5 += VAR16[VAR15 & 0xF];
VAR5 = FUN4(VAR5);
*VAR12++ = VAR5;
VAR5 += VAR16[VAR15 >> 4];
VAR5 = FUN4(VAR5);
*VAR12++ = VAR5;
VAR17 = VAR13;
VAR17 <<= 3;
VAR5 += VAR17 >> 3;
VAR5 = FUN4(VAR5);
*VAR12++ = VAR5;
memcpy(VAR12, VAR3, VAR14);
VAR12 += VAR14;
memcpy(VAR12, VAR3, VAR14);
VAR3     += VAR14;
memcpy(VAR12, VAR3, VAR14);
VAR5 = VAR3[-1];
VAR5 = FUN4(VAR5);
*VAR12++ = VAR5;
memcpy(VAR12, VAR3, VAR14);
memset(VAR12, VAR5, VAR14);
VAR12 += VAR14;
memcpy(VAR12, VAR3, VAR14);
