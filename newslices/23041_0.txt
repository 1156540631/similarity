strcpy(VAR1, FUN1(VAR2, VAR3, VAR4));
VAR5, FUN2(VAR6, 203));
VAR7 += FUN3(VAR6, VAR8, VAR9, VAR10 + 1, VAR11);
char *VAR2;
register CLASS1 *VAR12;
VAR12 = VAR12->VAR13;
VAR14 = FUN4(VAR8);
VAR7 += FUN3(VAR6, VAR8, VAR9, VAR10 + 1, VAR11);
CLASS1 *VAR8;
struct CLASS2 VAR15;
return (VAR12);
VAR14 = FUN4(VAR8);
VAR8->VAR16 = VAR15.VAR17;
VAR8->VAR18 |= VAR14->VAR18 & VAR19;
VAR8->VAR20 = VAR14->VAR20;
VAR21 = FUN5(VAR15.VAR17);
VAR8->VAR20 = FUN6(VAR21->VAR22);
VAR7 += FUN3(VAR6, VAR8, VAR9, VAR10 + 1, VAR11);
register char **VAR23;
FUN7 ((VAR24 = *VAR23++) != VAR25)
(void) FUN3(VAR24, VAR26, &VAR11->VAR27, 0, VAR11);
CLASS1 *VAR8;
char *VAR5 = VAR11->VAR28;
VAR11->VAR28 = VAR5;
register CLASS3 *VAR11;
VAR29 = FUN8(VAR12->VAR30, VAR3, VAR12, VAR9, VAR10, VAR11);
CLASS1 **VAR9;
VAR29 = FUN8(VAR12->VAR30, VAR3, VAR12, VAR9, VAR10, VAR11);
CLASS1 **VAR9;
VAR7 += FUN3(VAR6, VAR8, VAR9, VAR10 + 1, VAR11);
(void) FUN3(VAR24, VAR26, &VAR11->VAR27, 0, VAR11);
CLASS1 **VAR9;
VAR11->VAR31++;
if (FUN9(VAR32, VAR11->VAR33))
VAR11->VAR31++;
VAR11->VAR33 |= VAR34;
fprintf(VAR11->VAR35,
register CLASS3 *VAR11;
(VAR36) 0, VAR11);
FUN10(VAR12, VAR9, VAR10, VAR11);
if (FUN11(fileno(VAR37), &VAR15) < 0)
VAR8->VAR16 = VAR15.VAR17;
VAR7 += FUN3(VAR6, VAR8, VAR9, VAR10 + 1, VAR11);
if (FUN12(VAR12, VAR9, VAR10, VAR11) == VAR38)
FUN13(VAR12, VAR9, VAR10 + 1, VAR11);
(VAR36) 0, VAR11);
FUN14(VAR12, VAR9, VAR10, VAR11);
VAR12 = FUN15(VAR12, VAR9, VAR10, VAR11);
register CLASS3 *VAR11;
VAR29 = FUN8(VAR12->VAR30, VAR3, VAR12, VAR9, VAR10, VAR11);
CLASS3 *VAR11;
VAR7 += FUN3(VAR6, VAR8, VAR9, VAR10 + 1, VAR11);
register CLASS3 *VAR11;
VAR11->VAR39 = FUN6("VAR40: VAR41 VAR42 VAR43");
VAR11->VAR31++;
if (FUN9(VAR32, VAR11->VAR33))
VAR11->VAR31++;
VAR11->VAR33 |= VAR34;
fprintf(VAR11->VAR35,
register CLASS3 *VAR11;
(VAR36) 0, VAR11);
FUN10(VAR12, VAR9, VAR10, VAR11);
if (FUN12(VAR12, VAR9, VAR10, VAR11) == VAR38)
FUN13(VAR12, VAR9, VAR10 + 1, VAR11);
(VAR36) 0, VAR11);
FUN14(VAR12, VAR9, VAR10, VAR11);
VAR12 = FUN15(VAR12, VAR9, VAR10, VAR11);
register CLASS3 *VAR11;
VAR11->VAR28 = VAR12->VAR44;
VAR11->VAR45 = VAR12->VAR44;
VAR11->VAR45 = "";
VAR29 = FUN8(VAR12->VAR30, VAR3, VAR12, VAR9, VAR10, VAR11);
char *VAR5 = VAR11->VAR28;
VAR11->VAR31++;
VAR5, FUN2(VAR6, 203));
VAR11->VAR28 = VAR5;
CLASS3 *VAR11;
VAR29 = FUN8(VAR12->VAR30, VAR3, VAR12, VAR9, VAR10, VAR11);
CLASS3 *VAR11;
if (FUN9(VAR32, VAR11->VAR33))
VAR11->VAR28 = VAR25;
VAR7 += FUN3(VAR6, VAR8, VAR9, VAR10 + 1, VAR11);
register CLASS3 *VAR11;
(void) FUN3(VAR24, VAR26, &VAR11->VAR27, 0, VAR11);
register CLASS3 *VAR11;
char VAR6[VAR46 + 1];
printf("VAR47: %s\n   VAR8=", VAR2);
FUN16(VAR8, VAR3);
strchr(VAR2, '<') != VAR25 || strchr(VAR2, '(') != VAR25))
(strchr(VAR2, ',') != VAR25 || strchr(VAR2, ';') != VAR25 ||
VAR11->VAR33 &= ~VAR48;
VAR49 = ' ';
if (!FUN9(VAR48, VAR11->VAR33) || VAR8 != VAR25)
VAR49 = ',';
VAR50 = VAR25;
VAR51 = strlen(VAR2) + 1;
if (VAR51 <= sizeof VAR6)
VAR1 = VAR6;
VAR1 = FUN17(VAR51);
strcpy(VAR1, FUN1(VAR2, VAR3, VAR4));
for (VAR24 = VAR1; *VAR24 != '\'; )
auto char *VAR52;
FUN7 ((isascii(*VAR24) && isspace(*VAR24)) || *VAR24 == ',')
VAR24++;
VAR24 = VAR52;
VAR53 = FUN18(VAR12, VAR11);
VAR12 = FUN19(VAR24, VAR26, VAR54, VAR49, &VAR52, VAR11);
if (FUN20(VAR8, VAR12))
VAR53 = FUN18(VAR12, VAR11);
FUN16(VAR12, VAR3);
VAR12->VAR55 = VAR8->VAR55;
VAR50 = VAR12;
VAR12->VAR56 = VAR50;
if (FUN20(VAR8, VAR12))
FUN16(VAR8, VAR3);
VAR12->VAR13 = VAR8;
if (FUN20(VAR8, VAR12))
VAR8->VAR18 |= VAR57;
VAR12->VAR18 |= VAR58;
VAR12->VAR59 = VAR8->VAR59;
VAR12->VAR18 &= ~VAR60;
VAR12->VAR18 |= VAR8->VAR18 & VAR60;
VAR50 = VAR12;
VAR50 = VAR12->VAR56;
register CLASS1 *VAR12 = VAR50;
FUN10(VAR12, VAR9, VAR10, VAR11);
if (FUN12(VAR12, VAR9, VAR10, VAR11) == VAR38)
FUN13(VAR12, VAR9, VAR10 + 1, VAR11);
FUN14(VAR12, VAR9, VAR10, VAR11);
FUN16(*VAR9, VAR4);
register CLASS1 **VAR9;
VAR12 = FUN15(VAR12, VAR9, VAR10, VAR11);
register CLASS1 *VAR12;
register CLASS1 **VAR9;
bool VAR61 = FUN9(VAR58, VAR12->VAR18);
VAR12->VAR18 |= VAR62;
FUN16(VAR12, VAR3);
VAR51 = strlen(VAR12->VAR30);
(void) strcpy(VAR6, VAR12->VAR30);
VAR12->VAR18 |= VAR63;
VAR12->VAR64 = "5.7.1";
else if (FUN9(VAR19, VAR12->VAR13->VAR18))
VAR12->VAR18 |= VAR63;
VAR12->VAR64 = "5.7.1";
VAR12->VAR13->VAR20, VAR65);
else if (FUN9(VAR66, VAR12->VAR13->VAR18))
VAR12->VAR18 |= VAR63;
VAR12->VAR64 = "5.7.1";
VAR12->VAR13->VAR44);
for (VAR67 = VAR9; (VAR68 = *VAR67) != VAR25; VAR67 = &VAR68->VAR56)
if (FUN20(VAR68, VAR12))
VAR12 = VAR68;
if (FUN20(VAR68, VAR12))
FUN16(VAR68, VAR3);
if (!FUN9(VAR62, VAR68->VAR18))
if (!FUN9(VAR58, VAR12->VAR18))
VAR68->VAR18 |= VAR12->VAR18;
else if (FUN9(VAR57, VAR68->VAR18))
VAR68->VAR18 |= VAR12->VAR18 & ~VAR58;
VAR12 = VAR68;
VAR12->VAR56 = VAR25;
printf("VAR69 VAR70 %s\n", VAR12->VAR30);
if (FUN9(VAR58|VAR63|VAR71, VAR12->VAR18))
VAR12->VAR18 |= VAR58;
VAR29 = FUN8(VAR12->VAR30, VAR3, VAR12, VAR9, VAR10, VAR11);
CLASS1 *VAR8;
FUN16(VAR8, VAR3);
VAR14 = FUN4(VAR8);
register CLASS1 *VAR12;
VAR14 = FUN4(VAR8);
VAR8->VAR72 = VAR15.VAR73;
VAR8->VAR20 = VAR14->VAR20;
VAR21 = FUN5(VAR15.VAR17);
VAR8->VAR20 = FUN6(VAR21->VAR22);
CLASS1 *VAR8;
FUN16(VAR8, VAR3);
VAR29 = FUN8(VAR12->VAR30, VAR3, VAR12, VAR9, VAR10, VAR11);
CLASS1 *VAR8;
FUN16(VAR8, VAR3);
VAR14 = FUN4(VAR8);
register CLASS1 *VAR12;
FUN7 (VAR12 != VAR25 && !FUN9(VAR74, VAR12->VAR18))
register CLASS1 *VAR12;
FUN7 (VAR12 != VAR25 && !FUN9(VAR74, VAR12->VAR18))
return (VAR12);
VAR14 = FUN4(VAR8);
VAR8->VAR18 |= VAR75;
VAR8->VAR18 |= VAR74;
VAR8->VAR18 |= VAR14->VAR18 & VAR19;
VAR8->VAR18 |= VAR19;
VAR8->VAR18 |= VAR19;
VAR8->VAR18 |= VAR66;
VAR8->VAR18 |= VAR71;
VAR8->VAR18 |= VAR66;
VAR8->VAR18 &= ~VAR57;
VAR7 += FUN3(VAR6, VAR8, VAR9, VAR10 + 1, VAR11);
if (VAR7 > 0 && !FUN9(VAR57, VAR8->VAR18))
VAR8->VAR18 |= VAR58;
CLASS1 *VAR8;
VAR29 = FUN8(VAR12->VAR30, VAR3, VAR12, VAR9, VAR10, VAR11);
CLASS1 *VAR8;
VAR14 = FUN4(VAR8);
register CLASS1 *VAR12;
VAR14 = FUN4(VAR8);
CLASS1 *VAR8;
VAR29 = FUN8(VAR12->VAR30, VAR3, VAR12, VAR9, VAR10, VAR11);
FUN21("VAR76 VAR77 %s", VAR12->VAR30);
VAR29 = FUN8(VAR12->VAR30, VAR3, VAR12, VAR9, VAR10, VAR11);
char *VAR78;
CLASS4 *volatile VAR37 = VAR25;
printf("FUN8(%s)\n", VAR78);
VAR79 = FUN22(VAR78, VAR80, VAR81, VAR82, VAR83, VAR84, VAR25);
VAR37 = fopen(VAR78, "r");
if (FUN11(fileno(VAR37), &VAR15) < 0)
VAR85 = FUN23(fileno(VAR37));
FUN7 (fgets(VAR6, sizeof VAR6, VAR37) != VAR25)
