VAR1 FUN1(char *VAR2,VAR1 VAR3,unsigned int VAR4)
VAR5 = FUN2(VAR2,VAR3,(((VAR4 & 0xff) >= 48 && (VAR4 & 0xff) <= '' || (VAR4 & 0xff) >= '' && (VAR4 & 0xff) <= '' || (VAR4 & 0xff) >= '' && (VAR4 & 0xff) <= '' || ((VAR4 & 0xff) == '.' || (VAR4 & 0xff) == 32 || (VAR4 & 0xff) == '-' || (VAR4 & 0xff) == '')?"%c" : "[%d]")),VAR4 & 0xff);
VAR2 += VAR5;
VAR4 >>= 8;
const char *VAR6 = ((void *)0);
char VAR7[32];
FUN1(VAR7,sizeof(VAR7),VAR8 -> VAR4);
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2)," (%s / 0x%04X)",VAR7,VAR8 -> VAR4);
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2),", %s",FUN3(VAR8 -> VAR9));
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2),", %dx%d",VAR8 -> VAR10,VAR8 -> VAR11);
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2),", %d/%d",VAR8 -> VAR12 . VAR13 / VAR14,VAR8 -> VAR12 . VAR15 / VAR14);
return ((void *)0);
return ((void *)0);
VAR6 = FUN4(VAR16,VAR8 -> VAR6);
VAR2[0] ^= '' ^ '';
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2)," (%s)",VAR6);
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2)," (%s / 0x%04X)",VAR7,VAR8 -> VAR4);
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2),", %s",FUN3(VAR8 -> VAR9));
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2)," (%d VAR17)",VAR8 -> VAR18);
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2),", %dx%d",VAR8 -> VAR10,VAR8 -> VAR11);
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2)," [VAR19 %d:%d VAR20 %d:%d]",VAR8 -> VAR21 . VAR13,VAR8 -> VAR21 . VAR15,VAR22 . VAR13,VAR22 . VAR15);
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2),", %d/%d",VAR8 -> VAR12 . VAR13 / VAR14,VAR8 -> VAR12 . VAR15 / VAR14);
void FUN5(char *VAR2,int VAR3,CLASS1 *VAR8,int VAR23)
FUN2(VAR2,VAR3,"%s: %s%s",(VAR24?VAR24 : "unknown"),VAR25,(VAR8 -> VAR26?" (VAR27)" : ""));
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2),", %dx%d",VAR8 -> VAR10,VAR8 -> VAR11);
FUN2(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2),", %d/%d",VAR8 -> VAR12 . VAR13 / VAR14,VAR8 -> VAR12 . VAR15 / VAR14);
