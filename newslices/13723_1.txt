VAR1 VAR2;
VAR1 VAR3, VAR4;
VAR5 VAR6 = VAR7;
VAR8 = VAR9->FUN1(VAR10, VAR11, &VAR2);
if (FUN2(VAR8)) return VAR8;
VAR12 = VAR2 + 512;
char *VAR13 = (char *) FUN3(VAR12);
for (VAR3 = 0, VAR4 = 0; VAR3 < VAR11;)
VAR2 = VAR12 - VAR4;
VAR8 = VAR9->FUN4(&VAR10[VAR3], &VAR14, &VAR13[VAR4], &VAR2);
VAR3 += VAR14 ? VAR14 : 1;
VAR4 += VAR2;
VAR13[VAR4] = '\';
VAR8 = VAR9->FUN5(&VAR13[VAR4], &VAR2);
if (FUN6(VAR8))
VAR4 += VAR2;
VAR13[VAR4] = '\';
VAR8 = FUN7(VAR15, &VAR13, &VAR12, &VAR4, VAR2);
VAR16::FUN7(VAR17 VAR18, char **VAR19, VAR1 *VAR12, VAR1 *VAR20, VAR1 VAR21)
char VAR22[256];
VAR5 VAR8 = FUN8(VAR18, VAR22, 256);
if (FUN6(VAR8))
VAR1 VAR23 = (VAR1) FUN9(VAR22);
if ((VAR23 + VAR21) >= (*VAR12 - *VAR20))
VAR24 VAR25;
VAR25.VAR26 = VAR27;
char * VAR27 = VAR25.VAR28;
char *VAR27 = (char *) FUN10(*VAR19, *VAR12 + VAR23);
if (VAR27)
*VAR12 += VAR23;
*VAR19 = VAR27;
else
*VAR19 = VAR29;
*VAR12 =0;
return VAR30;
memcpy((*VAR19 + *VAR20), VAR22, VAR23);
