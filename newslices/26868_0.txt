VAR1 = FUN1(VAR2->VAR3, VAR4, VAR2, VAR5, VAR6, VAR7);
char *VAR8;
CLASS1 **VAR5;
VAR1 = FUN1(VAR2->VAR3, VAR4, VAR2, VAR5, VAR6, VAR7);
CLASS1 **VAR5;
CLASS2 *volatile VAR9 = VAR10;
char VAR11[VAR12];
printf("FUN1(%s)\n", VAR8);
VAR13 = FUN2(VAR8, VAR14, VAR15, VAR16, VAR17, VAR18, VAR10);
VAR9 = fopen(VAR8, "r");
if (FUN3(fileno(VAR9), &VAR19) < 0)
VAR20 = FUN4(fileno(VAR9));
FUN5 (fgets(VAR11, sizeof VAR11, VAR9) != VAR10)
register char *VAR21 = strchr(VAR11, '\');
VAR22 ? "VAR22" : "sending", VAR11);
VAR23, FUN6(VAR11, 203));
VAR24 += FUN7(VAR11, VAR25, VAR5, VAR6 + 1, VAR7);
CLASS1 **VAR5;
VAR2 = FUN8(VAR2, VAR5, VAR6, VAR7);
register CLASS1 **VAR5;
for (VAR26 = VAR5; (VAR27 = *VAR26) != VAR10; VAR26 = &VAR27->VAR28)
if (FUN9(VAR27, VAR2))
VAR2 = VAR27;
printf("VAR29 VAR30 %s\n", VAR2->VAR3);
register char **VAR31;
FUN5 ((VAR21 = *VAR31++) != VAR10)
(void) FUN7(VAR21, VAR32, &VAR7->VAR33, 0, VAR7);
char *VAR34;
register CLASS1 *VAR2;
VAR2 = VAR2->VAR35;
VAR36 = FUN10(VAR25);
VAR1 = FUN1(VAR2->VAR3, VAR4, VAR2, VAR5, VAR6, VAR7);
CLASS1 *VAR25;
VAR36 = FUN10(VAR25);
register CLASS1 *VAR2;
FUN5 (VAR2 != VAR10 && !FUN11(VAR37, VAR2->VAR38))
return (VAR2);
VAR36 = FUN10(VAR25);
VAR25->VAR38 |= VAR36->VAR38 & VAR39;
VAR25->VAR40 = VAR36->VAR40;
VAR24 += FUN7(VAR11, VAR25, VAR5, VAR6 + 1, VAR7);
CLASS1 *VAR25;
FUN12(VAR2, VAR5, VAR6, VAR7);
if (FUN13(VAR2, VAR5, VAR6, VAR7) == VAR41)
FUN14(VAR2, VAR5, VAR6 + 1, VAR7);
FUN15(VAR2, VAR5, VAR6, VAR7);
FUN16(*VAR5, VAR42);
register CLASS1 **VAR5;
VAR2 = FUN8(VAR2, VAR5, VAR6, VAR7);
register CLASS1 **VAR5;
for (VAR26 = VAR5; (VAR27 = *VAR26) != VAR10; VAR26 = &VAR27->VAR28)
if (FUN9(VAR27, VAR2))
VAR2 = VAR27;
if (FUN9(VAR27, VAR2))
VAR24 += FUN7(VAR11, VAR25, VAR5, VAR6 + 1, VAR7);
CLASS1 *VAR25;
VAR1 = FUN1(VAR2->VAR3, VAR4, VAR2, VAR5, VAR6, VAR7);
CLASS1 *VAR25;
VAR36 = FUN10(VAR25);
register CLASS1 *VAR2;
VAR36 = FUN10(VAR25);
VAR24 += FUN7(VAR11, VAR25, VAR5, VAR6 + 1, VAR7);
CLASS1 *VAR25;
VAR1 = FUN1(VAR2->VAR3, VAR4, VAR2, VAR5, VAR6, VAR7);
CLASS1 *VAR25;
VAR36 = FUN10(VAR25);
register CLASS1 *VAR2;
VAR36 = FUN10(VAR25);
VAR24 += FUN7(VAR11, VAR25, VAR5, VAR6 + 1, VAR7);
CLASS1 *VAR25;
FUN16(VAR25, VAR4);
if (FUN9(VAR25, VAR2))
VAR43 = FUN17(VAR2, VAR7);
FUN16(VAR2, VAR4);
VAR2->VAR44 = VAR25->VAR44;
VAR2->VAR45 = VAR25->VAR45;
VAR46 = VAR2;
VAR2->VAR28 = VAR46;
if (FUN9(VAR25, VAR2))
FUN16(VAR25, VAR4);
VAR2->VAR35 = VAR25;
VAR46 = VAR2;
VAR46 = VAR2->VAR28;
register CLASS1 *VAR2 = VAR46;
VAR2 = FUN8(VAR2, VAR5, VAR6, VAR7);
register CLASS1 *VAR2;
bool VAR47 = FUN11(VAR48, VAR2->VAR38);
VAR2->VAR38 |= VAR49;
FUN16(VAR2, VAR4);
VAR2->VAR38 |= VAR50;
VAR2->VAR51 = "5.7.1";
else if (FUN11(VAR39, VAR2->VAR35->VAR38))
VAR2->VAR38 |= VAR50;
VAR2->VAR51 = "5.7.1";
VAR2->VAR35->VAR40, VAR52);
else if (FUN11(VAR53, VAR2->VAR35->VAR38))
VAR2->VAR38 |= VAR50;
VAR2->VAR51 = "5.7.1";
VAR2->VAR35->VAR54);
if (FUN9(VAR27, VAR2))
FUN16(VAR27, VAR4);
if (!FUN11(VAR49, VAR27->VAR38))
if (!FUN11(VAR48, VAR2->VAR38))
VAR27->VAR38 |= VAR2->VAR38;
else if (FUN11(VAR55, VAR27->VAR38))
VAR27->VAR38 |= VAR2->VAR38 & ~VAR48;
VAR2 = VAR27;
VAR2->VAR28 = VAR10;
if (FUN11(VAR48|VAR50|VAR56, VAR2->VAR38))
VAR2->VAR38 |= VAR48;
FUN18("VAR57 VAR58 %s", VAR2->VAR3);
VAR25->VAR40 = VAR36->VAR40;
VAR59 = FUN19(VAR19.VAR60);
VAR25->VAR40 = FUN20(VAR59->VAR61);
VAR25->VAR38 |= VAR56;
if (VAR24 > 0 && !FUN11(VAR55, VAR25->VAR38))
VAR25->VAR38 |= VAR48;
CLASS1 *VAR25;
FUN16(VAR25, VAR4);
VAR1 = FUN1(VAR2->VAR3, VAR4, VAR2, VAR5, VAR6, VAR7);
CLASS1 *VAR25;
FUN16(VAR25, VAR4);
VAR36 = FUN10(VAR25);
register CLASS1 *VAR2;
FUN5 (VAR2 != VAR10 && !FUN11(VAR37, VAR2->VAR38))
register CLASS1 *VAR2;
return (VAR2);
VAR36 = FUN10(VAR25);
VAR25->VAR38 |= VAR62;
VAR25->VAR38 |= VAR37;
VAR25->VAR38 |= VAR36->VAR38 & VAR39;
VAR25->VAR38 |= VAR39;
VAR25->VAR38 |= VAR39;
VAR25->VAR38 |= VAR53;
VAR25->VAR38 |= VAR53;
VAR25->VAR38 &= ~VAR55;
VAR24 += FUN7(VAR11, VAR25, VAR5, VAR6 + 1, VAR7);
CLASS1 *VAR25;
VAR25->VAR63 = VAR19.VAR64;
CLASS1 *VAR25;
VAR1 = FUN1(VAR2->VAR3, VAR4, VAR2, VAR5, VAR6, VAR7);
CLASS1 *VAR25;
struct CLASS3 VAR19;
VAR36 = FUN10(VAR25);
register CLASS1 *VAR2;
VAR36 = FUN10(VAR25);
if (FUN3(fileno(VAR9), &VAR19) < 0)
VAR25->VAR65 = VAR19.VAR60;
VAR24 += FUN7(VAR11, VAR25, VAR5, VAR6 + 1, VAR7);
(void) FUN7(VAR21, VAR32, &VAR7->VAR33, 0, VAR7);
CLASS1 *VAR25;
(void) FUN7(VAR21, VAR32, &VAR7->VAR33, 0, VAR7);
CLASS1 **VAR5;
(VAR66) 0, VAR7);
FUN12(VAR2, VAR5, VAR6, VAR7);
if (FUN13(VAR2, VAR5, VAR6, VAR7) == VAR41)
FUN14(VAR2, VAR5, VAR6 + 1, VAR7);
(VAR66) 0, VAR7);
FUN15(VAR2, VAR5, VAR6, VAR7);
VAR2 = FUN8(VAR2, VAR5, VAR6, VAR7);
(void) FUN7(VAR21, VAR32, &VAR7->VAR33, 0, VAR7);
register CLASS4 *VAR7;
char *VAR23 = VAR7->VAR67;
VAR7->VAR68 = FUN20("VAR69: VAR70 VAR71 VAR72");
register CLASS4 *VAR7;
VAR2 = FUN8(VAR2, VAR5, VAR6, VAR7);
register CLASS4 *VAR7;
VAR1 = FUN1(VAR2->VAR3, VAR4, VAR2, VAR5, VAR6, VAR7);
CLASS4 *VAR7;
VAR1 = FUN1(VAR2->VAR3, VAR4, VAR2, VAR5, VAR6, VAR7);
VAR7->VAR73++;
if (FUN11(VAR74, VAR7->VAR75))
VAR7->VAR73++;
VAR7->VAR75 |= VAR76;
fprintf(VAR7->VAR77,
register CLASS4 *VAR7;
VAR2 = FUN8(VAR2, VAR5, VAR6, VAR7);
VAR7->VAR67 = VAR23;
register CLASS4 *VAR7;
VAR1 = FUN1(VAR2->VAR3, VAR4, VAR2, VAR5, VAR6, VAR7);
CLASS4 *VAR7;
VAR1 = FUN1(VAR2->VAR3, VAR4, VAR2, VAR5, VAR6, VAR7);
CLASS4 *VAR7;
VAR1 = FUN1(VAR2->VAR3, VAR4, VAR2, VAR5, VAR6, VAR7);
CLASS4 *VAR7;
char *VAR23 = VAR7->VAR67;
VAR7->VAR73++;
VAR23, FUN6(VAR11, 203));
VAR7->VAR67 = VAR23;
VAR1 = FUN1(VAR2->VAR3, VAR4, VAR2, VAR5, VAR6, VAR7);
CLASS4 *VAR7;
if (FUN11(VAR74, VAR7->VAR75))
VAR24 += FUN7(VAR11, VAR25, VAR5, VAR6 + 1, VAR7);
register CLASS4 *VAR7;
VAR7->VAR67 = VAR2->VAR54;
VAR7->VAR78 = VAR2->VAR54;
VAR7->VAR78 = "";
VAR1 = FUN1(VAR2->VAR3, VAR4, VAR2, VAR5, VAR6, VAR7);
CLASS4 *VAR7;
VAR7->VAR67 = VAR10;
VAR24 += FUN7(VAR11, VAR25, VAR5, VAR6 + 1, VAR7);
register CLASS4 *VAR7;
(void) FUN7(VAR21, VAR32, &VAR7->VAR33, 0, VAR7);
register CLASS4 *VAR7;
char VAR11[VAR79 + 1];
printf("VAR80: %s\n   VAR25=", VAR34);
FUN16(VAR25, VAR4);
strchr(VAR34, '<') != VAR10 || strchr(VAR34, '(') != VAR10))
(strchr(VAR34, ',') != VAR10 || strchr(VAR34, ';') != VAR10 ||
VAR7->VAR75 &= ~VAR81;
VAR82 = ' ';
if (!FUN11(VAR81, VAR7->VAR75) || VAR25 != VAR10)
VAR82 = ',';
VAR46 = VAR10;
VAR83 = strlen(VAR34) + 1;
if (VAR83 <= sizeof VAR11)
VAR84 = VAR11;
VAR84 = FUN21(VAR83);
strcpy(VAR84, FUN22(VAR34, VAR4, VAR42));
for (VAR21 = VAR84; *VAR21 != '\'; )
auto char *VAR85;
FUN5 ((isascii(*VAR21) && isspace(*VAR21)) || *VAR21 == ',')
VAR21++;
VAR21 = VAR85;
VAR43 = FUN17(VAR2, VAR7);
VAR2 = FUN23(VAR21, VAR32, VAR86, VAR82, &VAR85, VAR7);
if (FUN9(VAR25, VAR2))
VAR25->VAR38 |= VAR55;
VAR2->VAR38 |= VAR48;
VAR2->VAR38 |= VAR25->VAR38 & VAR87;
VAR2->VAR38 &= ~VAR87;
VAR2->VAR38 |= VAR25->VAR38 & VAR87;
VAR46 = VAR2;
register CLASS1 *VAR2 = VAR46;
VAR2 = FUN8(VAR2, VAR5, VAR6, VAR7);
register CLASS1 *VAR2;
register CLASS1 **VAR5;
VAR83 = strlen(VAR2->VAR3);
(void) strcpy(VAR11, VAR2->VAR3);
for (VAR26 = VAR5; (VAR27 = *VAR26) != VAR10; VAR26 = &VAR27->VAR28)
if (FUN9(VAR27, VAR2))
VAR2 = VAR27;
printf("VAR29 VAR30 %s\n", VAR2->VAR3);
