VAR1 = FUN1(VAR2,VAR3,(((VAR4 & 0xff) >= 48 && (VAR4 & 0xff) <= '' || (VAR4 & 0xff) >= '' && (VAR4 & 0xff) <= '' || (VAR4 & 0xff) >= '' && (VAR4 & 0xff) <= '' || ((VAR4 & 0xff) == '.' || (VAR4 & 0xff) == 32 || (VAR4 & 0xff) == '-' || (VAR4 & 0xff) == '')?"%c" : "[%d]")),VAR4 & 0xff);
VAR2 += VAR1;
VAR4 >>= 8;
char VAR5[32];
FUN2(VAR5,sizeof(VAR5),VAR6 -> VAR4);
FUN1(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2)," (%s / 0x%04X)",VAR5,VAR6 -> VAR4);
FUN1(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2),", %d/%d",VAR6 -> VAR7 . VAR8 / VAR9,VAR6 -> VAR7 . VAR10 / VAR9);
void FUN3(char *VAR2,int VAR3,CLASS1 *VAR6,int VAR11)
const char *VAR12 = ((void *)0);
FUN1(VAR2,VAR3,"%s: %s%s",(VAR13?VAR13 : "unknown"),VAR14,(VAR6 -> VAR15?" (VAR16)" : ""));
VAR2[0] ^= '' ^ '';
FUN1(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2),", %d/%d",VAR6 -> VAR7 . VAR8 / VAR9,VAR6 -> VAR7 . VAR10 / VAR9);
return ((void *)0);
VAR12 = FUN4(VAR17,VAR6 -> VAR12);
FUN1(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2)," (%s)",VAR12);
FUN1(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2),", %d/%d",VAR6 -> VAR7 . VAR8 / VAR9,VAR6 -> VAR7 . VAR10 / VAR9);
return ((void *)0);
VAR12 = FUN4(VAR17,VAR6 -> VAR12);
FUN1(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2)," (%s)",VAR12);
FUN1(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2),", %d/%d",VAR6 -> VAR7 . VAR8 / VAR9,VAR6 -> VAR7 . VAR10 / VAR9);
VAR18 FUN2(char *VAR2,VAR18 VAR3,unsigned int VAR4)
FUN1(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2)," (%s / 0x%04X)",VAR5,VAR6 -> VAR4);
FUN1(VAR2 + strlen(VAR2),VAR3 - strlen(VAR2),", %d/%d",VAR6 -> VAR7 . VAR8 / VAR9,VAR6 -> VAR7 . VAR10 / VAR9);
