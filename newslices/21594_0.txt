return ((void *)0);
int VAR1 = 1;
CLASS1 *VAR2;
VAR3 = VAR1;
VAR2 = (FUN1(sizeof(( *VAR2)) * VAR3));
char *VAR4 = strchr(VAR5,',');
*(VAR4++) = 0;
if (VAR6 -> VAR7 > (2147483647 - VAR3) || !(VAR2 = (FUN2(VAR2,(VAR3 += VAR6 -> VAR7 - 1),sizeof(( *VAR2)))))) {
CLASS2 *VAR8 = VAR6 -> VAR9[VAR10];
VAR2[VAR11++] = FUN3(VAR8 -> VAR12,VAR8 -> VAR13,VAR14 -> VAR13) + VAR15;
VAR5 = VAR4;
char *VAR4 = strchr(VAR5,',');
if (!memcmp(VAR5,"VAR9",8)) {
VAR15 = (VAR5[8]?FUN4("force_key_frames",(VAR5 + 8),1) : 0);
VAR2[VAR11++] = FUN3(VAR8 -> VAR12,VAR8 -> VAR13,VAR14 -> VAR13) + VAR15;
FUN5(VAR2,VAR3,sizeof(( *VAR2)),VAR16);
VAR17 -> VAR18 = VAR2;
VAR19[VAR10 + VAR20 -> VAR21] -> VAR12 = FUN6();
VAR17 = VAR22[VAR23];
VAR24 = FUN7(VAR17);
return VAR19[VAR17 -> VAR25];
for (VAR23 = 0; VAR23 < VAR26; VAR23++) {
VAR24 = FUN7(VAR17);
VAR17 -> VAR27 -> VAR28 = VAR24 -> VAR27 -> VAR28;
if (VAR29 < 0 && FUN8(VAR24 -> VAR27 -> VAR30) >= FUN8(VAR24 -> VAR27 -> VAR31) && 0.5 / FUN8(VAR24 -> VAR27 -> VAR30) > FUN8(VAR24 -> VAR27 -> VAR13) && 0.5 / FUN8(VAR24 -> VAR27 -> VAR30) > FUN8(VAR32 -> VAR13) && FUN8(VAR24 -> VAR27 -> VAR13) < 1.0 / 500 && FUN8(VAR32 -> VAR13) < 1.0 / 500 || VAR29 == 2) {
VAR17 -> VAR27 -> VAR31 = VAR24 -> VAR27 -> VAR31;
VAR17 -> VAR33 = FUN9(VAR34 -> VAR35);
FUN10(VAR36,sizeof(VAR36),"FUN11 (VAR34 %s) VAR37 VAR38 for VAR39 VAR40 #%d:%d",FUN12(VAR17 -> VAR27 -> VAR34 -> VAR35),VAR17 -> VAR41,VAR17 -> VAR11);
VAR17 -> VAR42 = 1;
VAR17 -> VAR43 = FUN13(VAR17 -> VAR44 -> VAR44);
VAR17 -> VAR43 = VAR24 -> VAR45;
int VAR46 = FUN14(VAR17 -> VAR43,VAR17 -> VAR33 -> VAR47);
VAR17 -> VAR43 = VAR17 -> VAR33 -> VAR47[VAR46];
VAR34 -> VAR48 = FUN15(VAR17 -> VAR44 -> VAR44 -> VAR49[0]);
VAR34 -> VAR13 = FUN16(VAR17 -> VAR43);
VAR34 -> VAR50 = VAR17 -> VAR44 -> VAR44 -> VAR49[0] -> VAR51;
VAR34 -> VAR52 = VAR17 -> VAR44 -> VAR44 -> VAR49[0] -> VAR53;
VAR34 -> VAR54 = VAR17 -> VAR27 -> VAR54 = (VAR17 -> VAR55?FUN17((VAR17 -> VAR55 * (VAR34 -> VAR52) / (VAR34 -> VAR50)),255) : VAR17 -> VAR44 -> VAR44 -> VAR49[0] -> VAR54);
if (!strncmp((VAR17 -> VAR56),"VAR57:",5)) {
FUN18(VAR17 -> VAR56,VAR17,VAR17 -> VAR27 -> VAR34);
char VAR58[1024];
FUN10(VAR58,sizeof(VAR58),"%s-%d.log",(VAR17 -> VAR59?VAR17 -> VAR59 : "ffmpeg2pass"),VAR23);
static void FUN18(char *VAR60,CLASS3 *VAR17,CLASS4 *VAR14)
VAR5 = VAR60;
char *VAR4 = strchr(VAR5,',');
if (!memcmp(VAR5,"VAR9",8)) {
VAR15 = (VAR5[8]?FUN4("force_key_frames",(VAR5 + 8),1) : 0);
VAR2[VAR11++] = FUN3(VAR8 -> VAR12,VAR8 -> VAR13,VAR14 -> VAR13) + VAR15;
if (VAR6 -> VAR7 > (2147483647 - VAR3) || !(VAR2 = (FUN2(VAR2,(VAR3 += VAR6 -> VAR7 - 1),sizeof(( *VAR2)))))) {
FUN5(VAR2,VAR3,sizeof(( *VAR2)),VAR16);
VAR17 -> VAR18 = VAR2;
FUN18(VAR17 -> VAR56,VAR17,VAR17 -> VAR27 -> VAR34);
VAR61 = FUN19(VAR24,VAR17);
FUN18(VAR17 -> VAR56,VAR17,VAR17 -> VAR27 -> VAR34);
FUN10(VAR58,sizeof(VAR58),"%s-%d.log",(VAR17 -> VAR59?VAR17 -> VAR59 : "ffmpeg2pass"),VAR23);
static void FUN18(char *VAR60,CLASS3 *VAR17,CLASS4 *VAR14)
FUN18(VAR17 -> VAR56,VAR17,VAR17 -> VAR27 -> VAR34);
FUN10(VAR58,sizeof(VAR58),"%s-%d.log",(VAR17 -> VAR59?VAR17 -> VAR59 : "ffmpeg2pass"),VAR23);
static CLASS5 *FUN7(CLASS3 *VAR17)
VAR24 = FUN7(VAR17);
FUN10(VAR58,sizeof(VAR58),"%s-%d.log",(VAR17 -> VAR59?VAR17 -> VAR59 : "ffmpeg2pass"),VAR23);
