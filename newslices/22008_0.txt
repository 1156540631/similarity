return VAR1[VAR2 -> VAR3];
int VAR4 = 1;
VAR5 = VAR4;
VAR6 = (FUN1(sizeof(( *VAR6)) * VAR5));
*(VAR7++) = 0;
CLASS1 *VAR8 = VAR9 -> VAR10[VAR11];
VAR6[VAR12++] = FUN2(VAR8 -> VAR13,VAR8 -> VAR14,VAR15 -> VAR14) + VAR16;
VAR17 = VAR7;
char *VAR7 = strchr(VAR17,',');
if (!memcmp(VAR17,"VAR10",8)) {
VAR16 = (VAR17[8]?FUN3("force_key_frames",(VAR17 + 8),1) : 0);
VAR6[VAR12++] = FUN2(VAR8 -> VAR13,VAR8 -> VAR14,VAR15 -> VAR14) + VAR16;
FUN4(VAR6,VAR5,sizeof(( *VAR6)),VAR18);
VAR2 -> VAR19 = VAR6;
VAR1[VAR11 + VAR20 -> VAR21] -> VAR13 = FUN5();
VAR2 = VAR22[VAR23];
VAR24 = FUN6(VAR2);
return ((void *)0);
CLASS2 *VAR6;
VAR6 = (FUN1(sizeof(( *VAR6)) * VAR5));
char *VAR7 = strchr(VAR17,',');
if (VAR9 -> VAR25 > (2147483647 - VAR5) || !(VAR6 = (FUN7(VAR6,(VAR5 += VAR9 -> VAR25 - 1),sizeof(( *VAR6)))))) {
VAR17 = VAR7;
char *VAR7 = strchr(VAR17,',');
if (!memcmp(VAR17,"VAR10",8)) {
VAR16 = (VAR17[8]?FUN3("force_key_frames",(VAR17 + 8),1) : 0);
VAR6[VAR12++] = FUN2(VAR8 -> VAR13,VAR8 -> VAR14,VAR15 -> VAR14) + VAR16;
FUN4(VAR6,VAR5,sizeof(( *VAR6)),VAR18);
VAR2 -> VAR19 = VAR6;
for (VAR23 = 0; VAR23 < VAR26; VAR23++) {
VAR24 = FUN6(VAR2);
VAR2 -> VAR27 -> VAR28 = VAR24 -> VAR27 -> VAR28;
if (VAR29 < 0 && FUN8(VAR24 -> VAR27 -> VAR30) >= FUN8(VAR24 -> VAR27 -> VAR31) && 0.5 / FUN8(VAR24 -> VAR27 -> VAR30) > FUN8(VAR24 -> VAR27 -> VAR14) && 0.5 / FUN8(VAR24 -> VAR27 -> VAR30) > FUN8(VAR32 -> VAR14) && FUN8(VAR24 -> VAR27 -> VAR14) < 1.0 / 500 && FUN8(VAR32 -> VAR14) < 1.0 / 500 || VAR29 == 2) {
VAR2 -> VAR27 -> VAR31 = VAR24 -> VAR27 -> VAR31;
VAR2 -> VAR33 = FUN9(VAR34 -> VAR35);
FUN10(VAR36,sizeof(VAR36),"FUN11 (VAR34 %s) VAR37 VAR38 for VAR39 VAR40 #%d:%d",FUN12(VAR2 -> VAR27 -> VAR34 -> VAR35),VAR2 -> VAR41,VAR2 -> VAR12);
VAR2 -> VAR42 = 1;
VAR2 -> VAR43 = FUN13(VAR2 -> VAR44 -> VAR44);
VAR2 -> VAR43 = VAR24 -> VAR45;
int VAR46 = FUN14(VAR2 -> VAR43,VAR2 -> VAR33 -> VAR47);
VAR2 -> VAR43 = VAR2 -> VAR33 -> VAR47[VAR46];
VAR34 -> VAR48 = FUN15(VAR2 -> VAR44 -> VAR44 -> VAR49[0]);
VAR34 -> VAR14 = FUN16(VAR2 -> VAR43);
VAR34 -> VAR50 = VAR2 -> VAR44 -> VAR44 -> VAR49[0] -> VAR51;
VAR34 -> VAR52 = VAR2 -> VAR44 -> VAR44 -> VAR49[0] -> VAR53;
VAR34 -> VAR54 = VAR2 -> VAR27 -> VAR54 = (VAR2 -> VAR55?FUN17((VAR2 -> VAR55 * (VAR34 -> VAR52) / (VAR34 -> VAR50)),255) : VAR2 -> VAR44 -> VAR44 -> VAR49[0] -> VAR54);
if (!strncmp((VAR2 -> VAR56),"VAR57:",5)) {
FUN18(VAR2 -> VAR56,VAR2,VAR2 -> VAR27 -> VAR34);
char VAR58[1024];
FUN10(VAR58,sizeof(VAR58),"%s-%d.log",(VAR2 -> VAR59?VAR2 -> VAR59 : "ffmpeg2pass"),VAR23);
static void FUN18(char *VAR60,CLASS3 *VAR2,CLASS4 *VAR15)
VAR17 = VAR60;
char *VAR7 = strchr(VAR17,',');
if (!memcmp(VAR17,"VAR10",8)) {
VAR16 = (VAR17[8]?FUN3("force_key_frames",(VAR17 + 8),1) : 0);
VAR6[VAR12++] = FUN2(VAR8 -> VAR13,VAR8 -> VAR14,VAR15 -> VAR14) + VAR16;
if (VAR9 -> VAR25 > (2147483647 - VAR5) || !(VAR6 = (FUN7(VAR6,(VAR5 += VAR9 -> VAR25 - 1),sizeof(( *VAR6)))))) {
FUN4(VAR6,VAR5,sizeof(( *VAR6)),VAR18);
VAR2 -> VAR19 = VAR6;
FUN18(VAR2 -> VAR56,VAR2,VAR2 -> VAR27 -> VAR34);
VAR61 = FUN19(VAR24,VAR2);
FUN18(VAR2 -> VAR56,VAR2,VAR2 -> VAR27 -> VAR34);
FUN10(VAR58,sizeof(VAR58),"%s-%d.log",(VAR2 -> VAR59?VAR2 -> VAR59 : "ffmpeg2pass"),VAR23);
static void FUN18(char *VAR60,CLASS3 *VAR2,CLASS4 *VAR15)
FUN18(VAR2 -> VAR56,VAR2,VAR2 -> VAR27 -> VAR34);
static void FUN18(char *VAR60,CLASS3 *VAR2,CLASS4 *VAR15)
FUN18(VAR2 -> VAR56,VAR2,VAR2 -> VAR27 -> VAR34);
static void FUN18(char *VAR60,CLASS3 *VAR2,CLASS4 *VAR15)
FUN18(VAR2 -> VAR56,VAR2,VAR2 -> VAR27 -> VAR34);
FUN10(VAR58,sizeof(VAR58),"%s-%d.log",(VAR2 -> VAR59?VAR2 -> VAR59 : "ffmpeg2pass"),VAR23);
static CLASS5 *FUN6(CLASS3 *VAR2)
VAR24 = FUN6(VAR2);
FUN10(VAR58,sizeof(VAR58),"%s-%d.log",(VAR2 -> VAR59?VAR2 -> VAR59 : "ffmpeg2pass"),VAR23);
