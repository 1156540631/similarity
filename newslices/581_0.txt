if ((VAR1 = FUN1(VAR2, VAR3)) > 0)
VAR1 = FUN2(VAR4->VAR5, VAR6->VAR3, 0);
FUN3(VAR4->VAR5) == VAR4->VAR5->VAR7)
VAR4  = VAR8->VAR9[VAR10.VAR11];
FUN4(VAR8, VAR4, VAR12, VAR6);
FUN5(VAR4, VAR6->VAR13, VAR6->VAR14, 0, 0, VAR15);
VAR4 = VAR8->VAR9[VAR6->VAR11];
VAR4->VAR16 = 0;
FUN5(VAR4, VAR6->VAR13, VAR6->VAR14, 0, 0, VAR15);
VAR17 -= VAR18;
VAR19 = FUN6(*VAR20,
(*VAR21 + 1) *
*VAR20= VAR19;
VAR22= FUN7(*VAR20, *VAR21, VAR17, VAR23);
assert(VAR22==0 || VAR24[-1].VAR17 < VAR17);
FUN5(VAR4, VAR6->VAR13, VAR6->VAR14, 0, 0, VAR15);
return FUN8(&VAR4->VAR20, &VAR4->VAR21,
int *VAR21,
&VAR4->VAR25, VAR13,
unsigned int *VAR25,
VAR26 VAR13, VAR26 VAR17, int VAR3, int VAR27, int VAR28)
VAR17, VAR3, VAR27, VAR28);
VAR26 VAR13, VAR26 VAR17, int VAR3, int VAR27, int VAR28)
if((unsigned)*VAR21 + 1 >= VAR29 / sizeof(VAR30))
if (FUN9(VAR17))
VAR25,
(*VAR21 + 1) *
sizeof(VAR30));
VAR19 = FUN6(*VAR20,
VAR31 = - 1;
VAR31= VAR32-1;
VAR33 = (VAR31 + VAR32) >> 1;
VAR32 = VAR33;
VAR31 = VAR33;
VAR33= (VAR28 & VAR34) ? VAR31 : VAR32;
VAR33 += (VAR28 & VAR34) ? -1 : 1;
return -1;
return  VAR33;
VAR22= FUN7(*VAR20, *VAR21, VAR17, VAR23);
VAR22= (*VAR21)++;
VAR24= &VAR19[VAR22];
VAR26 VAR35, int VAR28)
assert(VAR22==0 || VAR24[-1].VAR17 < VAR17);
static int FUN9(VAR26 VAR36) {
VAR22= FUN7(*VAR20, *VAR21, VAR17, VAR23);
VAR26 VAR35, int VAR28)
assert(VAR22==0 || VAR24[-1].VAR17 < VAR17);
static void FUN4(CLASS1 *VAR8, CLASS2 *VAR4,
FUN4(VAR8, VAR4, VAR12, VAR6);
FUN5(VAR4, VAR6->VAR13, VAR6->VAR14, 0, 0, VAR15);
int FUN5(CLASS2 *VAR4,
FUN5(VAR4, VAR6->VAR13, VAR6->VAR14, 0, 0, VAR15);
FUN5(VAR4, VAR6->VAR13, VAR6->VAR14, 0, 0, VAR15);
return FUN8(&VAR4->VAR20, &VAR4->VAR21,
int FUN8(VAR30 **VAR20,
VAR19 = FUN6(*VAR20,
VAR24= &VAR19[VAR22];
assert(VAR22==0 || VAR24[-1].VAR17 < VAR17);
static void FUN10(int *VAR37, int *VAR38, CLASS2 *VAR4,
FUN10(&VAR39, &VAR40, VAR4, VAR41, VAR6);
if(VAR6->VAR42 != VAR43 && VAR44 <= VAR45 && FUN11(VAR4)){
static int FUN11(CLASS2 *VAR4)
if(VAR6->VAR42 != VAR43 && VAR44 <= VAR45 && FUN11(VAR4)){
int FUN7(const VAR30 *VAR19, int VAR46,
VAR22= FUN7(*VAR20, *VAR21, VAR17, VAR23);
return FUN8(&VAR4->VAR20, &VAR4->VAR21,
VAR32 = VAR46;
VAR33= (VAR28 & VAR34) ? VAR31 : VAR32;
return  VAR33;
VAR22= FUN7(*VAR20, *VAR21, VAR17, VAR23);
assert(VAR22==0 || VAR24[-1].VAR17 < VAR17);
static int FUN2(CLASS3 *VAR2, int VAR3, int VAR47)
VAR1 = FUN2(VAR4->VAR5, VAR6->VAR3, 0);
