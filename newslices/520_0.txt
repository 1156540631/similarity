CLASS1 *VAR1=VAR2;
FUN1((VAR1=FUN2(VAR3, "", VAR1, VAR4))) {
if(strcmp("language", VAR1->VAR5)){
FUN1((VAR1=FUN2(VAR3, "", VAR1, VAR4))) {
const char *VAR6 = VAR1->VAR7;
FUN3(VAR8, VAR9, "%s  %-16s: ", VAR10, VAR1->VAR5);
FUN1((VAR1=FUN2(VAR3, "", VAR1, VAR4))) {
const char *VAR6 = VAR1->VAR7;
VAR11 VAR12 = strcspn(VAR6, "\x8\xa\xb\xc\xd");
FUN4(VAR13, VAR6, FUN5(sizeof(VAR13), VAR12+1));
VAR6 += VAR12;
VAR11 VAR12 = strcspn(VAR6, "\x8\xa\xb\xc\xd");
if (*VAR6) VAR6++;
VAR11 VAR12 = strcspn(VAR6, "\x8\xa\xb\xc\xd");
CLASS2 *VAR14 = VAR15->VAR16 ? FUN6(VAR15->VAR16) : VAR2;
FUN7(VAR2, VAR15->VAR17, "  ");
VAR18 = VAR15->VAR19 % VAR20;
(100 * VAR18) / VAR20);
VAR18 = abs(VAR15->VAR21 % VAR20);
CLASS3 *VAR22 = VAR15->VAR23[VAR24];
FUN7(VAR2, VAR22->VAR17, "    ");
FUN7(VAR2, VAR15->VAR25[VAR26]->VAR17, "    ");
FUN8(VAR15, VAR15->VAR25[VAR26]->VAR27[VAR28], VAR29, VAR30);
static void FUN8(CLASS4 *VAR15, int VAR24, int VAR29, int VAR30)
CLASS5 *VAR31 = VAR15->VAR32[VAR24];
CLASS1 *VAR33 = FUN2(VAR31->VAR17, "language", VAR2, 0);
FUN7(VAR2, VAR31->VAR17, "    ");
FUN8(VAR15, VAR15->VAR25[VAR26]->VAR27[VAR28], VAR29, VAR30);
static void FUN8(CLASS4 *VAR15, int VAR24, int VAR29, int VAR30)
CLASS5 *VAR31 = VAR15->VAR32[VAR24];
CLASS1 *VAR33 = FUN2(VAR31->VAR17, "language", VAR2, 0);
FUN7(VAR2, VAR31->VAR17, "    ");
static void FUN7(void *VAR8, CLASS6 *VAR3, const char *VAR10)
if(VAR3 && !(FUN9(VAR3) == 1 && FUN2(VAR3, "language", VAR2, 0))){
FUN1((VAR1=FUN2(VAR3, "", VAR1, VAR4))) {
const char *VAR6 = VAR1->VAR7;
VAR11 VAR12 = strcspn(VAR6, "\x8\xa\xb\xc\xd");
