static CLASS1 *FUN1(CLASS2 *VAR1)
int VAR2 = 1;
VAR3 = VAR2;
VAR4 = (FUN2(sizeof(( *VAR4)) * VAR3));
*(VAR5++) = 0;
VAR6 = VAR5;
char *VAR5 = strchr(VAR6,',');
if (!memcmp(VAR6,"VAR25",8)) {
VAR7 = (VAR6[8]?FUN3("force_key_frames",(VAR6 + 8),1) : 0);
VAR4[VAR8++] = FUN4(VAR9 -> VAR10,VAR9 -> VAR11,VAR12 -> VAR11) + VAR7;
FUN5(VAR4,VAR3,sizeof(( *VAR4)),VAR13);
VAR14 = FUN1(VAR1);
VAR1 -> VAR15 -> VAR16 = VAR14 -> VAR15 -> VAR16;
VAR14 = FUN1(VAR1);
VAR1 -> VAR17 = FUN6(VAR18 -> VAR19);
if (!strncmp((VAR1 -> VAR20),"VAR21:",5)) {
FUN7(VAR1 -> VAR20,VAR1,VAR1 -> VAR15 -> VAR18);
static void FUN7(char *VAR22,CLASS2 *VAR1,CLASS3 *VAR12)
CLASS4 *VAR4;
VAR4 = (FUN2(sizeof(( *VAR4)) * VAR3));
VAR6 = VAR22;
char *VAR5 = strchr(VAR6,',');
if (!memcmp(VAR6,"VAR25",8)) {
if (VAR23 -> VAR24 > (2147483647 - VAR3) || !(VAR4 = (FUN8(VAR4,(VAR3 += VAR23 -> VAR24 - 1),sizeof(( *VAR4)))))) {
VAR7 = (VAR6[8]?FUN3("force_key_frames",(VAR6 + 8),1) : 0);
CLASS5 *VAR9 = VAR23 -> VAR25[VAR26];
VAR4[VAR8++] = FUN4(VAR9 -> VAR10,VAR9 -> VAR11,VAR12 -> VAR11) + VAR7;
if (VAR23 -> VAR24 > (2147483647 - VAR3) || !(VAR4 = (FUN8(VAR4,(VAR3 += VAR23 -> VAR24 - 1),sizeof(( *VAR4)))))) {
VAR6 = VAR5;
char *VAR5 = strchr(VAR6,',');
if (!memcmp(VAR6,"VAR25",8)) {
VAR7 = (VAR6[8]?FUN3("force_key_frames",(VAR6 + 8),1) : 0);
VAR4[VAR8++] = FUN4(VAR9 -> VAR10,VAR9 -> VAR11,VAR12 -> VAR11) + VAR7;
FUN5(VAR4,VAR3,sizeof(( *VAR4)),VAR13);
VAR1 = VAR27[VAR28];
VAR14 = FUN1(VAR1);
if (VAR29 < 0 && FUN9(VAR14 -> VAR15 -> VAR30) >= FUN9(VAR14 -> VAR15 -> VAR31) && 0.5 / FUN9(VAR14 -> VAR15 -> VAR30) > FUN9(VAR14 -> VAR15 -> VAR11) && 0.5 / FUN9(VAR14 -> VAR15 -> VAR30) > FUN9(VAR32 -> VAR11) && FUN9(VAR14 -> VAR15 -> VAR11) < 1.0 / 500 && FUN9(VAR32 -> VAR11) < 1.0 / 500 || VAR29 == 2) {
VAR1 -> VAR15 -> VAR31 = VAR14 -> VAR15 -> VAR31;
int VAR33 = FUN10(VAR1 -> VAR34,VAR1 -> VAR17 -> VAR35);
VAR1 -> VAR34 = VAR1 -> VAR17 -> VAR35[VAR33];
VAR14 = FUN1(VAR1);
VAR18 -> VAR36 = FUN11(VAR1 -> VAR37 -> VAR37 -> VAR38[0]);
VAR1 -> VAR34 = FUN12(VAR1 -> VAR37 -> VAR37);
VAR14 = FUN1(VAR1);
VAR18 -> VAR39 = VAR1 -> VAR37 -> VAR37 -> VAR38[0] -> VAR40;
VAR18 -> VAR41 = VAR1 -> VAR37 -> VAR37 -> VAR38[0] -> VAR42;
VAR18 -> VAR43 = VAR1 -> VAR15 -> VAR43 = (VAR1 -> VAR44?FUN13((VAR1 -> VAR44 * (VAR18 -> VAR41) / (VAR18 -> VAR39)),255) : VAR1 -> VAR37 -> VAR37 -> VAR38[0] -> VAR43);
VAR14 = FUN1(VAR1);
FUN14(VAR45,sizeof(VAR45),"FUN15 (VAR18 %s) VAR46 VAR47 for VAR48 VAR49 #%d:%d",FUN16(VAR1 -> VAR15 -> VAR18 -> VAR19),VAR1 -> VAR50,VAR1 -> VAR8);
FUN7(VAR1 -> VAR20,VAR1,VAR1 -> VAR15 -> VAR18);
static void FUN7(char *VAR22,CLASS2 *VAR1,CLASS3 *VAR12)
FUN7(VAR1 -> VAR20,VAR1,VAR1 -> VAR15 -> VAR18);
static void FUN7(char *VAR22,CLASS2 *VAR1,CLASS3 *VAR12)
FUN7(VAR1 -> VAR20,VAR1,VAR1 -> VAR15 -> VAR18);
static void FUN7(char *VAR22,CLASS2 *VAR1,CLASS3 *VAR12)
VAR6 = VAR22;
char *VAR5 = strchr(VAR6,',');
if (!memcmp(VAR6,"VAR25",8)) {
VAR7 = (VAR6[8]?FUN3("force_key_frames",(VAR6 + 8),1) : 0);
VAR4[VAR8++] = FUN4(VAR9 -> VAR10,VAR9 -> VAR11,VAR12 -> VAR11) + VAR7;
FUN5(VAR4,VAR3,sizeof(( *VAR4)),VAR13);
