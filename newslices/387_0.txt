*VAR1 = VAR2;
FUN1(&VAR3->VAR4, &VAR3->VAR5);
VAR6 = - 1;
VAR7 = (VAR6 + VAR8) >> 1;
VAR8 = VAR7;
VAR6 = VAR7;
VAR7= (VAR9 & VAR10) ? VAR6 : VAR8;
VAR7 += (VAR9 & VAR10) ? -1 : 1;
return -1;
return  VAR7;
return FUN2(VAR11->VAR12, VAR11->VAR13,
VAR14= FUN3(VAR11, VAR15, VAR9 | VAR10);
VAR14= FUN4(VAR14, 0);
assert(VAR14==0);
static void FUN1(CLASS1 **VAR16, CLASS1 **VAR1)
FUN1(&VAR3->VAR4, &VAR3->VAR5);
static void FUN5(CLASS2 *VAR3)
FUN5(VAR3);
void FUN6(CLASS2 *VAR3)
FUN6(VAR3);
return FUN7(VAR3, VAR17, VAR18, VAR9);
int FUN7(CLASS2 *VAR3, int VAR17, VAR19 VAR15, int VAR9)
VAR11= VAR3->VAR20[VAR17];
VAR14= FUN3(VAR11, VAR15, VAR9 | VAR10);
int FUN3(CLASS3 *VAR11, VAR19 VAR21,
return FUN2(VAR11->VAR12, VAR11->VAR13,
int FUN2(const CLASS4 *VAR22, int VAR23,
VAR8 = VAR23;
VAR6= VAR8-1;
VAR7= (VAR9 & VAR10) ? VAR6 : VAR8;
return  VAR7;
return FUN2(VAR11->VAR12, VAR11->VAR13,
VAR14= FUN3(VAR11, VAR15, VAR9 | VAR10);
VAR14= FUN4(VAR14, 0);
assert(VAR14==0);
