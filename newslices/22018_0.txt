static CLASS1 *FUN1(CLASS2 *VAR1)
VAR2[VAR3++] = FUN2(VAR4 -> VAR5,VAR4 -> VAR6,VAR7 -> VAR6) + VAR8;
char VAR9[1024];
VAR10 = FUN1(VAR1);
VAR1 -> VAR11 -> VAR12 = VAR10 -> VAR11 -> VAR12;
if (!VAR13 -> VAR14 -> VAR15 || (FUN3(VAR13 -> VAR14 -> VAR15,VAR16 -> VAR15)) == (VAR17 -> VAR18) || !FUN4(VAR13 -> VAR14 -> VAR15,VAR16 -> VAR18,&VAR15)) {
if (!strcmp(VAR13 -> VAR14 -> VAR19,"avi")) {
if (VAR20 < 0 && FUN5(VAR10 -> VAR11 -> VAR21) >= FUN5(VAR10 -> VAR11 -> VAR22) && 0.5 / FUN5(VAR10 -> VAR11 -> VAR21) > FUN5(VAR10 -> VAR11 -> VAR6) && 0.5 / FUN5(VAR10 -> VAR11 -> VAR21) > FUN5(VAR16 -> VAR6) && FUN5(VAR10 -> VAR11 -> VAR6) < 1.0 / 500 && FUN5(VAR16 -> VAR6) < 1.0 / 500 || VAR20 == 2) {
if (!(VAR13 -> VAR14 -> VAR23 & 0002000) && strcmp(VAR13 -> VAR14 -> VAR19,"mov") && strcmp(VAR13 -> VAR14 -> VAR19,"mp4") && strcmp(VAR13 -> VAR14 -> VAR19,"3gp") && strcmp(VAR13 -> VAR14 -> VAR19,"3g2") && strcmp(VAR13 -> VAR14 -> VAR19,"psp") && strcmp(VAR13 -> VAR14 -> VAR19,"ipod") && strcmp(VAR13 -> VAR14 -> VAR19,"f4v")) {
VAR1 -> VAR11 -> VAR22 = VAR10 -> VAR11 -> VAR22;
VAR1 -> VAR24 = FUN6(VAR17 -> VAR18);
FUN7(VAR9,sizeof(VAR9),"FUN8 (VAR17 %s) VAR25 VAR26 for VAR27 VAR28 #%FUN21:%FUN21",FUN9(VAR1 -> VAR11 -> VAR17 -> VAR18),VAR1 -> VAR29,VAR1 -> VAR3);
int VAR30 = FUN10(VAR1 -> VAR31,VAR1 -> VAR24 -> VAR32);
VAR1 -> VAR31 = VAR1 -> VAR24 -> VAR32[VAR30];
VAR17 -> VAR33 = FUN11(VAR1 -> VAR34 -> VAR34 -> VAR35[0]);
VAR1 -> VAR31 = FUN12(VAR1 -> VAR34 -> VAR34);
VAR17 -> VAR36 = VAR1 -> VAR11 -> VAR36 = (VAR1 -> VAR37?FUN13((VAR1 -> VAR37 * (VAR17 -> VAR38) / (VAR17 -> VAR39)),255) : VAR1 -> VAR34 -> VAR34 -> VAR35[0] -> VAR36);
FUN14(VAR1 -> VAR40,VAR1,VAR1 -> VAR11 -> VAR17);
if (!strcmp(VAR1 -> VAR24 -> VAR19,"libx264")) {
VAR1 = VAR41[VAR42];
if (VAR10 = FUN1(VAR1)) {
VAR1 -> VAR11 -> VAR17 -> VAR43 = (FUN15((VAR44 -> VAR45 + 1)));
memcpy((VAR1 -> VAR11 -> VAR17 -> VAR43),(VAR44 -> VAR43),(VAR44 -> VAR45));
VAR1 -> VAR11 -> VAR17 -> VAR45 = VAR44 -> VAR45;
if ((VAR46 = FUN16(VAR1 -> VAR11 -> VAR17,VAR17,&VAR1 -> VAR47)) < 0) {
if (VAR10 = FUN1(VAR1)) {
FUN7(VAR9,sizeof(VAR9),"VAR48 VAR49 VAR50 VAR51 for VAR27 VAR28 #%FUN21:%FUN21 - VAR52 VAR53 VAR54 VAR55 VAR56 VAR57, VAR58, VAR39 VAR59 VAR38",VAR1 -> VAR29,VAR1 -> VAR3);
FUN17(VAR1 -> VAR34 -> VAR34,(VAR1 -> VAR11 -> VAR17 -> VAR60));
FUN18((VAR1 -> VAR11 -> VAR17),&VAR1 -> VAR47);
if (VAR10 = FUN1(VAR1)) {
for (VAR42 = 0; VAR42 < VAR61; VAR42++) {
VAR13 = VAR62[VAR42] -> VAR63;
VAR13 -> VAR64 = VAR65;
if ((VAR46 = FUN19(VAR13,&VAR62[VAR42] -> VAR47)) < 0) {
char VAR66[128];
const char *VAR67 = VAR66;
if (FUN20(VAR46,VAR66,sizeof(VAR66)) < 0) {
VAR67 = (strerror(-VAR46));
FUN7(VAR9,sizeof(VAR9),"VAR68 VAR25 write VAR69 for VAR27 VAR70 #%FUN21 (VAR53 VAR17 VAR54 ?): %s",VAR42,VAR67);
if (strcmp(VAR13 -> VAR14 -> VAR19,"rtp")) {
if ((VAR46 = FUN19(VAR13,&VAR62[VAR42] -> VAR47)) < 0) {
if (FUN20(VAR46,VAR66,sizeof(VAR66)) < 0) {
VAR67 = (strerror(-VAR46));
FUN7(VAR9,sizeof(VAR9),"VAR68 VAR25 write VAR69 for VAR27 VAR70 #%FUN21 (VAR53 VAR17 VAR54 ?): %s",VAR42,VAR67);
static CLASS1 *FUN1(CLASS2 *VAR1)
if (VAR10 = FUN1(VAR1)) {
static CLASS1 *FUN1(CLASS2 *VAR1)
if (VAR10 = FUN1(VAR1)) {
static CLASS1 *FUN1(CLASS2 *VAR1)
if (VAR10 = FUN1(VAR1)) {
static CLASS1 *FUN1(CLASS2 *VAR1)
if (VAR10 = FUN1(VAR1)) {
FUN7(VAR9,sizeof(VAR9),"VAR48 VAR49 VAR50 VAR51 for VAR27 VAR28 #%FUN21:%FUN21 - VAR52 VAR53 VAR54 VAR55 VAR56 VAR57, VAR58, VAR39 VAR59 VAR38",VAR1 -> VAR29,VAR1 -> VAR3);
FUN7(VAR9,sizeof(VAR9),"VAR68 VAR25 write VAR69 for VAR27 VAR70 #%FUN21 (VAR53 VAR17 VAR54 ?): %s",VAR42,VAR67);
static void FUN14(char *VAR71,CLASS2 *VAR1,CLASS3 *VAR7)
FUN14(VAR1 -> VAR40,VAR1,VAR1 -> VAR11 -> VAR17);
if (VAR10 = FUN1(VAR1)) {
static void FUN14(char *VAR71,CLASS2 *VAR1,CLASS3 *VAR7)
VAR1 = VAR41[VAR42];
VAR10 = FUN1(VAR1);
VAR17 -> VAR39 = VAR1 -> VAR34 -> VAR34 -> VAR35[0] -> VAR72;
VAR17 -> VAR38 = VAR1 -> VAR34 -> VAR34 -> VAR35[0] -> VAR73;
VAR17 -> VAR36 = VAR1 -> VAR11 -> VAR36 = (VAR1 -> VAR37?FUN13((VAR1 -> VAR37 * (VAR17 -> VAR38) / (VAR17 -> VAR39)),255) : VAR1 -> VAR34 -> VAR34 -> VAR35[0] -> VAR36);
FUN14(VAR1 -> VAR40,VAR1,VAR1 -> VAR11 -> VAR17);
CLASS3 *VAR44 = ((void *)0);
if (VAR10 = FUN1(VAR1)) {
memcpy((VAR1 -> VAR11 -> VAR17 -> VAR43),(VAR44 -> VAR43),(VAR44 -> VAR45));
if ((VAR46 = FUN16(VAR1 -> VAR11 -> VAR17,VAR17,&VAR1 -> VAR47)) < 0) {
if (VAR10 = FUN1(VAR1)) {
