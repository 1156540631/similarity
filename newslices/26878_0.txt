char *VAR1;
VAR2 = VAR2->VAR3;
VAR4 = FUN1(VAR5);
VAR6 += FUN2(VAR7, VAR5, VAR8, VAR9 + 1, VAR10);
CLASS1 *VAR5;
return (VAR2);
VAR4 = FUN1(VAR5);
VAR5->VAR11 |= VAR4->VAR11 & VAR12;
(void) FUN2(VAR13, VAR14, &VAR10->VAR15, 0, VAR10);
VAR6 += FUN2(VAR7, VAR5, VAR8, VAR9 + 1, VAR10);
CLASS1 *VAR5;
VAR6 += FUN2(VAR7, VAR5, VAR8, VAR9 + 1, VAR10);
CLASS1 **VAR8;
char *VAR16 = VAR10->VAR17;
VAR10->VAR17 = VAR16;
register CLASS2 *VAR10;
(VAR18) 0, VAR10);
FUN3(VAR2, VAR8, VAR9, VAR10);
if (FUN4(VAR2, VAR8, VAR9, VAR10) == VAR19)
VAR10->VAR20 = FUN5("VAR21: VAR22 VAR23 VAR24");
VAR10->VAR25++;
(void) FUN2(VAR13, VAR14, &VAR10->VAR15, 0, VAR10);
FUN6(VAR2, VAR8, VAR9 + 1, VAR10);
(VAR18) 0, VAR10);
if (FUN7(VAR26, VAR10->VAR27))
FUN8(VAR2, VAR8, VAR9, VAR10);
VAR10->VAR25++;
VAR10->VAR27 |= VAR28;
fprintf(VAR10->VAR29,
VAR2 = FUN9(VAR2, VAR8, VAR9, VAR10);
register CLASS2 *VAR10;
char *VAR16 = VAR10->VAR17;
VAR16, FUN10(VAR7, 203));
VAR10->VAR17 = VAR16;
CLASS2 *VAR10;
VAR30 = FUN11(VAR2->VAR31, VAR32, VAR2, VAR8, VAR9, VAR10);
CLASS2 *VAR10;
VAR10->VAR25++;
VAR30 = FUN11(VAR2->VAR31, VAR32, VAR2, VAR8, VAR9, VAR10);
CLASS2 *VAR10;
VAR6 += FUN2(VAR7, VAR5, VAR8, VAR9 + 1, VAR10);
register CLASS2 *VAR10;
strchr(VAR1, '<') != VAR33 || strchr(VAR1, '(') != VAR33))
(strchr(VAR1, ',') != VAR33 || strchr(VAR1, ';') != VAR33 ||
VAR34 = strlen(VAR1) + 1;
VAR35 = FUN12(VAR34);
strcpy(VAR35, FUN13(VAR1, VAR32, VAR36));
for (VAR13 = VAR35; *VAR13 != '\'; )
VAR2 = FUN14(VAR13, VAR14, VAR37, VAR38, &VAR39, VAR10);
VAR2->VAR3 = VAR5;
VAR40 = VAR2;
register CLASS1 *VAR2 = VAR40;
FUN15(*VAR8, VAR36);
register CLASS1 **VAR8;
FUN3(VAR2, VAR8, VAR9, VAR10);
if (FUN4(VAR2, VAR8, VAR9, VAR10) == VAR19)
FUN6(VAR2, VAR8, VAR9 + 1, VAR10);
FUN8(VAR2, VAR8, VAR9, VAR10);
VAR2 = FUN9(VAR2, VAR8, VAR9, VAR10);
register CLASS1 *VAR2;
register CLASS1 **VAR8;
bool VAR41 = FUN7(VAR42, VAR2->VAR11);
FUN15(VAR2, VAR32);
VAR34 = strlen(VAR2->VAR31);
(void) strcpy(VAR7, VAR2->VAR31);
for (VAR43 = VAR8; (VAR44 = *VAR43) != VAR33; VAR43 = &VAR44->VAR45)
if (FUN16(VAR44, VAR2))
VAR2 = VAR44;
if (FUN16(VAR44, VAR2))
FUN15(VAR44, VAR32);
VAR2 = VAR44;
if (FUN7(VAR42|VAR46|VAR47, VAR2->VAR11))
VAR30 = FUN11(VAR2->VAR31, VAR32, VAR2, VAR8, VAR9, VAR10);
CLASS1 *VAR5;
FUN15(VAR5, VAR32);
VAR4 = FUN1(VAR5);
register CLASS1 *VAR2;
VAR4 = FUN1(VAR5);
CLASS1 *VAR5;
VAR30 = FUN11(VAR2->VAR31, VAR32, VAR2, VAR8, VAR9, VAR10);
CLASS1 *VAR5;
VAR4 = FUN1(VAR5);
register CLASS1 *VAR2;
FUN17 (VAR2 != VAR33 && !FUN7(VAR48, VAR2->VAR11))
register CLASS1 *VAR2;
return (VAR2);
VAR4 = FUN1(VAR5);
VAR5->VAR11 |= VAR4->VAR11 & VAR12;
CLASS1 *VAR5;
VAR30 = FUN11(VAR2->VAR31, VAR32, VAR2, VAR8, VAR9, VAR10);
CLASS1 *VAR5;
VAR4 = FUN1(VAR5);
register CLASS1 *VAR2;
VAR4 = FUN1(VAR5);
CLASS1 *VAR5;
VAR30 = FUN11(VAR2->VAR31, VAR32, VAR2, VAR8, VAR9, VAR10);
FUN18("VAR49 VAR50 %s", VAR2->VAR31);
VAR30 = FUN11(VAR2->VAR31, VAR32, VAR2, VAR8, VAR9, VAR10);
char *VAR51;
VAR52 = FUN19(VAR51, VAR53, VAR54, VAR55, VAR56, VAR57, VAR33);
VAR58 = fopen(VAR51, "r");
if (FUN20(fileno(VAR58), &VAR59) < 0)
VAR60 = FUN21(fileno(VAR58));
FUN17 (fgets(VAR7, sizeof VAR7, VAR58) != VAR33)
register char *VAR13 = strchr(VAR7, '\');
