const unsigned char *VAR1 = VAR2->VAR3 + 16;
const unsigned char *VAR4;
if (VAR5 || VAR6 || (VAR7 != VAR2->VAR8->VAR9) || (VAR10 != VAR2->VAR8->VAR11))
memcpy(VAR2->VAR12.VAR13[0], VAR2->VAR14.VAR13[0],VAR2->VAR8->VAR11 * VAR2->VAR12.VAR15[0]);
if (VAR2->VAR16 >= 0)
VAR4 = VAR1;
VAR17 = *VAR4++;
if (VAR17 & 0x80)
FUN1(VAR4, VAR2->VAR18, VAR2->VAR19);
VAR17 &= 0x7F;
VAR20 VAR21;
VAR21.VAR22 = VAR4;
VAR4 = FUN2(VAR21);
void FUN2(VAR20 VAR21)
char * VAR4 = VAR21.VAR22;
VAR4 = VAR2->VAR18;
return VAR4
switch (VAR17)
case 1:
for (VAR23 = 0; VAR23 < VAR10; VAR23++)
do
VAR24 = *VAR4++;
if (VAR24 & 0x80)
VAR24 = (VAR24 & 0x7F) + 1;
if (VAR25 + VAR24 > VAR7)
return;
memcpy(&VAR26[VAR25], VAR4, VAR24);
VAR4 += VAR24;
if (VAR25 + VAR24 + 1 > VAR7)
return;
memcpy(&VAR26[VAR25], &VAR27[VAR25], VAR24 + 1);
case 2:
for (VAR23 = 0; VAR23 < VAR10; VAR23++)
memcpy(VAR26, VAR4, VAR7);
VAR4 += VAR7;
case 3:
for (VAR23 = 0; VAR23 < VAR10; VAR23++)
do
VAR24 = *VAR4++;
if (VAR24 & 0x80)
VAR24 = (VAR24 & 0x7F) + 1;
if (*VAR4++ == 0xFF)
VAR24 = FUN3(VAR4, &VAR26[VAR25], VAR24, VAR7 - VAR25);
else
memcpy(&VAR26[VAR25], VAR4, VAR24);
VAR4 += VAR24;
VAR25 += VAR24;
else
if (VAR25 + VAR24 + 1 > VAR7)
return;
memcpy(&VAR26[VAR25], &VAR27[VAR25], VAR24 + 1);
