return FUN1(VAR1);
return sizeof(VAR2) + FUN2(VAR3) +
FUN2(VAR4) + FUN3();
VAR5 VAR6 = FUN2(VAR7->VAR3);
return VAR8;
return VAR9;
VAR10 = VAR11.FUN4(VAR7);
VAR12.FUN5(VAR10->FUN6(), VAR7->FUN3());
return VAR9 + FUN2(VAR3) + FUN2(VAR4);
return sizeof(VAR13) + FUN2(VAR3) +
FUN2(VAR4) + FUN2(VAR14);
const char *VAR15;
VAR7 = (VAR13 *)((char *)VAR16 + VAR16->FUN7());
VAR7 = (VAR13 *)(VAR15 + FUN1(VAR17->VAR18));
!VAR7->FUN8())
if (((char *)VAR7 + VAR7->FUN7()) > VAR19 ||
return VAR8;
return VAR7;
FUN9 ((VAR7 = VAR11.FUN10(VAR7))) {
VAR12.FUN5(VAR10->FUN6(), VAR7->FUN3());
return FUN1(VAR20);
if (((char *)VAR9 + VAR9->FUN7()) > (char *)VAR17)
return VAR9;
VAR10 = VAR11.FUN4(VAR7);
VAR21 VAR12;
VAR12.FUN5(VAR10->FUN6(), VAR7->FUN3());
VAR12.FUN5(VAR10->FUN6(), VAR7->FUN3());
const char *VAR22 = VAR12.FUN11();
VAR23<VAR24> VAR25;
VAR26 = strstr(VAR22, "\n");
} FUN9 (VAR26 && *(VAR22 = VAR26 + 1));
VAR26 = strstr(VAR22, "\n");
VAR24 VAR27;
sscanf(VAR22, "%d %d %d", &VAR28, &VAR29, &VAR30) == 3) {
} else if (sscanf(VAR22, "VAR31 %d %d %s",
&VAR27.VAR32, &VAR27.VAR33, VAR27.VAR34)) {
VAR25.FUN12(VAR27);
for (VAR35 VAR36 = 0; VAR36 < VAR25.FUN13(); VAR36++) {
for (VAR35 VAR36 = 0; VAR36 < VAR25.FUN13(); VAR36++) {
VAR24 &VAR27 = VAR25[VAR36];
VAR37 &VAR38 = VAR27.VAR39[VAR40];
void *VAR41;
0, 0, VAR28, VAR29, &VAR41)) {
memcpy(VAR41, VAR38.VAR42,
VAR21 FUN14(const VAR13 *VAR7)
VAR21 VAR43 = VAR11.FUN14(VAR7);
VAR10 = VAR11.FUN4(VAR7);
const VAR2 * FUN4(const VAR13 *VAR7)
(VAR2 *)(VAR15 + FUN1(VAR7->VAR44));
const VAR2 * VAR9 =
if (((char *)VAR9 + VAR9->FUN7()) > (char *)VAR17)
FUN2(VAR4) + FUN3();
if (((char *)VAR9 + VAR9->FUN7()) > (char *)VAR17)
return VAR9;
VAR10 = VAR11.FUN4(VAR7);
VAR12.FUN5(VAR10->FUN6(), VAR7->FUN3());
return VAR9 + FUN2(VAR3) + FUN2(VAR4);
VAR12.FUN5(VAR10->FUN6(), VAR7->FUN3());
const char *VAR22 = VAR12.FUN11();
VAR26 = strstr(VAR22, "\n");
sscanf(VAR22, "%d %d %d", &VAR28, &VAR29, &VAR30) == 3) {
} else if (sscanf(VAR22, "VAR31 %d %d %s",
&VAR27.VAR32, &VAR27.VAR33, VAR27.VAR34)) {
VAR25.FUN12(VAR27);
for (VAR35 VAR36 = 0; VAR36 < VAR25.FUN13(); VAR36++) {
for (VAR35 VAR36 = 0; VAR36 < VAR25.FUN13(); VAR36++) {
VAR24 &VAR27 = VAR25[VAR36];
VAR37 &VAR38 = VAR27.VAR39[VAR40];
memcpy(VAR41, VAR38.VAR42,
