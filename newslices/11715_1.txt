*VAR1 = VAR2;
*VAR1 = VAR2;
return VAR3 - 32;
int VAR4 = 596;
char *VAR5;;
FUN1(&VAR5,"2000",VAR4);
VAR6 = ((void *)VAR5);
VAR7[5] = VAR6;
VAR8 = 5;
VAR9 = &VAR8;
VAR10 =  *(VAR7 +  *VAR9);
FUN2(VAR10);
VAR11[64 - 1] = '\';
FUN3(VAR12, VAR13, "VAR11", VAR11, "VAR14-VAR15");
FUN3(VAR12, VAR13, "VAR11", VAR11, "VAR16-VAR15");
VAR11[VAR17] = FUN4(VAR11[VAR17]);
FUN5("%s\n",&(VAR11[VAR18+1]));
free(VAR11);
void FUN6(void *VAR19)
VAR20 = ((char *)((char *)VAR19));
VAR21 = ((int )(strlen(VAR20)));
VAR11[VAR18] = VAR20[VAR21];
FUN3(VAR12, VAR13, "VAR11", VAR11, "VAR16-VAR15");
free(VAR11);
int FUN4(int VAR3)
return VAR3;
VAR11[VAR17] = FUN4(VAR11[VAR17]);
free(VAR11);
void FUN5(char * VAR22, ...) {
FUN5("%s\n",&(VAR11[VAR18+1]));
free(VAR11);
void FUN1(char** VAR1, char* VAR23, int VAR24) {
if ((VAR25 = FUN7(VAR26, VAR24, 0666)) >= 0) {
*VAR1 = (char*)calloc(VAR24, sizeof(char));
FUN1(&VAR5,"2000",VAR4);
VAR6 = ((void *)VAR5);
VAR7[5] = VAR6;
VAR10 =  *(VAR7 +  *VAR9);
FUN2(VAR10);
