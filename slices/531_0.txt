if ((VAR1 = FUN1(VAR7, VAR10)) > 0)
VAR1 = FUN2(VAR6->VAR5, VAR14->VAR10, 0);V
FUN3(VAR6->VAR5) == VAR6->VAR5->VAR8)
VAR6  = VAR6->VAR4[VAR9.VAR41];
FUN4(VAR6, VAR6, NULL, VAR14);
VAR6 = VAR6->VAR4[VAR14->VAR41];
VAR6->VAR11 = 0;
FUN5(VAR6, VAR14->VAR12, VAR14->VAR15, 0, 0, VAR16);
VAR25 = FUN6(*VAR18,
(*VAR19 + 1) *
*VAR18= VAR25;
VAR6= FUN7(*VAR18, *VAR19, VAR20, VAR21);
return FUN8(&VAR6->VAR18, &VAR6->VAR19,
int *VAR19,
&VAR6->VAR22, VAR12,
unsigned int *VAR22,
if((unsigned)*VAR19 + 1 >= UINT_MAX / sizeof(VAR23))
VAR22,
(*VAR19 + 1) *
sizeof(VAR23));
VAR25 = FUN6(*VAR18,
sizeof(VAR23));
(*VAR19 + 1) *
VAR3 = - 1;
VAR3= VAR6-1;
VAR17 = (VAR3 + VAR6) >> 1;
VAR6 = VAR17;
VAR3 = VAR17;
VAR17= (VAR2 & VAR24) ? VAR3 : VAR6;
VAR17 += (VAR2 & VAR24) ? -1 : 1;
return -1;
return  VAR17;
VAR6= FUN7(*VAR18, *VAR19, VAR20, VAR21);
memmove(VAR25 + VAR6 + 1, VAR25 + VAR6, sizeof(VAR23)*(*VAR19 - VAR6));
static void FUN4(CLASS2 *VAR6, CLASS2 *VAR6,
FUN4(VAR6, VAR6, NULL, VAR14);
FUN5(VAR6, VAR14->VAR12, VAR14->VAR15, 0, 0, VAR16);
int FUN5(CLASS2 *VAR6,
FUN5(VAR6, VAR14->VAR12, VAR14->VAR15, 0, 0, VAR16);
FUN5(VAR6, VAR14->VAR12, VAR14->VAR15, 0, 0, VAR16);
return FUN8(&VAR6->VAR18, &VAR6->VAR19,
int *VAR19,
memmove(VAR25 + VAR6 + 1, VAR25 + VAR6, sizeof(VAR23)*(*VAR19 - VAR6));
int FUN8(VAR23 **VAR18,
VAR25 = FUN6(*VAR18,
memmove(VAR25 + VAR6 + 1, VAR25 + VAR6, sizeof(VAR23)*(*VAR19 - VAR6));
static int FUN9(CLASS2 *VAR6)
if(VAR14->VAR10 != VAR13 && VAR26 <= VAR28 && FUN9(VAR6)){
static void FUN10(int *VAR29, int *VAR30, CLASS2 *VAR6,
FUN10(&VAR38, &VAR31, VAR6, VAR27, VAR14);
if(VAR14->VAR10 != VAR13 && VAR26 <= VAR28 && FUN9(VAR6)){
int FUN7(const VAR23 *VAR25, int VAR32,
VAR6= FUN7(*VAR18, *VAR19, VAR20, VAR21);
return FUN8(&VAR6->VAR18, &VAR6->VAR19,
VAR6 = VAR32;
VAR17= (VAR2 & VAR24) ? VAR3 : VAR6;
return  VAR17;
VAR6= FUN7(*VAR18, *VAR19, VAR20, VAR21);
memmove(VAR25 + VAR6 + 1, VAR25 + VAR6, sizeof(VAR23)*(*VAR19 - VAR6));
static int FUN2(CLASS3 *VAR7, int VAR10, int mux)
VAR1 = FUN2(VAR6->VAR5, VAR14->VAR10, 0);
