CLASS1::FUN1(CLASS2 *VAR2)
CLASS5 VAR7;
VAR7.FUN2(VAR2);
VAR7.VAR3 = CLASS3::FUN3(VAR2,
VAR7.FUN2(VAR2);
VAR7.FUN2(VAR2);
VAR7.VAR3 = CLASS3::FUN3(VAR2,
VAR7.VAR3 += CLASS6::FUN6(VAR4, 0);
VAR14->FUN5(VAR2, &VAR7);
VAR7.FUN2(VAR2);
VAR7.VAR3 = CLASS3::FUN3(VAR2,
VAR14->FUN5(VAR2, &VAR7);
VAR7.VAR5, VAR7.VAR3);
return CLASS7::Resolve(VAR8);
for (CLASS1* VAR6 = VAR8; VAR6;
VAR6 = static_cast<CLASS1*>(VAR6->FUN7())) {
for (CLASS4 VAR1 = VAR6->FUN9(), VAR9 = VAR6->FUN8();
VAR1->FUN13() ? "block" : "inline",
VAR1->FUN4() ? ", empty" : "");
if (VAR1->FUN13()) {
VAR1->VAR10, CLASS3::VAR16);
VAR7.VAR3 = CLASS3::FUN3(VAR2,
VAR7.VAR1 = &VAR1;
VAR7.FUN2(VAR2);
VAR7.FUN2(VAR2);
VAR1 == VAR6->FUN9()) {
if (!VAR6->FUN12() &&
const CLASS8 &VAR4 = FUN10()->VAR11;
if (VAR4.FUN11())
VAR14->FUN5(VAR2, &VAR7);
VAR7.VAR3 += CLASS6::FUN6(VAR4, 0);
for (int32_t VAR13 = 0, VAR12 = VAR1->FUN4(); VAR13 != VAR12;
VAR7.VAR1 = &VAR1;
VAR7.VAR15 = VAR6;
VAR7.VAR5, VAR7.VAR3);
VAR14->FUN5(VAR2, &VAR7);
VAR7.VAR5, VAR7.VAR3);
