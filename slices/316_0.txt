CLASS4 VAR1[VAR2 + 1] = {L'\0'};
wcsncpy(VAR1, VAR3, VAR2);
wcsncpy(VAR4, VAR5[2], VAR2);
bool VAR7 = FUN1(VAR6, VAR5);
if (!FUN2(VAR8)) {
if (!FUN3(VAR8, L"update")) {
FUN4(VAR8, NULL);
if (!FUN3(VAR8, L"updater.exe")) {
VAR9 = FUN5(VAR8);
VAR8));
if (FUN6(VAR10, VAR8,
CLASS4 VAR11[VAR2 + 1] = { L'\0' };
VAR9 = FUN7(VAR11);
VAR12, VAR11));
FUN8(VAR11);
VAR14[3] = VAR11;
VAR9 = FUN9(VAR13 - 3, VAR14 + 3);
FUN9(CLASS3 VAR13, CLASS1 *VAR14)
if (!FUN10(VAR13, VAR14, VAR15)) {
FUN10(int VAR6, CLASS1 *VAR5, CLASS4 VAR4[VAR2 + 1])
if (!FUN11(VAR14[0], VAR16) || !VAR16) {
CLASS5 FUN13(FUN12(VAR14[0], VAR17, VAR18,
if (VAR9 && !FUN14(VAR14[0], VAR19,
CLASS6 VAR28 = FUN15(VAR14[0], NULL,
VAR14[0]);
if (FUN16(VAR13, VAR14, VAR15,
CLASS1 *VAR14,
CLASS1 VAR23 = FUN17(VAR13, VAR14);
CLASS7* FUN17(int VAR13, CLASS7 **VAR14);
FUN6(VAR20, VAR14[0], L"updater.VAR26")) {
BOOL FUN6(CLASS1 VAR21,  CLASS2 VAR22,
if (FUN6(VAR24, VAR14[0], L"updater.ini") &&
VAR29 = FUN18(VAR14[0], VAR23,
if (FUN19(VAR14[1], VAR25) && VAR25) {
VAR9 = FUN20(VAR12, VAR11, FALSE);
VAR14[3] = VAR11;
VAR9 = FUN9(VAR13 - 3, VAR14 + 3);
BOOL FUN6(CLASS1 VAR21,  CLASS2 VAR22,
VAR29 = FUN18(VAR14[0], VAR23,
if (FUN19(VAR14[1], VAR25) && VAR25) {
FUN19(CLASS2 VAR3, BOOL &VAR25)
wcsncpy(VAR1, VAR3, VAR2);
FUN8(CLASS4 VAR8[VAR2 + 1])
VAR9 = FUN20(VAR12, VAR11, FALSE);
VAR14[3] = VAR11;
VAR9 = FUN9(VAR13 - 3, VAR14 + 3);
FUN7(CLASS4 VAR8[VAR2 + 1])
if (!FUN21(NULL, VAR8, VAR2)) {
VAR14[3] = VAR11;
VAR9 = FUN9(VAR13 - 3, VAR14 + 3);
FUN1(int VAR13, CLASS1 *VAR14)
return VAR13 == 4 && !wcscmp(VAR14[3], L"-1");
bool VAR27 = (VAR6 >= 4 && wcsstr(VAR5[3], L"/replace"));
if (!FUN11(VAR14[0], VAR16) || !VAR16) {
CLASS5 FUN13(FUN12(VAR14[0], VAR17, VAR18,
if (VAR9 && !FUN14(VAR14[0], VAR19,
CLASS6 VAR28 = FUN15(VAR14[0], NULL,
VAR14[0]);
if (FUN16(VAR13, VAR14, VAR15,
CLASS1 *VAR14,
CLASS1 VAR23 = FUN17(VAR13, VAR14);
