static char VAR39[VAR359 + 1];
VAR436 = VAR437 = &VAR39[sizeof(VAR39) - 1];
VAR73 = VAR438 = VAR39;
VAR321 = VAR73;
while ((VAR4 = *VAR138++) != '\0')
printf("VAR4 = %VAR4\VAR7", VAR4);
VAR436--;
VAR436++;
VAR436--;
FUN106(' ');
FUN106(VAR4);
VAR436++;
VAR73--;
FUN106(VAR4);
FUN106(*VAR138);
VAR438 = VAR73;
VAR73 = VAR438;
FUN106('"');
VAR439 = VAR138;
for (VAR440 = VAR439; VAR440 < VAR138; )
VAR4 = *VAR440++;
FUN106('\\');
FUN106(VAR4);
FUN106(VAR4);
VAR73--;
FUN106('"');
while ((VAR4 = *VAR138++) != ':')
FUN106(VAR4);
FUN106(*VAR138);
FUN106(VAR4);
if (strchr(VAR441, VAR4) != NULL)
VAR436--;
VAR73 = VAR438;
FUN106('"');
for (VAR440 = VAR439; VAR440 < VAR138; )
VAR4 = *VAR440++;
FUN106('\\');
FUN106(VAR4);
FUN106(VAR4);
VAR73--;
FUN106('"');
while ((VAR4 = *VAR138++) != '<')
FUN106(VAR4);
VAR436++;
VAR73--;
FUN106(VAR4);
FUN106(' ');
FUN106(VAR442);
FUN106('g');
FUN106(VAR4);
FUN106(VAR4);
#define FUN106(VAR4)                   \
do                          \
{                           \
printf ("VAR73-VAR321 = %d   VAR436-VAR321=%d\VAR7", (VAR73-VAR321), (VAR436-VAR321)); \
if (VAR443)               \
*VAR73++ = (VAR4);                \
else                        \
goto returng;               \
} while (0)
