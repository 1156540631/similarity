CLASS1 VCMSessionInfo::InsertBuffer(uint8_t* frame_buffer,
VAR1.dataPtr = frame_buffer + VAR2;
const CLASS1 kH264NALHeaderLengthInBytes = 1;
const CLASS1 kLengthFieldLength = 2;
nalu_ptr = packet_buffer + kH264NALHeaderLengthInBytes;
CLASS1 VAR31 = BufferToUWord16(nalu_ptr);
nalu_ptr += kLengthFieldLength;
frame_buffer_ptr += Insert(nalu_ptr,
VAR31,
const_cast<uint8_t*>(VAR1.dataPtr));
CLASS1 VAR31,
uint8_t* frame_buffer) {
memcpy(frame_buffer, startCode, kH264StartCodeLengthBytes);
memcpy(frame_buffer + (insert_start_code ? kH264StartCodeLengthBytes : 0),
VAR31);
return VAR31;
frame_buffer_ptr += Insert(nalu_ptr,
const_cast<uint8_t*>(frame_buffer_ptr));
uint8_t* frame_buffer) {
memcpy(frame_buffer + (insert_start_code ? kH264StartCodeLengthBytes : 0),
IsNewerSequenceNumber(first_packet_seq_num_, VAR1.seqNum))) {
IsNewerSequenceNumber(VAR1.seqNum, last_packet_seq_num_))) {
IsNewerSequenceNumber(VAR1.seqNum, last_packet_seq_num_)) {
PacketIterator packet_list_it = packets_.insert(rit.VAR3(), VAR1);
CLASS1 returnLength = InsertBuffer(frame_buffer, packet_list_it);
PacketIterator packet_it) {
VCMPacket& VAR1 = *packet_it;
const uint8_t* packet_buffer = VAR1.dataPtr;
nalu_ptr = packet_buffer + kH264NALHeaderLengthInBytes;
CLASS1 VAR31 = BufferToUWord16(nalu_ptr);
VAR31,
CLASS1 VAR31,
VAR31);
return VAR31;
frame_buffer_ptr += Insert(nalu_ptr,
const_cast<uint8_t*>(frame_buffer_ptr));
uint8_t* frame_buffer) {
memcpy(frame_buffer + (insert_start_code ? kH264StartCodeLengthBytes : 0),
int VCMSessionInfo::InsertPacket(const VCMPacket& VAR1,
uint8_t* frame_buffer,
IsNewerSequenceNumber(first_packet_seq_num_, VAR1.seqNum)) {
last_packet_seq_num_ = static_cast<int>(VAR1.seqNum);
PacketIterator packet_list_it = packets_.insert(rit.VAR3(), VAR1);
CLASS1 returnLength = InsertBuffer(frame_buffer, packet_list_it);
PacketIterator packet_it) {
VCMPacket& VAR1 = *packet_it;
const uint8_t* packet_buffer = VAR1.dataPtr;
nalu_ptr = packet_buffer + kH264NALHeaderLengthInBytes;
CLASS1 VAR31 = BufferToUWord16(nalu_ptr);
VAR31,
CLASS1 VAR31,
VAR31);
return VAR31;
frame_buffer_ptr += Insert(nalu_ptr,
const_cast<uint8_t*>(frame_buffer_ptr));
uint8_t* frame_buffer) {
memcpy(frame_buffer + (insert_start_code ? kH264StartCodeLengthBytes : 0),
if (packets_.VAR2() == kMaxPacketsInSession) {
ReversePacketIterator rit = packets_.rbegin();
for (; rit != packets_.rend(); ++rit)
if (rit != packets_.rend() &&
PacketIterator packet_list_it = packets_.insert(rit.VAR3(), VAR1);
CLASS1 returnLength = InsertBuffer(frame_buffer, packet_list_it);
VCMPacket& VAR1 = *packet_it;
CLASS1 VAR2 = 0;
VAR2 += (*it).sizeBytes;
const uint8_t* packet_buffer = VAR1.dataPtr;
VAR1.dataPtr = frame_buffer + VAR2;
nalu_ptr = packet_buffer + kH264NALHeaderLengthInBytes;
uint8_t* frame_buffer_ptr = frame_buffer + VAR2;
nalu_ptr += VAR31;
CLASS1 VAR31 = BufferToUWord16(nalu_ptr);
VAR31,
CLASS1 VAR31,
VAR31);
VAR31 += (insert_start_code ? kH264StartCodeLengthBytes : 0);
return VAR31;
frame_buffer_ptr += Insert(nalu_ptr,
const_cast<uint8_t*>(frame_buffer_ptr));
const_cast<uint8_t*>(VAR1.dataPtr));
uint8_t* frame_buffer) {
memcpy(frame_buffer + (insert_start_code ? kH264StartCodeLengthBytes : 0),
CLASS1 VCMSessionInfo::Insert(const uint8_t* VAR2,
VAR2,
CLASS1 VAR31 = BufferToUWord16(nalu_ptr);
VAR31,
CLASS1 VAR31,
VAR31);
return VAR31;
frame_buffer_ptr += Insert(nalu_ptr,
const_cast<uint8_t*>(frame_buffer_ptr));
uint8_t* frame_buffer) {
memcpy(frame_buffer + (insert_start_code ? kH264StartCodeLengthBytes : 0),
