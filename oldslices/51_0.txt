if (!vmsvga_verify_rect(surface, __func__, x, y, w, h)) {
const char *name,
fprintf(stderr, "%s: x was < 0 (%d)\n", name, x);
DisplaySurface *surface = qemu_console_surface(s->vga.con);
if (!vmsvga_verify_rect(surface, "vmsvga_copy_rect/src", x0, y0, w, h)) {
const char *name,
fprintf(stderr, "%s: x was < 0 (%d)\n", name, x);
if (!vmsvga_verify_rect(surface, "vmsvga_copy_rect/dst", x1, y1, w, h)) {
const char *name,
fprintf(stderr, "%s: x was < 0 (%d)\n", name, x);
DisplaySurface *surface = qemu_console_surface(s->vga.con);
if (!vmsvga_verify_rect(surface, __func__, x, y, w, h)) {
const char *name,
fprintf(stderr, "%s: x was < 0 (%d)\n", name, x);
dpy_cursor_define(s->vga.con, qc);
dx = vmsvga_fifo_read(s);
if (vmsvga_copy_rect(s, x, y, dx, dy, width, height) == 0) {
int x0, int y0, int x1, int y1, int w, int h)
if (!vmsvga_verify_rect(surface, "vmsvga_copy_rect/dst", x1, y1, w, h)) {
int x, int y, int w, int h)
fprintf(stderr, "%s: x was < 0 (%d)\n", name, x);
trace_vmware_palette_write(s->index, value);
trace_vmware_value_write(s->index, value);
vmsvga_fifo_run(s);
DisplaySurface *surface = qemu_console_surface(s->vga.con);
s->vga.vram_ptr);
dpy_gfx_replace_surface(s->vga.con, surface);
struct vmsvga_state_s *s = opaque;
vmsvga_value_write(s, addr, data);
static inline int vmsvga_fill_rect(struct vmsvga_state_s *s,
if (vmsvga_fill_rect(s, colour, x, y, width, height) == 0) {
vmsvga_fifo_read(s);
static inline uint32_t vmsvga_fifo_read(struct vmsvga_state_s *s)
return le32_to_cpu(vmsvga_fifo_read_raw(s));
vmsvga_fifo_read(s);
vmsvga_fifo_read(s);
args = 7 + (vmsvga_fifo_read(s) >> 2);
vmsvga_fifo_read(s);
x = vmsvga_fifo_read(s);
static inline uint32_t vmsvga_fifo_read_raw(struct vmsvga_state_s *s)
uint32_t cmd = s->fifo[CMD(stop) >> 2];
return cmd;
return le32_to_cpu(vmsvga_fifo_read_raw(s));
x = vmsvga_fifo_read(s);
if (vmsvga_copy_rect(s, x, y, dx, dy, width, height) == 0) {
int x0, int y0, int x1, int y1, int w, int h)
if (!vmsvga_verify_rect(surface, "vmsvga_copy_rect/src", x0, y0, w, h)) {
int x, int y, int w, int h)
fprintf(stderr, "%s: x was < 0 (%d)\n", name, x);
static inline uint32_t vmsvga_fifo_read(struct vmsvga_state_s *s)
vmsvga_fifo_read(s);
x = vmsvga_fifo_read(s);
static inline uint32_t vmsvga_fifo_read(struct vmsvga_state_s *s)
return le32_to_cpu(vmsvga_fifo_read_raw(s));
static inline uint32_t vmsvga_fifo_read_raw(struct vmsvga_state_s *s)
uint32_t cmd = s->fifo[CMD(stop) >> 2];
return cmd;
return le32_to_cpu(vmsvga_fifo_read_raw(s));
x = vmsvga_fifo_read(s);
if (vmsvga_copy_rect(s, x, y, dx, dy, width, height) == 0) {
int x0, int y0, int x1, int y1, int w, int h)
if (!vmsvga_verify_rect(surface, "vmsvga_copy_rect/src", x0, y0, w, h)) {
int x, int y, int w, int h)
fprintf(stderr, "%s: x was < 0 (%d)\n", name, x);
static void vmsvga_fifo_run(struct vmsvga_state_s *s)
len = vmsvga_fifo_length(s);
vmsvga_fifo_run(s);
vmsvga_update_rect_flush(s);
static inline int vmsvga_fifo_length(struct vmsvga_state_s *s)
len = vmsvga_fifo_length(s);
x = vmsvga_fifo_read(s);
static void vmsvga_value_write(void *opaque, uint32_t address, uint32_t value)
trace_vmware_scratch_write(s->index, value);
vmsvga_fifo_run(s);
static void vmsvga_update_display(void *opaque)
vmsvga_check_size(s);
static inline void vmsvga_check_size(struct vmsvga_state_s *s)
vmsvga_check_size(s);
vmsvga_fifo_run(s);
static inline void vmsvga_update_rect_flush(struct vmsvga_state_s *s)
rect = &s->redraw_fifo[s->redraw_fifo_first++];
vmsvga_update_rect(s, rect->x, rect->y, rect->w, rect->h);
int x, int y, int w, int h)
if (!vmsvga_verify_rect(surface, __func__, x, y, w, h)) {
int x, int y, int w, int h)
fprintf(stderr, "%s: x was < 0 (%d)\n", name, x);
static inline int vmsvga_copy_rect(struct vmsvga_state_s *s,
if (vmsvga_copy_rect(s, x, y, dx, dy, width, height) == 0) {
x = vmsvga_fifo_read(s);
static void vmsvga_io_write(void *opaque, hwaddr addr,
vmsvga_value_write(s, addr, data);
static inline void vmsvga_cursor_define(struct vmsvga_state_s *s,
vmsvga_cursor_define(s, &cursor);
vmsvga_fifo_read(s);
