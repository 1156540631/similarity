return letoh32(uncompressed_size);
return sizeof(local_file_header) + letoh16(filename_size) +
letoh16(extra_field_size) + GetDataSize();
return sizeof(cdir_entry) + letoh16(filename_size) +
letoh16(extra_field_size) + letoh16(file_comment_size);
if (((char *)entry + entry->GetSize()) > mCdir_limit ||
return nullptr;
return entry;
if (((char *)data + data->GetSize()) > (char *)mEnd)
return nullptr;
return data;
color.g8 = color16.green;
uint16_t color565 = ((color.r8 & 0xF8) << 8) |
((color.g8 & 0xFC) << 3) |
uint16_t color565 = ((color.r8 & 0xF8) << 8) |
return (color565 << 16) | color565;
while ((entry = reader.GetNextEntry(entry))) {
file = reader.GetLocalEntry(entry);
string descCopy;
descCopy.append(file->GetData(), entry->GetDataSize());
return data + letoh16(filename_size) + letoh16(extra_field_size);
return letoh32(compressed_size);
color.b8 = color16.blue;
return color.r8g8b8;
return color.r8g8b8;
((color.g8 & 0xFC) << 3) |
uint16_t color565 = ((color.r8 & 0xF8) << 8) |
((color.b8       ) >> 3);
((color.g8 & 0xFC) << 3) |
uint16_t color565 = ((color.r8 & 0xF8) << 8) |
return (color565 << 16) | color565;
return 0;
descCopy.append(file->GetData(), entry->GetDataSize());
const char *line = descCopy.c_str();
vector<AnimationPart> parts;
end = strstr(line, "\n");
AnimationPart part;
sscanf(line, "%d %d %d", &width, &height, &fps) == 3) {
} else if (sscanf(line, "p %d %d %s",
&part.count, &part.pause, part.path)) {
parts.push_back(part);
} while (end && *(line = end + 1));
end = strstr(line, "\n");
sscanf(line, "%d %d %d", &width, &height, &fps) == 3) {
} else if (sscanf(line, "p %d %d %s",
&part.count, &part.pause, part.path)) {
parts.push_back(part);
for (uint32_t i = 0; i < parts.size(); i++) {
for (uint32_t i = 0; i < parts.size(); i++) {
AnimationPart &part = parts[i];
AnimationFrame &frame = part.frames[k];
void *vaddr;
0, 0, width, height, &vaddr)) {
wchar_t bgfill = AsBackgroundFill(frame.bgcolor, format);
wmemset((wchar_t*)vaddr, bgfill,
AsBackgroundFill(const png_color_16& color16, int outputFormat)
color.r8 = color16.red;
uint16_t color565 = ((color.r8 & 0xF8) << 8) |
((color.g8 & 0xFC) << 3) |
uint16_t color565 = ((color.r8 & 0xF8) << 8) |
return (color565 << 16) | color565;
wchar_t bgfill = AsBackgroundFill(frame.bgcolor, format);
wmemset((wchar_t*)vaddr, bgfill,
