updateAnimatedSVGAttribute(name);
if (Attribute* a = namedAttrMap->getAttributeItem(name))
return a->value();
return nullAtom;
bool ignoreCase = shouldIgnoreAttributeCase(this);
if (!m_isStyleAttributeValid && equalPossiblyIgnoringCase(name, styleAttr.localName(), ignoreCase))
updateAnimatedSVGAttribute(QualifiedName(nullAtom, name, nullAtom));
if (Attribute* attribute = namedAttrMap->getAttributeItem(name, ignoreCase))
return attribute->value();
return nullAtom;
return m_tagName.toString();
String result;
s = nodeName();
if (s.length() > 0) {
result += s;
s = getAttribute(idAttributeName());
if (s.length() > 0) {
if (result.length() > 0)
result += "; ";
result += "id=";
result += s;
s = getAttribute(classAttr);
strncpy(buffer, result.utf8().data(), length - 1);
void Element::formatForDebugger(char* buffer, unsigned length) const
if (result.length() > 0)
result += "; ";
result += "class=";
result += s;
strncpy(buffer, result.utf8().data(), length - 1);
const AtomicString& Element::getAttribute(const QualifiedName& name) const
if (Attribute* a = namedAttrMap->getAttributeItem(name))
return a->value();
s = getAttribute(idAttributeName());
if (s.length() > 0) {
result += s;
s = getAttribute(classAttr);
if (s.length() > 0) {
result += s;
strncpy(buffer, result.utf8().data(), length - 1);
const AtomicString& Element::getAttribute(const String& name) const
if (!m_isStyleAttributeValid && equalPossiblyIgnoringCase(name, styleAttr.localName(), ignoreCase))
if (Attribute* attribute = namedAttrMap->getAttributeItem(name, ignoreCase))
return attribute->value();
s = getAttribute(idAttributeName());
if (s.length() > 0) {
result += s;
strncpy(buffer, result.utf8().data(), length - 1);
