if ((frame_size = av_get_audio_frame_duration(enc, size)) > 0)
frame_size = get_audio_frame_size(st->codec, pkt->size, 0);
avpriv_h264_has_num_reorder_frames(st->codec) == st->codec->has_b_frames)
st  = s->streams[cur_pkt.stream_index];
compute_pkt_fields(s, st, NULL, pkt);
st = s->streams[pkt->stream_index];
st->skip_samples = 0;
av_add_index_entry(st, pkt->pos, pkt->dts, 0, 0, AVINDEX_KEYFRAME);
entries = av_fast_realloc(*index_entries,
(*nb_index_entries + 1) *
*index_entries= entries;
index= ff_index_search_timestamp(*index_entries, *nb_index_entries, timestamp, AVSEEK_FLAG_ANY);
return ff_add_index_entry(&st->index_entries, &st->nb_index_entries,
int *nb_index_entries,
&st->index_entries_allocated_size, pos,
unsigned int *index_entries_allocated_size,
if((unsigned)*nb_index_entries + 1 >= UINT_MAX / sizeof(AVIndexEntry))
index_entries_allocated_size,
(*nb_index_entries + 1) *
sizeof(AVIndexEntry));
entries = av_fast_realloc(*index_entries,
sizeof(AVIndexEntry));
(*nb_index_entries + 1) *
a = - 1;
a= b-1;
m = (a + b) >> 1;
b = m;
a = m;
m= (flags & AVSEEK_FLAG_BACKWARD) ? a : b;
m += (flags & AVSEEK_FLAG_BACKWARD) ? -1 : 1;
return -1;
return  m;
index= ff_index_search_timestamp(*index_entries, *nb_index_entries, timestamp, AVSEEK_FLAG_ANY);
memmove(entries + index + 1, entries + index, sizeof(AVIndexEntry)*(*nb_index_entries - index));
static void compute_pkt_fields(AVFormatContext *s, AVStream *st,
compute_pkt_fields(s, st, NULL, pkt);
av_add_index_entry(st, pkt->pos, pkt->dts, 0, 0, AVINDEX_KEYFRAME);
int av_add_index_entry(AVStream *st,
av_add_index_entry(st, pkt->pos, pkt->dts, 0, 0, AVINDEX_KEYFRAME);
av_add_index_entry(st, pkt->pos, pkt->dts, 0, 0, AVINDEX_KEYFRAME);
return ff_add_index_entry(&st->index_entries, &st->nb_index_entries,
int *nb_index_entries,
memmove(entries + index + 1, entries + index, sizeof(AVIndexEntry)*(*nb_index_entries - index));
int ff_add_index_entry(AVIndexEntry **index_entries,
entries = av_fast_realloc(*index_entries,
memmove(entries + index + 1, entries + index, sizeof(AVIndexEntry)*(*nb_index_entries - index));
static int has_decode_delay_been_guessed(AVStream *st)
if(pkt->pts != AV_NOPTS_VALUE && delay <= MAX_REORDER_DELAY && has_decode_delay_been_guessed(st)){
static void compute_frame_duration(int *pnum, int *pden, AVStream *st,
compute_frame_duration(&num, &den, st, pc, pkt);
if(pkt->pts != AV_NOPTS_VALUE && delay <= MAX_REORDER_DELAY && has_decode_delay_been_guessed(st)){
int ff_index_search_timestamp(const AVIndexEntry *entries, int nb_entries,
index= ff_index_search_timestamp(*index_entries, *nb_index_entries, timestamp, AVSEEK_FLAG_ANY);
return ff_add_index_entry(&st->index_entries, &st->nb_index_entries,
b = nb_entries;
m= (flags & AVSEEK_FLAG_BACKWARD) ? a : b;
return  m;
index= ff_index_search_timestamp(*index_entries, *nb_index_entries, timestamp, AVSEEK_FLAG_ANY);
memmove(entries + index + 1, entries + index, sizeof(AVIndexEntry)*(*nb_index_entries - index));
static int get_audio_frame_size(AVCodecContext *enc, int size, int mux)
frame_size = get_audio_frame_size(st->codec, pkt->size, 0);
