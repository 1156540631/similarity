nb_frames = 0;
nb_frames = (lrintf(delta));
nb_frames = ((nb_frames > ost -> max_frames - (ost -> frame_number)?ost -> max_frames - (ost -> frame_number) : nb_frames));
nb_frames_dup += nb_frames - 1;
if (!check_recording_time(ost)) {
close_output_stream(ost);
double duration = 0;
delta = sync_ipts - (ost -> sync_opts) + duration;
nb_frames = (lrintf(delta));
nb_frames = ((nb_frames > ost -> max_frames - (ost -> frame_number)?ost -> max_frames - (ost -> frame_number) : nb_frames));
nb_frames_dup += nb_frames - 1;
if (!check_recording_time(ost)) {
duration = 1 / (av_q2d(ost -> frame_rate) * av_q2d(enc -> time_base));
sync_ipts = (in_picture -> pts);
delta = sync_ipts - (ost -> sync_opts) + duration;
nb_frames = 1;
nb_frames = 0;
nb_frames = (lrintf(delta));
nb_frames = 0;
nb_frames = ((nb_frames > ost -> max_frames - (ost -> frame_number)?ost -> max_frames - (ost -> frame_number) : nb_frames));
nb_frames_drop++;
nb_frames_drop++;
nb_frames_dup += nb_frames - 1;
if (!check_recording_time(ost)) {
if (!ost -> filtered_frame && !(ost -> filtered_frame = avcodec_alloc_frame())) {
avcodec_get_frame_defaults(ost -> filtered_frame);
filtered_frame = ost -> filtered_frame;
avfilter_copy_buf_props(filtered_frame,picref);
do_video_out(of -> ctx,ost,filtered_frame);
int64_t pts = - 9223372036854775807L - 1;
static int qp_histogram['4'];
total_size = avio_size(oc -> pb);
total_size = avio_tell(oc -> pb);
buf[0] = '\0';
float q = (- 1);
q = (enc -> coded_frame -> quality) / ((float )'v');
av_bprintf(&buf_script,"stream_%d_%d_q=%.1f\n",ost -> file_index,ost -> index,q);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"q=%2.1f ",q);
frame_number = ost -> frame_number;
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"frame=%5d fps=%3.*f q=%3.1f ",frame_number,fps < 9.95,fps,q);
av_bprintf(&buf_script,"frame=%d\n",frame_number);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"L");
if (qp >= 0 && qp < sizeof(qp_histogram) / sizeof(qp_histogram[0])) {
qp_histogram[qp]++;
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"%X",((int )(lrintf((log2((qp_histogram[j] + 1)))))));
double error_sum = 0;
double scale_sum = 0;
char type[3] = {('Y'), ('U'), ('V')};
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"PSNR=");
error = enc -> error[j];
scale = (enc -> width * enc -> height) * 255.0 * 255.0 * frame_number;
error = enc -> coded_frame -> error[j];
scale = (enc -> width * enc -> height) * 255.0 * 255.0;
scale /= 4;
error_sum += error;
scale_sum += scale;
p = psnr(error / scale);
av_bprintf(&buf_script,"stream_%d_%d_psnr_%c=%2.2f\n",ost -> file_index,ost -> index,type[j] | 32,p);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"%c:%2.2f ",type[j],p);
p = psnr(error_sum / scale_sum);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"*:%2.2f ",psnr(error_sum / scale_sum));
bitrate = (pts && total_size >= 0?(total_size * 8) / (pts / 1000.0) : (- 1));
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"size=N/A time=");
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"size=%8.0fkB time=",total_size / 1024.0);
av_bprintf(&buf_script,"dup_frames=%d\n",nb_frames_dup);
av_bprintf(&buf_script,"drop_frames=%d\n",nb_frames_drop);
return reap_filters();
ret = reap_filters();
if ((ret = transcode_from_filter(ost -> filter -> graph,&ist)) < 0) {
return reap_filters();
ret = transcode_step();
print_report(0,timer_start,cur_time);
free_input_threads();
flush_encoders();
term_exit();
print_report(1,timer_start,av_gettime());
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"%02d:%02d:%02d.%02d ",hours,mins,secs,100 * us / 1000000);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"bitrate=N/A");
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"bitrate=%6.1fkbits/s",bitrate);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf)," dup=%d drop=%d",nb_frames_dup,nb_frames_drop);
static double psnr(double d)
return - 10.0 * log(d) / log(10.0);
p = psnr(error / scale);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"%c:%2.2f ",type[j],p);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"*:%2.2f ",psnr(error_sum / scale_sum));
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"q=%2.1f ",q);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"size=N/A time=");
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"%02d:%02d:%02d.%02d ",hours,mins,secs,100 * us / 1000000);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"bitrate=N/A");
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf)," dup=%d drop=%d",nb_frames_dup,nb_frames_drop);
static void do_video_out(AVFormatContext *s,OutputStream *ost,AVFrame *in_picture)
sync_ipts = (in_picture -> pts);
delta = sync_ipts - (ost -> sync_opts) + duration;
nb_frames = (lrintf(delta));
nb_frames = ((nb_frames > ost -> max_frames - (ost -> frame_number)?ost -> max_frames - (ost -> frame_number) : nb_frames));
nb_frames_dup += nb_frames - 1;
do_video_out(of -> ctx,ost,filtered_frame);
return reap_filters();
ret = transcode_step();
print_report(0,timer_start,cur_time);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"%02d:%02d:%02d.%02d ",hours,mins,secs,100 * us / 1000000);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf)," dup=%d drop=%d",nb_frames_dup,nb_frames_drop);
