n = fread(p, 1, rr->length, stdin);
if (n != rr->length) {
n, rr->length);
fprintf(stderr, "%s: packet short read length %d != %d\n",
s->packet_length = SSL_HDR_LEN + rr->length;
rb->left = s->packet_length;
p = rr->data + rr->length - MAC_SZ;
if (memcmp(p, MAC, MAC_SZ) != 0) {
rr->length -= MAC_SZ;
encrypt_decrypt(rr->data, rr->length);
void ssl3_get_record(SSL *s)
SSL3_RECORD	*rr = &s->s3->rrec;
SSL3_BUFFER	*rb = &s->s3->rbuf;
version = (s->s3->major << 8) | s->s3->minor;
if (s->version != version)
if (rr->length > s->s3->rbuf.len - SSL_HDR_LEN)  {
rr->length, s->s3->rbuf.len - SSL_HDR_LEN);
s->packet = &(s->s3->rbuf.buf[0]);
ssl3_get_record(s);
examine_hb_packet(s);
void examine_hb_packet(SSL *s)
SSL3_RECORD	*rr = &s->s3->rrec;
examine_hb_packet(s);
(void) tls1_process_heartbeat(s);
s->bio_should_retry++;
int ssl3_read_bytes(SSL *s, int type, unsigned char *buf, int len, int peek)
SSL3_RECORD	*rr = &s->s3->rrec;
ssl3_get_record(s);
n = ssl3_read_bytes(s, SSL3_RT_APPLICATION_DATA,
if (n == -1 && !s->bio_should_retry)
int ssl3_read_bytes(SSL *s, int type, unsigned char *buf, int len, int peek)
ssl3_get_record(s);
void ssl3_get_record(SSL *s)
ssl3_get_record(s);
examine_hb_packet(s);
void examine_hb_packet(SSL *s)
examine_hb_packet(s);
int ssl3_read_bytes(SSL *s, int type, unsigned char *buf, int len, int peek)
n = ssl3_read_bytes(s, SSL3_RT_APPLICATION_DATA,
int ssl3_read_bytes(SSL *s, int type, unsigned char *buf, int len, int peek)
ssl3_get_record(s);
void ssl3_get_record(SSL *s)
ssl3_get_record(s);
examine_hb_packet(s);
void examine_hb_packet(SSL *s)
examine_hb_packet(s);
int ssl3_read_bytes(SSL *s, int type, unsigned char *buf, int len, int peek)
n = ssl3_read_bytes(s, SSL3_RT_APPLICATION_DATA,
int ssl3_read_bytes(SSL *s, int type, unsigned char *buf, int len, int peek)
ssl3_get_record(s);
void ssl3_get_record(SSL *s)
ssl3_get_record(s);
examine_hb_packet(s);
void examine_hb_packet(SSL *s)
examine_hb_packet(s);
int ssl3_read_bytes(SSL *s, int type, unsigned char *buf, int len, int peek)
n = ssl3_read_bytes(s, SSL3_RT_APPLICATION_DATA,
int ssl3_read_bytes(SSL *s, int type, unsigned char *buf, int len, int peek)
ssl3_get_record(s);
void ssl3_get_record(SSL *s)
s->version, version);
void encrypt_decrypt(unsigned char *ptr, int len)
for (i = 0; i < len; i++)
