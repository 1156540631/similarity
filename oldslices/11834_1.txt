fprintf(output, "  -d %s ...\n", decode_as_arg_template);
cmdarg_err("Parameter \"%s\" doesn't follow the template \"%s\"", cl_param, decode_as_arg_template);
gboolean             start_capture = FALSE;
if (profile_exists (optarg)) {
set_profile_name (optarg);
cmdarg_err("Configuration Profile \"%s\" does not exist", optarg);
capture_opts_init(&global_capture_opts, &cfile);
else if (strcmp(argv[2], "fields3") == 0)
else if (strcmp(argv[2], "protocols") == 0)
else if (strcmp(argv[2], "values") == 0)
else if (strcmp(argv[2], "decodes") == 0)
cmdarg_err("Invalid \"%s\" option for -G flag", argv[2]);
while ((opt = getopt(argc, argv, optstring)) != -1) {
status = capture_opts_add_opt(&global_capture_opts, opt, optarg, &start_capture);
exit(status);
print_usage(TRUE);
cmdarg_err("Invalid -o flag \"%s\"", optarg);
else if (strcmp(optarg, "dd") == 0)
status = capture_opts_add_opt(&global_capture_opts, opt, optarg, &start_capture);
exit(status);
optarg);
failure_message(fmt, ap);
cmdarg_err("Invalid -o flag \"%s\"", optarg);
if (!add_decode_as(optarg))
g_assert(cl_param);
g_assert(decoded_param);
cmdarg_err("Parameter \"%s\" doesn't follow the template \"%s\"", cl_param, decode_as_arg_template);
cmdarg_err(const char *fmt, ...)
while ((opt = getopt(argc, argv, optstring)) != -1) {
status = capture_opts_add_opt(&global_capture_opts, opt, optarg, &start_capture);
exit(status);
if(!output_fields_set_option(output_fields, optarg)) {
output_fields_add(output_fields, optarg);
out_file_type = wtap_short_string_to_file_type(optarg);
cmdarg_err("Invalid -o flag \"%s\"", optarg);
cf_name = g_strdup(optarg);
if (strcmp(optarg, "r") == 0)
badopt = string_to_name_resolve(optarg, &g_resolv_flags);
if (strcmp(optarg, "text") == 0) {
if(!output_fields_set_option(output_fields, optarg)) {
output_fields_add(output_fields, optarg);
out_file_type = wtap_short_string_to_file_type(optarg);
cf_name = g_strdup(optarg);
if (!process_stat_cmd_arg(optarg)) {
read_keytab_file(optarg);
cmdarg_err("-o flag \"%s\" specifies unknown preference", optarg);
add_decode_as(const gchar *cl_param)
g_assert(cl_param);
g_assert(handle);
decoded_param = g_strdup(cl_param);
extern char         *optarg;
status = capture_opts_add_opt(&global_capture_opts, opt, optarg, &start_capture);
exit(status);
main(int argc, char *argv[])
static const char    optstring[] = OPTSTRING_INIT OPTSTRING_WIN32;
init_progfile_dir_error = init_progfile_dir(argv[0], main);
while ((opt = getopt(argc, argv, optstring)) != -1) {
ex_opt_add(optarg);
if (argc >= 2 && strcmp(argv[1], "-G") == 0) {
if (strcmp(argv[2], "fields") == 0)
else if (strcmp(argv[2], "fields2") == 0)
else if (strcmp(argv[2], "defaultprefs") == 0)
else if (strcmp(argv[2], "currentprefs") == 0) {
while ((opt = getopt(argc, argv, optstring)) != -1) {
status = capture_opts_add_opt(&global_capture_opts, opt, optarg, &start_capture);
exit(status);
if (!add_decode_as(optarg))
cmdarg_err("\"%s\" is not a valid field output option=value pair.", optarg);
cmdarg_err("\"%s\" isn't a valid capture file type", optarg);
else if (strcmp(optarg, "a") == 0)
else if (strcmp(optarg, "ad") == 0)
else if (strcmp(optarg, "d") == 0)
else if (strcmp(optarg, "e") == 0)
} else if (strcmp(optarg, "ps") == 0) {
} else if (strcmp(optarg, "pdml") == 0) {
} else if (strcmp(optarg, "psml") == 0) {
} else if(strcmp(optarg, "fields") == 0) {
status = capture_opts_add_opt(&global_capture_opts, opt, optarg, &start_capture);
exit(status);
cmdarg_err_cont(const char *fmt, ...)
cmdarg_err("Parameter \"%s\" doesn't follow the template \"%s\"", cl_param, decode_as_arg_template);
