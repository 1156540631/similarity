safechown = chownsafe(fileno(fp));
while (fgets(buf, sizeof buf, fp) != NULL)
register char *p = strchr(buf, '\n');
forwarding ? "forwarding" : "sending", buf);
nincludes += sendtolist(buf, ctladdr, sendq, aliaslevel + 1, e);
register char **argv;
while ((p = *argv++) != NULL)
(void) sendtolist(p, NULLADDR, &e->e_sendqueue, 0, e);
char *list;
ADDRESS **sendq;
nincludes += sendtolist(buf, ctladdr, sendq, aliaslevel + 1, e);
(void) sendtolist(p, NULLADDR, &e->e_sendqueue, 0, e);
ADDRESS **sendq;
e->e_message = newstr("Deferred: user database error");
fprintf(e->e_xfp,
register ENVELOPE *e;
(time_t) 0, e);
alias(a, sendq, aliaslevel, e);
maplocaluser(a, sendq, aliaslevel + 1, e);
(time_t) 0, e);
forward(a, sendq, aliaslevel, e);
a = recipient(a, sendq, aliaslevel, e);
nincludes += sendtolist(buf, ctladdr, sendq, aliaslevel + 1, e);
ret = include(a->q_user, FALSE, a, sendq, aliaslevel, e);
ENVELOPE *e;
nincludes += sendtolist(buf, ctladdr, sendq, aliaslevel + 1, e);
register ENVELOPE *e;
e->e_nrcpts++;
ENVELOPE *e;
ret = include(a->q_user, FALSE, a, sendq, aliaslevel, e);
ENVELOPE *e;
nincludes += sendtolist(buf, ctladdr, sendq, aliaslevel + 1, e);
register ENVELOPE *e;
char *oldto = e->e_to;
a = parseaddr(p, NULLADDR, RF_COPYALL, delimiter, &delimptr, e);
al = a;
register ADDRESS *a = al;
a = recipient(a, sendq, aliaslevel, e);
register ADDRESS *a;
e->e_origrcpt = a->q_paddr;
register ENVELOPE *e;
a = recipient(a, sendq, aliaslevel, e);
e->e_nrcpts++;
e->e_nrcpts++;
register ENVELOPE *e;
a = recipient(a, sendq, aliaslevel, e);
e->e_to = oldto;
char *oldto = e->e_to;
oldto, shortenstring(buf, 203));
e->e_to = oldto;
ENVELOPE *e;
ret = include(a->q_user, FALSE, a, sendq, aliaslevel, e);
ENVELOPE *e;
nincludes += sendtolist(buf, ctladdr, sendq, aliaslevel + 1, e);
register ENVELOPE *e;
if (bitset(EF_VRFYONLY, e->e_flags))
e->e_flags |= EF_SENDRECEIPT;
register ENVELOPE *e;
printf("at trylocaluser %s\n", a->q_user);
message("including file %s", a->q_user);
ret = include(a->q_user, FALSE, a, sendq, aliaslevel, e);
char *fname;
rval = safefile(fname, uid, gid, uname, sfflags, S_IREAD, NULL);
fp = fopen(fname, "r");
if (fstat(fileno(fp), &st) < 0)
safechown = chownsafe(fileno(fp));
while (fgets(buf, sizeof buf, fp) != NULL)
register char *p = strchr(buf, '\n');
forwarding ? "forwarding" : "sending", buf);
nincludes += sendtolist(buf, ctladdr, sendq, aliaslevel + 1, e);
a = recipient(a, sendq, aliaslevel, e);
register ENVELOPE *e;
e->e_to = a->q_paddr;
e->e_origrcpt = a->q_paddr;
e->e_origrcpt = "";
ret = include(a->q_user, FALSE, a, sendq, aliaslevel, e);
ENVELOPE *e;
if (bitset(EF_VRFYONLY, e->e_flags))
e->e_to = NULL;
nincludes += sendtolist(buf, ctladdr, sendq, aliaslevel + 1, e);
register ENVELOPE *e;
(void) sendtolist(p, NULLADDR, &e->e_sendqueue, 0, e);
register ENVELOPE *e;
char buf[MAXNAME + 1];
printf("sendto: %s\n   ctladdr=", list);
printaddr(ctladdr, FALSE);
strchr(list, '<') != NULL || strchr(list, '(') != NULL))
(strchr(list, ',') != NULL || strchr(list, ';') != NULL ||
e->e_flags &= ~EF_OLDSTYLE;
delimiter = ' ';
if (!bitset(EF_OLDSTYLE, e->e_flags) || ctladdr != NULL)
delimiter = ',';
al = NULL;
i = strlen(list) + 1;
if (i <= sizeof buf)
bufp = buf;
bufp = xalloc(i);
strcpy(bufp, denlstring(list, FALSE, TRUE));
for (p = bufp; *p != '\0'; )
auto char *delimptr;
while ((isascii(*p) && isspace(*p)) || *p == ',')
p++;
p = delimptr;
b = self_reference(a, e);
nincludes += sendtolist(buf, ctladdr, sendq, aliaslevel + 1, e);
a = parseaddr(p, NULLADDR, RF_COPYALL, delimiter, &delimptr, e);
al = a;
register ADDRESS *a = al;
ret = include(a->q_user, FALSE, a, sendq, aliaslevel, e);
ADDRESS **sendq;
ret = include(a->q_user, FALSE, a, sendq, aliaslevel, e);
alias(a, sendq, aliaslevel, e);
if (udbexpand(a, sendq, aliaslevel, e) == EX_TEMPFAIL)
maplocaluser(a, sendq, aliaslevel + 1, e);
forward(a, sendq, aliaslevel, e);
printaddr(*sendq, TRUE);
register ADDRESS **sendq;
a = recipient(a, sendq, aliaslevel, e);
register ADDRESS *a;
register ADDRESS **sendq;
for (pq = sendq; (q = *pq) != NULL; pq = &q->q_next)
if (sameaddr(q, a))
a = q;
if (sameaddr(q, a))
printf("%s in sendq: ", a->q_paddr);
