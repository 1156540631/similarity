gint		next_offset;
tvb_ensure_length_remaining(tvb, offset), &next_offset,
FALSE);
if (!req_resp_hdrs_do_reassembly(tvb, offset, pinfo,
return -1;
line = tvb_get_ptr(tvb, offset, first_linelen);
orig_offset = offset;
ti = proto_tree_add_item(tree, proto_http, tvb, offset, -1,
FALSE);
headers.content_length = 0;
while (tvb_reported_length_remaining(tvb, offset) != 0) {
linelen = tvb_find_line_end(tvb, offset,
tvb_ensure_length_remaining(tvb, offset), &next_offset,
linelen = tvb_find_line_end(tvb, offset,
FALSE);
linelen = tvb_find_line_end(tvb, offset,
line = tvb_get_ptr(tvb, offset, linelen);
linelen, &http_type, &reqresp_dissector, conv_data);
linep = line;
c = *linep++;
if (!isascii(c))
if (iscntrl(c))
tvb_ensure_bytes_exist(tvb, offset, linelen + 1);
while (tvb_reported_length_remaining(tvb, offset) != 0) {
linelen = tvb_find_line_end(tvb, offset,
line = tvb_get_ptr(tvb, offset, linelen);
linep = line;
c = *linep++;
if (!isascii(c))
if (iscntrl(c))
hf_http_notification, tvb, 0, 0, 1);
hf_http_response, tvb, 0, 0, 1);
hf_http_request, tvb, 0, 0, 1);
datalen = tvb_length_remaining(tvb, offset);
reported_datalen = tvb_reported_length_remaining(tvb, offset);
datalen = 0;
next_tvb = tvb_new_subset(tvb, offset, datalen,
tvb_set_child_real_data_tvbuff(tvb,
uncomp_tvb = tvb_child_uncompress(tvb, next_tvb, 0,
proto_item_set_len(ti, offset);
offset += datalen;
return offset - orig_offset;
FALSE);
FALSE);
linelen = tvb_find_line_end(tvb, offset,
return -1;
line = tvb_get_ptr(tvb, offset, linelen);
linep = line;
c = *linep++;
if (!isascii(c))
if (iscntrl(c))
datalen = headers.content_length;
datalen = 0;
next_tvb = tvb_new_subset(tvb, offset, datalen,
offset += datalen;
int		offset = 0;
len = dissect_http_message(tvb, offset, pinfo, tree, conv_data);
offset += len;
while (tvb_reported_length_remaining(tvb, offset) != 0) {
len = dissect_http_message(tvb, offset, pinfo, tree, conv_data);
dissect_http_message(tvbuff_t *tvb, int offset, packet_info *pinfo,
first_linelen = tvb_find_line_end(tvb, offset,
line = tvb_get_ptr(tvb, offset, first_linelen);
while (tvb_reported_length_remaining(tvb, offset) != 0) {
linelen = tvb_find_line_end(tvb, offset,
line = tvb_get_ptr(tvb, offset, linelen);
linep = line;
c = *linep++;
if (!isascii(c))
if (iscntrl(c))
dissect_http(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)
while (tvb_reported_length_remaining(tvb, offset) != 0) {
len = dissect_http_message(tvb, offset, pinfo, tree, conv_data);
proto_tree_add_item(tree, hf_http_version, tvb, offset, tokenlen,
ti = proto_tree_add_item(tree, proto_http, tvb, offset, -1,
while (tvb_reported_length_remaining(tvb, offset) != 0) {
linelen = tvb_find_line_end(tvb, offset,
line = tvb_get_ptr(tvb, offset, linelen);
linep = line;
c = *linep++;
if (!isascii(c))
if (iscntrl(c))
static int is_http_request_or_reply(const gchar *data, int linelen,
line = tvb_get_ptr(tvb, offset, linelen);
linep = line;
c = *linep++;
if (!isascii(c))
if (iscntrl(c))
dissect_http_udp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)
dissect_http_message(tvb, 0, pinfo, tree, conv_data);
