static char buf[MAXNAME + 1];
addr++;
buflim = bufend = &buf[sizeof(buf) - 1];
bp = bufhead = buf;
obp = bp;
p = addrhead = addr;
while ((c = *p++) != '<')
while ((c = *p++) != '\0')
SM_APPEND_CHAR('"');
SM_APPEND_CHAR(c);
buflim++;
SM_APPEND_CHAR(c);
SM_APPEND_CHAR(' ');
SM_APPEND_CHAR(MACROEXPAND);
SM_APPEND_CHAR('g');
SM_APPEND_CHAR(c);
if ((c = *p++) == '\0')
p++;
p--;
SM_APPEND_CHAR(c);
buflim--;
buflim++;
buflim--;
SM_APPEND_CHAR(' ');
SM_APPEND_CHAR(c);
buflim++;
SM_APPEND_CHAR(c);
SM_APPEND_CHAR(*p);
p++;
bp = bufhead;
SM_APPEND_CHAR('"');
p++;
for (q = addrhead; q < p; )
c = *q++;
SM_APPEND_CHAR('\\');
SM_APPEND_CHAR(c);
SM_APPEND_CHAR(c);
bp--;
SM_APPEND_CHAR('"');
while ((c = *p++) != ':')
SM_APPEND_CHAR(c);
p++;
SM_APPEND_CHAR(*p);
bufhead = bp;
SM_APPEND_CHAR(c);
buflim--;
bp = bufhead;
SM_APPEND_CHAR('"');
SM_APPEND_CHAR('\\');
SM_APPEND_CHAR(c);
SM_APPEND_CHAR(c);
#define SM_APPEND_CHAR(c)                   \
do                          \
{                           \
printf ("bp-obp = %d   buflim-obp=%d\n", (bp-obp), (buflim-obp)); \
if (SM_HAVE_ROOM)               \
*bp++ = (c);                \
else                        \
goto returng;               \
} while (0)
