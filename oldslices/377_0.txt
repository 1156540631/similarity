st = ic->streams[i];
st->codec->time_base= st->time_base;
st->parser = av_parser_init(st->codec->codec_id);
avcodec_get_name(st->codec->codec_id));
avcodec_find_decoder(st->codec->codec_id);
st = ic->streams[i];
if (!has_codec_parameters(st, NULL))
st->info->fps_first_dts = st->info->fps_last_dts = AV_NOPTS_VALUE;
if (!has_codec_parameters(st, NULL))
st->info->fps_first_dts = st->info->fps_last_dts = AV_NOPTS_VALUE;
if (!has_codec_parameters(st, NULL))
st->info->fps_first_dts     = pkt->dts;
if (!has_codec_parameters(st, NULL))
st->info->fps_first_dts_idx = st->codec_info_nb_frames;
if (!has_codec_parameters(st, NULL))
st->info->fps_last_dts_idx = st->codec_info_nb_frames;
t = av_rescale_q(st->info->codec_info_duration, st->time_base, AV_TIME_BASE_Q);
st->info->codec_info_duration += pkt->duration;
if (!has_codec_parameters(st, NULL))
int64_t last = st->info->last_dts;
double dts= (is_relative(pkt->dts) ?  pkt->dts - RELATIVE_TS_BASE : pkt->dts) * av_q2d(st->time_base);
int64_t duration= pkt->dts - last;
for (i=0; i<FF_ARRAY_ELEMS(st->info->duration_error[0][0]); i++) {
int framerate= get_std_framerate(i);
double sdts= dts*framerate/(1001*12);
for(j=0; j<2; j++){
int ticks= lrintf(sdts+j*0.5);
double error= sdts - ticks + j*0.5;
st->info->duration_error[j][0][i] += error;
for (i=0; i<FF_ARRAY_ELEMS(st->info->duration_error[0][0]); i++) {
if (!has_codec_parameters(st, NULL))
st->info->duration_error[j][1][i] += error*error;
for (i=0; i<FF_ARRAY_ELEMS(st->info->duration_error[0][0]); i++) {
if (!has_codec_parameters(st, NULL))
st->info->duration_count++;
if (!has_codec_parameters(st, NULL))
st->info->duration_gcd = av_gcd(st->info->duration_gcd, duration);
if (!has_codec_parameters(st, NULL))
st->info->last_dts = pkt->dts;
if (!has_codec_parameters(st, NULL))
st = ic->streams[pkt->stream_index];
st->codec->extradata= av_malloc(st->codec->extradata_size + FF_INPUT_BUFFER_PADDING_SIZE);
memcpy(st->codec->extradata, pkt->data, st->codec->extradata_size);
memset(st->codec->extradata + i, 0, FF_INPUT_BUFFER_PADDING_SIZE);
int i= st->parser->parser->split(st->codec, pkt->data, pkt->size);
st->codec->extradata_size= i;
st->codec->extradata= av_malloc(st->codec->extradata_size + FF_INPUT_BUFFER_PADDING_SIZE);
memset(st->codec->extradata + i, 0, FF_INPUT_BUFFER_PADDING_SIZE);
static int has_codec_parameters(AVStream *st, const char **errmsg_ptr)
if (!has_codec_parameters(st, NULL))
if(   tb_unreliable(st->codec) && !(st->r_frame_rate.num && st->avg_frame_rate.num)
static int tb_unreliable(AVCodecContext *c){
if(   tb_unreliable(st->codec) && !(st->r_frame_rate.num && st->avg_frame_rate.num)
int i= st->parser->parser->split(st->codec, pkt->data, pkt->size);
st->codec->extradata_size= i;
st->codec->extradata= av_malloc(st->codec->extradata_size + FF_INPUT_BUFFER_PADDING_SIZE);
memset(st->codec->extradata + i, 0, FF_INPUT_BUFFER_PADDING_SIZE);
static int is_relative(int64_t ts) {
st->info->fps_last_dts = pkt->dts;
if (!has_codec_parameters(st, NULL))
static int get_std_framerate(int i){
if(i<60*12) return (i+1)*1001;
int framerate= get_std_framerate(i);
double sdts= dts*framerate/(1001*12);
int ticks= lrintf(sdts+j*0.5);
double error= sdts - ticks + j*0.5;
st->info->duration_error[j][0][i] += error;
for (i=0; i<FF_ARRAY_ELEMS(st->info->duration_error[0][0]); i++) {
if (!has_codec_parameters(st, NULL))
