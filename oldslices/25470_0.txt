ost -> finished = 1;
close_output_stream(output_streams[of -> ost_index + j]);
output_streams[i] -> unavailable = 0;
reset_eagain();
timer_start = av_gettime();
int64_t cur_time = av_gettime();
if (!need_output()) {
ret = transcode_step();
ost = choose_output();
if (got_eagain()) {
reset_eagain();
ret = transcode_step();
print_report(0,timer_start,cur_time);
ost = output_streams[i];
frame_number = ost -> frame_number;
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"frame=%5d fps=%3.*f q=%3.1f ",frame_number,fps < 9.95,fps,q);
av_bprintf(&buf_script,"frame=%d\n",frame_number);
scale = (enc -> width * enc -> height) * 255.0 * 255.0 * frame_number;
p = psnr(error / scale);
free_input_threads();
flush_encoders();
term_exit();
print_report(1,timer_start,av_gettime());
ost = output_streams[i];
frame_number = ost -> frame_number;
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"frame=%5d fps=%3.*f q=%3.1f ",frame_number,fps < 9.95,fps,q);
av_bprintf(&buf_script,"frame=%d\n",frame_number);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"frame=%5d fps=%3.*f q=%3.1f ",frame_number,fps < 9.95,fps,q);
if (check_keyboard_interaction(cur_time) < 0) {
if (!need_output()) {
ret = transcode_step();
ost = choose_output();
if (got_eagain()) {
reset_eagain();
ret = transcode_step();
print_report(0,timer_start,cur_time);
free_input_threads();
flush_encoders();
term_exit();
print_report(1,timer_start,av_gettime());
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"L");
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"q=%2.1f ",q);
av_bprintf(&buf_script,"stream_%d_%d_q=%.1f\n",ost -> file_index,ost -> index,q);
frame_number = ost -> frame_number;
fps = (t > 1?frame_number / t : 0);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"frame=%5d fps=%3.*f q=%3.1f ",frame_number,fps < 9.95,fps,q);
av_bprintf(&buf_script,"frame=%d\n",frame_number);
av_bprintf(&buf_script,"stream_%d_%d_q=%.1f\n",ost -> file_index,ost -> index,q);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"frame=%5d fps=%3.*f q=%3.1f ",frame_number,fps < 9.95,fps,q);
static int check_keyboard_interaction(int64_t cur_time)
print_report(0,timer_start,cur_time);
static void print_report(int is_last_report,int64_t timer_start,int64_t cur_time)
float t = ((cur_time - timer_start) / 1000000.0);
fps = (t > 1?frame_number / t : 0);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"frame=%5d fps=%3.*f q=%3.1f ",frame_number,fps < 9.95,fps,q);
static double psnr(double d)
return - 10.0 * log(d) / log(10.0);
p = psnr(error / scale);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"%c:%2.2f ",type[j],p);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"*:%2.2f ",psnr(error_sum / scale_sum));
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"q=%2.1f ",q);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"frame=%5d fps=%3.*f q=%3.1f ",frame_number,fps < 9.95,fps,q);
static void close_output_stream(OutputStream *ost)
if (!need_output()) {
ret = transcode_step();
ost = choose_output();
if (got_eagain()) {
reset_eagain();
ret = transcode_step();
print_report(0,timer_start,cur_time);
free_input_threads();
flush_encoders();
term_exit();
print_report(1,timer_start,av_gettime());
ost = output_streams[i];
frame_number = ost -> frame_number;
fps = (t > 1?frame_number / t : 0);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"frame=%5d fps=%3.*f q=%3.1f ",frame_number,fps < 9.95,fps,q);
av_bprintf(&buf_script,"frame=%d\n",frame_number);
snprintf(buf + strlen(buf),sizeof(buf) - strlen(buf),"frame=%5d fps=%3.*f q=%3.1f ",frame_number,fps < 9.95,fps,q);
