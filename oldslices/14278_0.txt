JSAutoByteString params;
nsDependentJSString dependentKeyGenAlg;
NS_ENSURE_TRUE(dependentKeyGenAlg.init(cx, jsString), NS_ERROR_UNEXPECTED);
nsAutoString keyGenAlg(dependentKeyGenAlg);
keyGenAlg.Trim("\r\n\t ");
keyGenType->keyGenType = cryptojs_interpret_key_gen_type(keyGenAlg);
static nsKeyGenType cryptojs_interpret_key_gen_type(char *keyAlg)
if (keyAlg.EqualsLiteral("rsa-ex"))
return rsaEnc;
if (keyAlg.EqualsLiteral("rsa-dual-use"))
return rsaDualUse;
return rsaSign;
if (keyAlg.EqualsLiteral("rsa-sign-nonrepudiation"))
return rsaSignNonrepudiation;
if (keyAlg.EqualsLiteral("rsa-nonrepudiation"))
return rsaNonrepudiation;
if (keyAlg.EqualsLiteral("ec-ex")) {
return ecEnc;
if (keyAlg.EqualsLiteral("ec-dual-use")) {
return ecDualUse;
if (keyAlg.EqualsLiteral("ec-sign"))
return ecSign;
if (keyAlg.EqualsLiteral("ec-sign-nonrepudiation"))
return ecSignNonrepudiation;
if (keyAlg.EqualsLiteral("ec-nonrepudiation"))
return ecNonrepudiation;
if (keyAlg.EqualsLiteral("dsa-sign-nonrepudiation"))
return dsaSignNonrepudiation;
if (keyAlg.EqualsLiteral("dsa-sign"))
return dsaSign;
if (keyAlg.EqualsLiteral("dsa-nonrepudiation"))
return dsaNonrepudiation;
if (keyAlg.EqualsLiteral("dh-ex"))
return dhEx;
return invalidKeyGen;
if (keyGenType->keyGenType == invalidKeyGen)
NS_LossyConvertUTF16toASCII keyGenAlgNarrow(dependentKeyGenAlg);
JS_ReportError(cx, "%s%s%s", JS_ERROR,
"invalid key generation argument:",
keyGenAlgNarrow.get());
goto loser;
if (*slot == nullptr)
*slot = nsGetSlotForKeyGen(keyGenType->keyGenType, uiCxt);
if (*slot == nullptr)
goto loser;
rv = cryptojs_generateOneKeyPair(cx,keyGenType,keySize,params.ptr(),uiCxt, *slot,willEscrow);
if (rv != NS_OK)
NS_LossyConvertUTF16toASCII keyGenAlgNarrow(dependentKeyGenAlg);
JS_ReportError(cx,"%s%s%s", JS_ERROR,
"could not generate the key for algorithm ",
keyGenAlgNarrow.get());
goto loser;
return NS_OK;
loser:
return NS_ERROR_FAILURE;
