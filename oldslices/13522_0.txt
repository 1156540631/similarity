static void * AnimationThread(void *)
vector<AnimationPart> parts;
AnimationPart part;
if (headerRead &&
sscanf(line, "%d %d %d", &width, &height, &fps) == 3) {
headerRead = false;
} else if (part.ReadFromString(line)) {
parts.push_back(part);        }
for (uint32_t i = 0; i < parts.size(); i++) {
AnimationPart &part = parts[i];
unionType myUnion;
myUnion.unionFirst = k;
AnimationFrame &frame = func(part, myUnion);
AnimationFrame func(AnimationPart& part, unionType myUnion)
uint32_t k = myUnion.unionSecond;
return part.frames[k];
AnimationFrame &frame = func(part, myUnion);
if (!frame.buf) {
frame.ReadPngFrame(format);             }
void *vaddr;
if (grmodule->lock(grmodule, buf->handle,
GRALLOC_USAGE_SW_READ_NEVER |
GRALLOC_USAGE_SW_WRITE_OFTEN |
GRALLOC_USAGE_HW_FB,
0, 0, width, height, &vaddr)) {
LOGW("Failed to lock buffer_handle_t");
display->QueueBuffer(buf);
break;                }
if (buf->height == frame.height && buf->stride == frame.width) {
memcpy(vaddr, frame.buf,  frame.width * frame.height * frame.bytepp);
