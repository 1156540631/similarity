static int tls_decrypt_ticket(SSL *s, const unsigned char *etick,
int eticklen, const unsigned char *sess_id,
int sesslen, SSL_SESSION **psess)
int slen, mlen, renew_ticket = 0;
HMAC_CTX hctx;
EVP_CIPHER_CTX ctx;
HMAC_CTX_init(&hctx);
EVP_CIPHER_CTX_init(&ctx);
&ctx, &hctx, 0);
if (memcmp(etick, tctx->tlsext_tick_key_name, 16))
if (HMAC_Init_ex(&hctx, tctx->tlsext_tick_hmac_key, 16,
|| EVP_DecryptInit_ex(&ctx, EVP_aes_128_cbc(), NULL,
etick + 16) <= 0) {
mlen = HMAC_size(&hctx);
if (eticklen <= 16 + EVP_CIPHER_CTX_iv_length(&ctx) + mlen) {
eticklen -= mlen;
if (HMAC_Update(&hctx, etick, eticklen) <= 0
if (CRYPTO_memcmp(tick_hmac, etick + eticklen, mlen)) {
p = etick + 16 + EVP_CIPHER_CTX_iv_length(&ctx);
eticklen -= 16 + EVP_CIPHER_CTX_iv_length(&ctx);
sdec = OPENSSL_malloc(eticklen);
|| EVP_DecryptUpdate(&ctx, sdec, &slen, p, eticklen) <= 0) {
if (EVP_DecryptFinal(&ctx, sdec + slen, &mlen) <= 0) {
slen += mlen;
p = sdec;
sess = d2i_SSL_SESSION(NULL, &p, slen);
memcpy(sess->session_id, sess_id, sesslen);
