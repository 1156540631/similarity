return -1;
orig_offset = offset;
rf_chan = tvb_get_guint8(tvb, offset+1);
rf_len = tvb_get_ntohs(tvb, offset+2);
return -1;
rf_chan, rf_len);
ti = proto_tree_add_protocol_format(tree, proto_rtsp, tvb,
offset, 4,
rf_chan, rf_len);
proto_tree_add_item(rtspframe_tree, hf_rtsp_magic, tvb, offset, 1, ENC_NA);
offset += 1;
proto_tree_add_item(rtspframe_tree, hf_rtsp_channel, tvb, offset, 1, ENC_NA);
offset += 1;
proto_tree_add_item(rtspframe_tree, hf_rtsp_length, tvb, offset, 2, ENC_BIG_ENDIAN);
offset += 2;
next_tvb = tvb_new_subset(tvb, offset, length_remaining, rf_len);
proto_tree_add_text(rtspframe_tree, tvb, offset, rf_len,
"Data (%u bytes)", rf_len);
offset += rf_len;
return offset - orig_offset;
tokenlen = get_token_len(line, line+5, &next_token);
(len == linelen || isspace(line[len])))
g_ascii_strncasecmp(rtsp_methods[ii], line, len) == 0 &&
gint          next_offset;
tvb_ensure_length_remaining(tvb, offset), &next_offset,
FALSE);
if (!req_resp_hdrs_do_reassembly(tvb, offset, pinfo,
return -1;
line = tvb_get_ptr(tvb, offset, first_linelen);
orig_offset = offset;
ti = proto_tree_add_item(tree, proto_rtsp, tvb, offset, -1,
content_length = -1;
while (tvb_reported_length_remaining(tvb, offset) != 0) {
linelen = tvb_find_line_end(tvb, offset,
tvb_ensure_length_remaining(tvb, offset), &next_offset,
linelen = tvb_find_line_end(tvb, offset,
FALSE);
linelen = tvb_find_line_end(tvb, offset,
return -1;
colon_offset = tvb_find_guint8(tvb, offset, linelen, ':');
line = tvb_get_ptr(tvb, offset, linelen);
is_request_or_reply = is_rtsp_request_or_reply(line, linelen, &rtsp_type);
linep = line;
c = *linep++;
if (!isascii(c))
if (iscntrl(c))
tvb_ensure_bytes_exist(tvb, offset, linelen + 1);
while (tvb_reported_length_remaining(tvb, offset) != 0) {
linelen = tvb_find_line_end(tvb, offset,
colon_offset = tvb_find_guint8(tvb, offset, linelen, ':');
line = tvb_get_ptr(tvb, offset, linelen);
is_request_or_reply = is_rtsp_request_or_reply(line, linelen, &rtsp_type);
datalen = tvb_length_remaining(tvb, offset);
reported_datalen = tvb_reported_length_remaining(tvb, offset);
datalen = content_length;
datalen = 0;
new_tvb = tvb_new_subset(tvb, offset, datalen,
proto_item_set_len(ti, offset);
if (tvb_get_guint8(tvb, offset) == RTSP_FRAMEHDR) {
datalen = 0;
proto_tree_add_text(rtsp_tree, tvb, offset,
datalen, "Data (%d bytes)",
offset += datalen;
return offset - orig_offset;
int offset = 0;
? dissect_rtspinterleaved(tvb, offset, pinfo, tree)
: dissect_rtspmessage(tvb, offset, pinfo, tree);
len = (tvb_get_guint8(tvb, offset) == RTSP_FRAMEHDR)
offset += len;
while (tvb_reported_length_remaining(tvb, offset) != 0) {
len = (tvb_get_guint8(tvb, offset) == RTSP_FRAMEHDR)
: dissect_rtspmessage(tvb, offset, pinfo, tree);
dissect_rtspmessage(tvbuff_t *tvb, int offset, packet_info *pinfo,
first_linelen = tvb_find_line_end(tvb, offset,
line = tvb_get_ptr(tvb, offset, first_linelen);
line = tvb_get_ptr(tvb, offset, first_linelen);
while (tvb_reported_length_remaining(tvb, offset) != 0) {
linelen = tvb_find_line_end(tvb, offset,
colon_offset = tvb_find_guint8(tvb, offset, linelen, ':');
line = tvb_get_ptr(tvb, offset, linelen);
is_request_or_reply = is_rtsp_request_or_reply(line, linelen, &rtsp_type);
is_rtsp_request_or_reply(const guchar *line, size_t linelen, rtsp_type_t *type)
if (linelen >= 5 && g_ascii_strncasecmp("RTSP/", line, 5) == 0) {
tokenlen = get_token_len(next_token, line+linelen, &next_token);
linep = line;
c = *linep++;
if (!isascii(c))
if (iscntrl(c))
dissect_rtsp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)
while (tvb_reported_length_remaining(tvb, offset) != 0) {
len = (tvb_get_guint8(tvb, offset) == RTSP_FRAMEHDR)
: dissect_rtspmessage(tvb, offset, pinfo, tree);
dissect_rtspinterleaved(tvbuff_t *tvb, int offset, packet_info *pinfo,
length_remaining = tvb_ensure_length_remaining(tvb, offset);
while (tvb_reported_length_remaining(tvb, offset) != 0) {
len = (tvb_get_guint8(tvb, offset) == RTSP_FRAMEHDR)
: dissect_rtspmessage(tvb, offset, pinfo, tree);
