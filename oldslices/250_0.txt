js_ReportOutOfScriptQuota(cx);
JS_ReportErrorFlagsAndNumber(cx, JSREPORT_WARNING,
OBJ_SET_BLOCK_DEPTH(cx, blockObj, cg->stackDepth);
ndefs = OBJ_BLOCK_COUNT(cx, blockObj);
ptrdiff_t offset = EmitCheck(cx, cg, op, 1);
UpdateDepth(cx, cg, offset);
UpdateDepth(cx, cg, offset);
if (js_LookupLocal(cx, cg->fun, atom, NULL) != JSLOCAL_NONE)
ok = OBJ_LOOKUP_PROPERTY(cx, obj, ATOM_TO_JSID(atom), &objbox,
ok = OBJ_GET_ATTRIBUTES(cx, obj, ATOM_TO_JSID(atom), prop,
ok = OBJ_GET_PROPERTY(cx, obj, ATOM_TO_JSID(atom), vp);
OBJ_DROP_PROPERTY(cx, objbox, prop);
if (js_Emit1(cx, cg, (JSOp)(JSOP_INDEXBASE1 + indexBase - 1)) < 0)
JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL,
if (js_Emit2(cx, cg, JSOP_INDEXBASE, (JSOp)indexBase) < 0)
bigSuffix = EmitBigIndexPrefix(cx, cg, index);
return bigSuffix == JSOP_NOP || js_Emit1(cx, cg, bigSuffix) >= 0;
return EmitIndexOp(cx, op, cg->objectList.index(objbox), cg);
js_ReportCompileErrorNumber(cx, CG_TS(cg), NULL,
if (!EmitObjectOp(cx, pn->pn_objbox, JSOP_ENTERBLOCK, cg))
jsint depth = AdjustBlockSlot(cx, cg, OBJ_BLOCK_DEPTH(cx, blockObj));
limit = slot + OBJ_BLOCK_COUNT(cx, blockObj);
js_ReallocSlots(cx, blockObj, JSSLOT_FREE(&js_BlockClass), JS_TRUE);
count = OBJ_BLOCK_COUNT(cx, pn2->pn_objbox->object);
if (!EmitEnterBlock(cx, pn2, cg))
if (!js_EmitTree(cx, cg, pn->pn_left))
jsbitmap intmap_space[INTMAP_LENGTH];
atom = js_AtomizeDouble(cx, d);
ok = LookupCompileTimeConstant(cx, cg, pn4->pn_atom, &v);
intmap = intmap_space;
* sizeof(jsbitmap));
(JS_BIT(16) >> JS_BITS_PER_WORD_LOG2)
intmap_bitlen = INTMAP_LENGTH << JS_BITS_PER_WORD_LOG2;
intmap_bitlen = JS_BIT(16);
(JS_BIT(16) >> JS_BITS_PER_WORD_LOG2)
* sizeof(jsbitmap));
JS_malloc(cx,
intmap = (jsbitmap *)
memset(intmap, 0, intmap_bitlen >> JS_BITS_PER_BYTE_LOG2);
AdjustBlockSlot(JSContext *cx, JSCodeGenerator *cg, jsint slot)
jsint depth = AdjustBlockSlot(cx, cg, OBJ_BLOCK_DEPTH(cx, blockObj));
EmitEnterBlock(JSContext *cx, JSParseNode *pn, JSCodeGenerator *cg)
if (!EmitObjectOp(cx, pn->pn_objbox, JSOP_ENTERBLOCK, cg))
if (!EmitEnterBlock(cx, pn2, cg))
if (!js_EmitTree(cx, cg, pn->pn_left))
JS_malloc(cx,
intmap = (jsbitmap *)
memset(intmap, 0, intmap_bitlen >> JS_BITS_PER_BYTE_LOG2);
EmitSwitch(JSContext *cx, JSCodeGenerator *cg, JSParseNode *pn,
if (!js_EmitTree(cx, cg, pn->pn_left))
JS_malloc(cx,
intmap = (jsbitmap *)
memset(intmap, 0, intmap_bitlen >> JS_BITS_PER_BYTE_LOG2);
js_Emit1(JSContext *cx, JSCodeGenerator *cg, JSOp op)
ptrdiff_t offset = EmitCheck(cx, cg, op, 1);
return bigSuffix == JSOP_NOP || js_Emit1(cx, cg, bigSuffix) >= 0;
return EmitIndexOp(cx, op, cg->objectList.index(objbox), cg);
EmitCheck(JSContext *cx, JSCodeGenerator *cg, JSOp op, ptrdiff_t delta)
ptrdiff_t offset = EmitCheck(cx, cg, op, 1);
ptrdiff_t offset = EmitCheck(cx, cg, op, 2);
if (js_Emit1(cx, cg, (JSOp)(JSOP_INDEXBASE1 + indexBase - 1)) < 0)
if (js_Emit2(cx, cg, JSOP_INDEXBASE, (JSOp)indexBase) < 0)
bigSuffix = EmitBigIndexPrefix(cx, cg, index);
return bigSuffix == JSOP_NOP || js_Emit1(cx, cg, bigSuffix) >= 0;
return EmitIndexOp(cx, op, cg->objectList.index(objbox), cg);
EmitObjectOp(JSContext *cx, JSObjectBox *objbox, JSOp op,
return EmitIndexOp(cx, op, cg->objectList.index(objbox), cg);
if (!EmitObjectOp(cx, pn->pn_objbox, JSOP_ENTERBLOCK, cg))
EmitIndexOp(JSContext *cx, JSOp op, uintN index, JSCodeGenerator *cg)
bigSuffix = EmitBigIndexPrefix(cx, cg, index);
return EmitIndexOp(cx, op, cg->objectList.index(objbox), cg);
EmitBigIndexPrefix(JSContext *cx, JSCodeGenerator *cg, uintN index)
bigSuffix = EmitBigIndexPrefix(cx, cg, index);
return EmitIndexOp(cx, op, cg->objectList.index(objbox), cg);
if (!EmitObjectOp(cx, pn->pn_objbox, JSOP_ENTERBLOCK, cg))
if (!EmitEnterBlock(cx, pn2, cg))
if (!js_EmitTree(cx, cg, pn->pn_left))
JS_malloc(cx,
intmap = (jsbitmap *)
memset(intmap, 0, intmap_bitlen >> JS_BITS_PER_BYTE_LOG2);
UpdateDepth(JSContext *cx, JSCodeGenerator *cg, ptrdiff_t target)
UpdateDepth(cx, cg, offset);
UpdateDepth(cx, cg, offset);
js_Emit2(JSContext *cx, JSCodeGenerator *cg, JSOp op, jsbytecode op1)
ptrdiff_t offset = EmitCheck(cx, cg, op, 2);
if (js_Emit2(cx, cg, JSOP_INDEXBASE, (JSOp)indexBase) < 0)
bigSuffix = EmitBigIndexPrefix(cx, cg, index);
LookupCompileTimeConstant(JSContext *cx, JSCodeGenerator *cg, JSAtom *atom,
ok = LookupCompileTimeConstant(cx, cg, pn4->pn_atom, &v);
JS_malloc(cx,
intmap = (jsbitmap *)
memset(intmap, 0, intmap_bitlen >> JS_BITS_PER_BYTE_LOG2);
