ts_max=
ts_min= AV_NOPTS_VALUE;
e= &st->index_entries[index];
ts_min= e->timestamp;
ts_max= e->timestamp;
pos= ff_gen_search(s, stream_index, target_ts, pos_min, pos_max, pos_limit, ts_min, ts_max, flags, &ts, avif->read_timestamp);
int64_t ts_min, int64_t ts_max, int flags, int64_t *ts_ret,
pos_min = s->data_offset;
ts_min = read_timestamp(s, stream_index, &pos_min, INT64_MAX);
int step= 1024;
filesize = avio_size(s->pb);
pos_max = filesize - 1;
pos_max -= step;
step += step;
ts_max = read_timestamp(s, stream_index, &pos_max, pos_max + step);
int64_t tmp_ts= read_timestamp(s, stream_index, &tmp_pos, INT64_MAX);
ts_max= tmp_ts;
ts = read_timestamp(s, stream_index, &pos, INT64_MAX);
assert(ts != AV_NOPTS_VALUE);
ts_max = ts;
ts_min = ts;
pos = av_rescale(target_ts - ts_min, pos_max - pos_min, ts_max - ts_min)
pos_min = s->data_offset;
pos_max = avio_size(s->pb) - 1;
if     (pos < pos_min) pos= pos_min;
else if(pos > pos_max) pos= pos_max;
avio_seek(s->pb, pos, SEEK_SET);
index = av_index_search_timestamp(st, timestamp, flags);
if(s->iformat->read_seek(s, stream_index, timestamp, flags) >= 0)
return seek_frame_byte(s, stream_index, timestamp, flags);
timestamp = av_rescale(timestamp, st->time_base.den, AV_TIME_BASE * (int64_t)st->time_base.num);
ret = s->iformat->read_seek(s, stream_index, timestamp, flags);
return ff_seek_frame_binary(s, stream_index, timestamp, flags);
ret = av_seek_frame(s, stream_index, ts, flags | (dir^AVSEEK_FLAG_BACKWARD));
static int seek_frame_byte(AVFormatContext *s, int stream_index, int64_t pos, int flags){
avio_seek(s->pb, pos, SEEK_SET);
ret = av_seek_frame(s, stream_index, ts, flags | (dir^AVSEEK_FLAG_BACKWARD));
int av_seek_frame(AVFormatContext *s, int stream_index, int64_t timestamp, int flags)
int ret = seek_frame_internal(s, stream_index, timestamp, flags);
int64_t timestamp, int flags)
return ff_seek_frame_binary(s, stream_index, timestamp, flags);
int ff_seek_frame_binary(AVFormatContext *s, int stream_index, int64_t target_ts, int flags)
av_dlog(s, "read_seek: %d %s\n", stream_index, av_ts2str(target_ts));
index= av_index_search_timestamp(st, target_ts, flags | AVSEEK_FLAG_BACKWARD);
int av_index_search_timestamp(AVStream *st, int64_t wanted_timestamp,
wanted_timestamp, flags);
int64_t wanted_timestamp, int flags)
index= av_index_search_timestamp(st, target_ts, flags & ~AVSEEK_FLAG_BACKWARD);
assert(e->timestamp >= target_ts);
ret = av_seek_frame(s, stream_index, ts, flags | (dir^AVSEEK_FLAG_BACKWARD));
int av_index_search_timestamp(AVStream *st, int64_t wanted_timestamp,
wanted_timestamp, flags);
int64_t wanted_timestamp, int flags)
assert(e->timestamp >= target_ts);
int avformat_seek_file(AVFormatContext *s, int stream_index, int64_t min_ts, int64_t ts, int64_t max_ts, int flags)
int ret = av_seek_frame(s, stream_index, ts, flags | dir);
ret = av_seek_frame(s, stream_index, dir ? max_ts : min_ts, flags | dir);
int64_t ff_gen_search(AVFormatContext *s, int stream_index, int64_t target_ts,
av_dlog(s, "gen_seek: %d %s\n", stream_index, av_ts2str(target_ts));
ts_min = read_timestamp(s, stream_index, &pos_min, INT64_MAX);
pos = av_rescale(target_ts - ts_min, pos_max - pos_min, ts_max - ts_min)
ret = av_seek_frame(s, stream_index, ts, flags | (dir^AVSEEK_FLAG_BACKWARD));
