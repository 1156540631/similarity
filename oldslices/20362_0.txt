stonesoup_tainted_file_name = getenv(stonesoup_env_var_name);
stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,"rb");
if (stonesoup_tainted_file != 0) {
fseek(stonesoup_tainted_file,0L,2);
stonesoup_lsize = ftell(stonesoup_tainted_file);
rewind(stonesoup_tainted_file);
*stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))));
if (*stonesoup_tainted_buff != 0) {
stonesoup_result = fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file);
if (stonesoup_tainted_file != 0) {
fclose(stonesoup_tainted_file);
stonesoup_read_taint(&agenizing_herschelian,"BURKES_STORZ");
if (agenizing_herschelian != 0) {;
nonsludging_unridableness = agenizing_herschelian;
underporter_sufflaminate = stoutish_missample(nonsludging_unridableness);
byelovo_echo stoutish_missample(byelovo_echo outbringing_azotic)
return outbringing_azotic;
underporter_sufflaminate = stoutish_missample(nonsludging_unridableness);
algal_intercessive = ((char *)underporter_sufflaminate);
stonesoup_taint_len = ((int )(strlen(algal_intercessive)));
for (; stonesoup_taint_len >= 0; (--stonesoup_buff_size , --stonesoup_taint_len)) {
stonesoup_data->buffer[stonesoup_buff_size] = algal_intercessive[stonesoup_taint_len];
tracepoint(stonesoup_trace, variable_buffer, "stonesoup_data->buffer", stonesoup_data->buffer, "CROSSOVER-STATE");
stonesoup_data->buffer[stonesoup_i] = stonesoup_toupper(stonesoup_data->buffer[stonesoup_i]);
free(stonesoup_data);
tracepoint(stonesoup_trace, variable_buffer, "stonesoup_data->buffer", stonesoup_data->buffer, "FINAL-STATE");
if (underporter_sufflaminate != 0)
free(((char *)underporter_sufflaminate));
int stonesoup_toupper(int c)
if (c >= 97 && c <= 122) {
return c - 32;
return c;
stonesoup_data->buffer[stonesoup_i] = stonesoup_toupper(stonesoup_data->buffer[stonesoup_i]);
stonesoup_printf("%c",stonesoup_data->before(stonesoup_data->buffer[stonesoup_i]));
void stonesoup_printf(char * format, ...) {
stonesoup_printf("%c",stonesoup_data->before(stonesoup_data->buffer[stonesoup_i]));
